module i_half_adder(
input a, b,
input S, Cout,
input DEFAULT_CLOCK,
input DEFAULT_RESET
);

assert property(@(posedge DEFAULT_CLOCK) (S) |-> S);
assert property(@(posedge DEFAULT_CLOCK) (a) |-> a);
assert property(@(posedge DEFAULT_CLOCK) (b) |-> b);
assert property(@(posedge DEFAULT_CLOCK) (Cout) |-> Cout);
assert property(@(posedge DEFAULT_CLOCK) (Cout) |-> b);
assert property(@(posedge DEFAULT_CLOCK) (Cout) |-> a);
assert property(@(posedge DEFAULT_CLOCK) (DEFAULT_RESET ##2 1) |-> Cout);
assert property(@(posedge DEFAULT_CLOCK) (DEFAULT_RESET ##3 1) |-> Cout);
assert property(@(posedge DEFAULT_CLOCK) (DEFAULT_RESET ##1 1) |-> b);
assert property(@(posedge DEFAULT_CLOCK) (DEFAULT_RESET ##2 1) |-> b);
assert property(@(posedge DEFAULT_CLOCK) (DEFAULT_RESET ##3 1) |-> b);
assert property(@(posedge DEFAULT_CLOCK) (DEFAULT_RESET ##4 1) |-> a);
assert property(@(posedge DEFAULT_CLOCK) (DEFAULT_RESET ##3 1) |-> a);
assert property(@(posedge DEFAULT_CLOCK) (DEFAULT_RESET ##2 1) |-> a);
assert property(@(posedge DEFAULT_CLOCK) (DEFAULT_RESET ##4 1) |-> S);
assert property(@(posedge DEFAULT_CLOCK) (DEFAULT_RESET ##1 1) |-> S);
endmodule
