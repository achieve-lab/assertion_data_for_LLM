
`include "defines.v"
module i_uartTrans(
		// input bit-stream
		input [1:0] stateReg, stateNext,	// current and next states
		input [2:0] nReg, nNext,		// counter
		input tx, txDoneTick,
		input		 txReg, txNext,	// current bit being transferred
		input [3:0] sReg, sNext,		//	counter
		input clk, reset, sTick, txStart,
		input [7:0] bReg, bNext,		// perhaps keeps data to be sent
		input [`dataBits-1 :0] din
);
property a10;
@(posedge clk) (txNext == 0) |=> (tx == 0);
endproperty
assert_a10: assert property(a10);

property a9;
@(posedge clk) (txNext == 1) |=> (tx == 1);
endproperty
assert_a9: assert property(a9);

property a8;
@(posedge clk) (sTick == 1 & stateReg[0] == 0) |=> (txDoneTick == 0);
endproperty
assert_a8: assert property(a8);

property a6;
@(posedge clk) (stateReg[0] == 1) |-> (txDoneTick == 0);
endproperty
assert_a6: assert property(a6);

property a1;
@(posedge clk) (sReg[0] == 0) |=> (txDoneTick == 0);
endproperty
assert_a1: assert property(a1);

property a3;
@(posedge clk) (sReg[2] == 0) |=> (txDoneTick == 0);
endproperty
assert_a3: assert property(a3);

property a2;
@(posedge clk) (sReg[1] == 0) |=> (txDoneTick == 0);
endproperty
assert_a2: assert property(a2);

property a7;
@(posedge clk) (txStart == 1) |=> (txDoneTick == 0);
endproperty
assert_a7: assert property(a7);

property a5;
@(posedge clk) (nReg[1] == 0) |=> (txDoneTick == 0);
endproperty
assert_a5: assert property(a5);

property a4;
@(posedge clk) (nReg[0] == 0) |=> (txDoneTick == 0);
endproperty
assert_a4: assert property(a4);

property a0;
@(posedge clk) (txStart == 0) |-> (txDoneTick == 0);
endproperty
assert_a0: assert property(a0);
endmodule
