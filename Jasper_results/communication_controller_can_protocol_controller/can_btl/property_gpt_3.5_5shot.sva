module i_can_btl(
input   [2:0] time_segment2,
/* Bus Timing 1 inputister */
input sampled_bit,
input           sampled_bit_q,
input         triple_sampling,
input         go_tx,
input        hard_sync,
input           seg2,
/* Bus Timing 0 inputister */
input           hard_sync_blocked,
input     [3:0] delay,
input          go_sync,
input   [1:0] sync_jump_width,
input          go_seg2,
input     [1:0] sample,
input         tx_next,
input           tx_next_sp,
input           sync,
input           clk_en_q,
input           resync_latched,
input         rx_idle,
input          sync_window,
input           tx_point,
input          go_seg1,
input [7:0]    preset_cnt,
input         go_rx_inter,
input        sample_point,
input           seg1,
input         go_overload_frame,
input   [5:0] baud_r_presc,
input         clk,
input         tx,
input         transmitting,
input     [4:0] quant_cnt,
input         send_ack,
input     [6:0] clk_cnt,
input         rx,
input         transmitter,
input         node_error_passive,
input   [3:0] time_segment1,
input           sync_blocked,
input           clk_en,
input         rx_inter,
input          resync,
input         rst,
input         go_error_frame
);

assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> sample_point);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> sampled_bit);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> tx_next_sp);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> tx_point);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> sampled_bit);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> sample_point);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> sampled_bit);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> tx_next_sp);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> tx_point);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> sampled_bit);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> sample_point);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> sampled_bit);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> tx_next_sp);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> tx_point);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> sampled_bit);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> sample_point);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> sampled_bit);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> tx_next_sp);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> tx_point);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> sampled_bit);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> sample_point);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> sampled_bit);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> tx_next_sp);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> tx_point);
assert property(@(posedge clk) (synced_bit & sampled_bit_q) |-> sampled_bit);
endmodule