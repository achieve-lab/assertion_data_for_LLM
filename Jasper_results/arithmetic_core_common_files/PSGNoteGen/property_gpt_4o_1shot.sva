module i_PSGNoteGen(
input [11:0] inputS ,
input [3:0] test,
input [15:0] freq0, freq1, freq2, freq3,
input [2:0] bgn,		// bus grant number
input [3:0] bg,
input [11:0] pwx,
input [7:0] ibr,
input rst,
input [11:0] inputN ,
input [11:0] out,
input [11:0] inputW [3:0],
input [7:0] paccx ,
input [1:0] sel ,
input ack,
input [15:0] freqx,
input [4:0] vtx,
input [23:0] acc,
input [11:0] inputT,
input msb ,
input [7:0] cnt,
input [11:0] inputP ,
input [11:0] pw0, pw1, pw2, pw3,
input synca ,
input [23:0] accx [3:0],
input [11:0] wave,
input [3:0] sync,
input [23:0] pxacc,
input [23:0] acc0, acc1, acc2, acc3,	// 1.023MHz / 2^ 24 ,
input [4:0] vt0, vt1, vt2, vt3,
input [3:0] br,
input [7:0] pxacc23x,
input [11:0] pacc [3:0],
input pxacc23 ,
input [22:0] lfsr [3:0],
input [3:0] ringmod,
input clk,
input [11:0] o,
input accTran ,
input [22:0] lfsrx ,
input [11:0] outputP,
input [11:0] outputS,
input [11:0] outputT,
input [11:0] outputN,
input [11:0] outputW [3:0],
input n,

input [4:1] i1,
input e,
input [4:1] i2,
input [4:1] i0,
input [4:1] z,
input [4:1] i3,

input [12-1:0] o1,o2,o3,o4,o5,
input [4:0] s,
input [12-1:0] a,b,c,d
);

assert property(@(posedge clk) (cnt < 8'd4) |-> (pxacc23x[sel] == pxacc[23]));
assert property(@(posedge clk) (cnt < 8'd4) |-> (pacc[sel] == acc[23:12]));
assert property(@(posedge clk) (cnt < 8'd4 && paccx[2] != acc[18]) |-> (lfsr[sel] == {lfsrx[21:0], ~(lfsrx[22] ^ lfsrx[17])}));
assert property(@(posedge clk) (cnt < 8'd4 && accTran && vtx[4]) |-> (ibr[sel] == 1));
assert property(@(posedge clk) (cnt < 8'd4 && ~accTran && vtx[4]) |-> (ibr[sel] == 0));
assert property(@(posedge clk) (cnt < 8'd4 && ~test[sel] && synca) |-> (accx[sel] == 0));
assert property(@(posedge clk) (cnt < 8'd4 && ~test[sel] && ~synca) |-> (accx[sel] == acc + freqx));
assert property(@(posedge clk) (cnt < 8'd4 && test[sel]) |-> (accx[sel] == 0));
assert property(@(posedge clk) (msb) |-> (outputT == ~acc[22:11]));
assert property(@(posedge clk) (~msb) |-> (outputT == acc[22:11]));
assert property(@(posedge clk) (outputP == {12{acc[23:12] < pwx}}));
assert property(@(posedge clk) (outputS == acc[23:12]));
assert property(@(posedge clk) (outputN == lfsrx[11:0]));
assert property(@(posedge clk) (vtx == 0) |-> (out == outputT));
assert property(@(posedge clk) (vtx == 1) |-> (out == outputS));
assert property(@(posedge clk) (vtx == 2) |-> (out == outputP));
assert property(@(posedge clk) (vtx == 3) |-> (out == outputN));
assert property(@(posedge clk) (vtx == 4) |-> (out == outputW[sel]));
endmodule