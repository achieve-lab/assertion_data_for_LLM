parameter pChannels = 4;
parameter pPrescalerBits = 8;
module i_PSGEnvGen(
	input [19:0] envDvn [3:0],
	input [19:0] envStepPeriod1 ,
	input [7:0] sustain3,
	input [15:0] envStepPeriod,	// determines the length of one step of the envelope generator
	input [17:0] decay,
	input [19:0] envDvnx,
	input [11:0] relese_x,
	input [11:0] relese2,
	input [15:0] attack0,
	input [7:0] envCtr2 [3:0],
	input [15:0] attack1,
    input [1:0] sel ,
	input [15:0] attack,
	input [7:0] sustain0,
	input [7:0] sustain2,
	input rst,							// reset
	input [7:0] sustain_x,
	input [11:0] relese1,
	input [7:0] sustain1,
	input [15:0] attack_x,
	input [7:0] envCtr [3:0],
	input [11:0] decay2,
	input [11:0] decay_x,
	input clk,							// core clock
	input [15:0] attack2,
	input [7:0] sustain,
	input [15:0] attack3,
	input [2:0] icnt [3:0],		// interval count
	input [2:0] envStateNxt,
	input [11:0] decay3,
	input [11:0] decay0,
	input [17:0] relese,
	input [7:0] envCtrx,
	input [11:0] relese0,
	input [3:0] gate,
	input [7:0] iv [3:0],			// interval value for decay/release
	input [11:0] decay1,
	input [11:0] relese3,
	input [pPrescalerBits-1:0] cnt,		// clock rate prescaler
	input [7:0] o,
	input [2:0] envState [3:0],
        
	input [1:0] s,
	input [4:1] i1,
	input e,
	input [4:1] i2,
	input [4:1] i0,
	input [4:1] z,
	input [4:1] i3
);

assert property(@(posedge clk) (envState[0] == 1 && gate[0] == 1) |-> (envStateNxt == 2);
assert property(@(posedge clk) (envState[1] == 2 && envCtrx == 254) |-> (envStateNxt == 3);
assert property(@(posedge clk) (envState[2] == 3 && envCtrx == sustain) |-> (envStateNxt == 4);
assert property(@(posedge clk) (~gate[3] && envState[3] == 4) |-> (envStateNxt == 0);
assert property(@(posedge clk) (rst) |-> (envState[0] == 0);
assert property(@(posedge clk) (rst) |-> (envState[1] == 0);
assert property(@(posedge clk) (rst) |-> (envState[2] == 0);
assert property(@(posedge clk) (rst) |-> (envState[3] == 0);
assert property(@(posedge clk) (cnt < 4) |-> (envState[sel] == envStateNxt);
assert property(@(posedge clk) (cnt < 4) |-> (envCtr[sel] == 0);
assert property(@(posedge clk) (cnt < 4) |-> (envCtr2[sel] == 0);
assert property(@(posedge clk) (cnt < 4) |-> (icnt[sel] == 0);
assert property(@(posedge clk) (cnt < 4) |-> (iv[sel] == 0);
assert property(@(posedge clk) (cnt < 4) |-> (envDvn[sel] == 0);
assert property(@(posedge clk) (cnt < 4) |-> (envStepPeriod == 0);
assert property(@(posedge clk) (cnt < 4) |-> (envDvn[sel] == envStepPeriod1);
assert property(@(posedge clk) (cnt < 4) |-> (envDvn[sel] == envDvnx - 1);
endmodule