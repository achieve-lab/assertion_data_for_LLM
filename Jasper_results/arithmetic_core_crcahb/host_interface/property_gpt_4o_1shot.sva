module i_host_interface(
	input HSElx,
	input buffer_write_en,
	input HREADYOUT,
	input HRESP,
	input rev_out_type,
	input [31:0] HRDATA,
	input [31:0] crc_poly_out,
	input buffer_full,
	input read_wait,
input crc_idr_sel,
input crc_poly_sel,
	input [31:0] HADDR,
	input HCLK,
	input [ 1:0] crc_poly_size,
input buffer_read_en,
input crc_cr_sel,
input ahb_enable,
input write_en,
	input [31:0] crc_init_out,
	input crc_poly_en,
	input reset_pending,
	input [ 1:0] bus_size,
input crc_init_sel,
	input [ 1:0] rev_in_type,
input [2:0] hsize_pp,
input sample_bus,
	input [ 7:0] crc_idr_out,
	input [31:0] HWDATA,
input crc_dr_sel,
	input HREADY,
	input [31:0] bus_wr,
	input [ 2:0] HSIZE,
	input [31:0] crc_out,
	input crc_idr_en,
	input crc_init_en,
	input HRESETn,
input hselx_pp,
input read_en,
input [4:0] crc_cr_ff,
input [1:0] htrans_pp,
	input [ 1:0] HTRANS,
input [2:0] haddr_pp,
input hwrite_pp,
	input HWRITE,
	input reset_chain,
input crc_cr_en,
input DEFAULT_CLOCK,
input DEFAULT_RESET,
input [31:0] crc_cr_rd
);

assert property(@(posedge HCLK) (!HRESETn) |-> (hselx_pp == 1'b0));
assert property(@(posedge HCLK) (sample_bus) |-> (haddr_pp == HADDR[4:2]));
assert property(@(posedge HCLK) (sample_bus) |-> (hsize_pp == HSIZE));
assert property(@(posedge HCLK) (sample_bus) |-> (htrans_pp == HTRANS));
assert property(@(posedge HCLK) (sample_bus) |-> (hwrite_pp == HWRITE));
assert property(@(posedge HCLK) (sample_bus) |-> (hselx_pp == HSElx));
assert property(@(posedge HCLK) (htrans_pp == NON_SEQ) |-> (ahb_enable == 1'b1));
assert property(@(posedge HCLK) (hselx_pp && hwrite_pp && ahb_enable) |-> (write_en == 1'b1));
assert property(@(posedge HCLK) (hselx_pp && !hwrite_pp && ahb_enable) |-> (read_en == 1'b1));
assert property(@(posedge HCLK) (haddr_pp == CRC_DR) |-> (crc_dr_sel == 1'b1));
assert property(@(posedge HCLK) (haddr_pp == CRC_INIT) |-> (crc_init_sel == 1'b1));
assert property(@(posedge HCLK) (haddr_pp == CRC_IDR) |-> (crc_idr_sel == 1'b1));
assert property(@(posedge HCLK) (haddr_pp == CRC_POL) |-> (crc_poly_sel == 1'b1));
assert property(@(posedge HCLK) (haddr_pp == CRC_CR) |-> (crc_cr_sel == 1'b1));
assert property(@(posedge HCLK) (crc_dr_sel && write_en) |-> (buffer_write_en == 1'b1));
assert property(@(posedge HCLK) (crc_init_sel && write_en) |-> (crc_init_en == 1'b1));
assert property(@(posedge HCLK) (crc_idr_sel && write_en) |-> (crc_idr_en == 1'b1));
assert property(@(posedge HCLK) (crc_poly_sel && write_en) |-> (crc_poly_en == 1'b1));
assert property(@(posedge HCLK) (crc_cr_sel && write_en) |-> (crc_cr_en == 1'b1));
assert property(@(posedge HCLK) (crc_dr_sel && read_en) |-> (buffer_read_en == 1'b1));
assert property(@(posedge HCLK) (buffer_write_en && buffer_full) |-> (HREADYOUT == 1'b0));
assert property(@(posedge HCLK) (buffer_read_en && read_wait) |-> (HREADYOUT == 1'b0));
assert property(@(posedge HCLK) (crc_init_en && reset_pending) |-> (HREADYOUT == 1'b0));
assert property(@(posedge HCLK) (HREADYOUT && HREADY) |-> (sample_bus == 1'b1));
assert property(@(posedge HCLK) (crc_cr_en && HWDATA[0]) |-> (reset_chain == 1'b1));
assert property(@(posedge HCLK) (!HRESETn) |-> (crc_cr_ff == RESET_CRC_CR));
assert property(@(posedge HCLK) (crc_cr_en) |-> (crc_cr_ff == {HWDATA[7], HWDATA[6:5], HWDATA[4:3]}));
assert property(@(posedge HCLK) (crc_dr_sel) |-> (HRDATA == crc_out));
assert property(@(posedge HCLK) (crc_init_sel) |-> (HRDATA == crc_init_out));
assert property(@(posedge HCLK) (crc_idr_sel) |-> (HRDATA == {24'h0, crc_idr_out}));
assert property(@(posedge HCLK) (crc_poly_sel) |-> (HRDATA == crc_poly_out));
assert property(@(posedge HCLK) (crc_cr_sel) |-> (HRDATA == crc_cr_rd));
endmodule