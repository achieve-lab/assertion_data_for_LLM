  parameter DATA_SIZE = 32;
module i_bit_reversal(
	input  [DATA_SIZE - 1 : 0] data_in,
	input [DATA_SIZE - 1 : 0] data_out,
	input  [1 : 0] rev_type,
	input DEFAULT_CLOCK,
	input DEFAULT_RESET,
input [DATA_SIZE - 1 : 0] data_reversed[0 : 3]
);

assert property(@(posedge clk) (rev_type == 2'b00) |-> (data_out == data_in));
assert property(@(posedge clk) (rev_type == 2'b01) |-> (data_out[7:0] == data_in[7:0]));
assert property(@(posedge clk) (rev_type == 2'b01) |-> (data_out[15:8] == data_in[15:8]));
assert property(@(posedge clk) (rev_type == 2'b01) |-> (data_out[23:16] == data_in[23:16]));
assert property(@(posedge clk) (rev_type == 2'b01) |-> (data_out[31:24] == data_in[31:24]));
assert property(@(posedge clk) (rev_type == 2'b10) |-> (data_out[15:0] == {data_in[7:0], data_in[15:8]});
assert property(@(posedge clk) (rev_type == 2'b10) |-> (data_out[31:16] == {data_in[23:16], data_in[31:24]});
assert property(@(posedge clk) (rev_type == 2'b11) |-> (data_out == {data_in[7:0], data_in[15:8], data_in[23:16], data_in[31:24]});
endmodule