module i_eth_rxethmac(
input          Enable_Crc,
input    [3:0] Data_Crc,
input    MRxClk,
input        AddressMiss,
input        StateSFD,
input          MRxDEq5,
input   [31:0] Crc,
input     [5:0] CrcHash,
input          GenerateRxStartFrm,
input [31:0]  r_HASH0, //  lower 4 bytes Hash Table
input           DelayData,
input          GenerateRxEndFrm,
input     [7:0] RxData_d,
input   [1:0]    StartCalc,
input          ByteCntEq5,
input          ByteCntEq1,
input          ByteCntEq6,
input          ByteCntSmall7,
input          GenerateRxValid,
input          StateDrop,
input        RxValid,
input        CrcError,
input [31:0]  r_HASH1, //  upper 4 bytes Hash Table
input        ByteCntMaxFrame,
input  [15:0] MaxFL,
input  [1:0] StateData,
input         r_Pro,   //  promiscuous enable 
input [7:0] prev_latched_Rx1,
input         Reset,
input     [7:0] LatchedByte,
input          ByteCntEq3,
input            Divided_2_clk ,
input        StatePreamble,
input           RxValid_d,
input         PassAll,
input   [3:0] MRxD,
input         ControlFrmAddressOK,
input           Multicast,
input  [7:0] RxData,
input          DribbleRxEndFrm,
input        RxAbort,
input        CSready,
input           RxStartFrm_d,
input          ByteCntEq2,
input          ByteCntEq4,
input          MRxDEqD,
input         MRxDV,
input          Initialize_Crc,
input [15:0] ByteCnt,
input        RxEndFrm,
input    [3:0] DlyCrcCnt,
input [7:0] prev_latched_Rx,
input         Transmitting,
input          IFGCounterEq24,
input           Broadcast,
input           CrcHashGood,
input          ByteCntEq7,
input  [47:0] MAC,     //  Station Address  
input         r_IFG,
input         DlyCrcEn,
input [15:0] CheckSum,
input           RxEndFrm_d,
input   [31:0]   Sum,
input        ByteCntGreat2,
input            Divided_4_clk ,
input         HugEn,
input        StateIdle,
input        ByteCntEq0,
input [15:0] ByteCntDelayed,
input [15:0] ByteCntOut,
input         r_Bro ,  //  broadcast disable

                                                                                             
input Enable,  
input ResetIFGCounter,
input HashBit,
input ByteHash,
input HASH1,
input RxAddressInvalid,  
input Initialize,                                                                                      
input IFGCounter,
input IncrementIFGCounter,
input HASH0,
input IntHash,
input IncrementByteCounter,
input [3:0] Data,                                                                                        

input [31:0] CrcNext 
);

assert property(@(posedge MRxClk) (Reset) |-> (RxData == 8'h0);
assert property(@(posedge MRxClk) (Reset) |-> (RxData_d == 8'h0);
assert property(@(posedge MRxClk) (Reset) |-> (RxStartFrm == 1'b0);
assert property(@(posedge MRxClk) (Reset) |-> (RxEndFrm == 1'b0);
assert property(@(posedge MRxClk) (StateData[0] & ByteCntEq6) |-> (CrcHashGood == 1'b1);
assert property(@(posedge MRxClk) (StateData[0] & ByteCntEq6) |-> (CrcHash == Crc[31:26]);
assert property(@(posedge MRxClk) (Reset) |-> (Broadcast == 1'b0);
assert property(@(posedge MRxClk) (StateData[0] & ~(&LatchedByte[7:0]) & ByteCntSmall7) |-> (Broadcast == 1'b0);
assert property(@(posedge MRxClk) (StateData[0] & (&LatchedByte[7:0]) & ByteCntEq1) |-> (Broadcast == 1'b1);
assert property(@(posedge MRxClk) (RxAbort | RxEndFrm) |-> (Broadcast == 1'b0);
assert property(@(posedge MRxClk) (Reset) |-> (Multicast == 1'b0);
assert property(@(posedge MRxClk) (StateData[0] & ByteCntEq1 & LatchedByte[0]) |-> (Multicast == 1'b1);
assert property(@(posedge MRxClk) (RxAbort | RxEndFrm) |-> (Multicast == 1'b0);
assert property(@(posedge MRxClk) (Reset) |-> (RxValid_d == 1'b0);
assert property(@(posedge MRxClk) (Reset) |-> (RxValid == 1'b0);
assert property(@(posedge MRxClk) (GenerateRxValid) |-> (RxValid_d == 1'b1);
assert property(@(posedge MRxClk) (RxValid_d) |-> (RxValid == 1'b1);
assert property(@(posedge MRxClk) (Reset) |-> (RxStartFrm_d == 1'b0);
assert property(@(posedge MRxClk) (Reset) |-> (RxStartFrm == 1'b0);
assert property(@(posedge MRxClk) (GenerateRxStartFrm) |-> (RxStartFrm_d == 1'b1);
assert property(@(posedge MRxClk) (RxStartFrm_d) |-> (RxStartFrm == 1'b1);
assert property(@(posedge MRxClk) (Reset) |-> (RxEndFrm_d == 1'b0);
assert property(@(posedge MRxClk) (Reset) |-> (RxEndFrm == 1'b0);
assert property(@(posedge MRxClk) (GenerateRxEndFrm) |-> (RxEndFrm_d == 1'b1);
assert property(@(posedge MRxClk) (RxEndFrm_d | DribbleRxEndFrm) |-> (RxEndFrm == 1'b1);
assert property(@(posedge MRxClk) (ByteCnt[15:0] >= 16'h17 & ByteCnt[15:0] < (16'h17+16'd20)) |-> (prev_latched_Rx == RxData);
assert property(@(posedge MRxClk) (ByteCnt[15:0] >= 16'h17 & ByteCnt[15:0] < (16'h17+16'd20)) |-> (prev_latched_Rx1 == prev_latched_Rx);
assert property(@(posedge MRxClk) (Reset) |-> (CheckSum == 16'd0);
assert property(@(posedge MRxClk) (Reset) |-> (CSready == 1'd0);
assert property(@(posedge MRxClk) (ByteCnt[15:0] == 16'h15) |-> (StartCalc[0] == (RxData == 8'h8));
assert property(@(posedge MRxClk) (ByteCnt[15:0] == 16'h16) |-> (StartCalc[0] == (RxData == 8'h0) & StartCalc[0]);
assert property(@(posedge MRxClk) (ByteCnt[15:0] == 16'h16) |-> (CheckSum == 16'h0);
assert
endmodule