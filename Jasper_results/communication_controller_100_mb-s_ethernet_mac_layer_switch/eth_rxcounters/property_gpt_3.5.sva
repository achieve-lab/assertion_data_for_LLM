module i_eth_rxcounters(
input         DlyCrcEn,
input        ByteCntEq1,               // Byte counter ,
input         StateDrop,
input        ByteCntEq0,               // Byte counter ,
input        ByteCntEq6,               // Byte counter ,
input   [15:0]  ByteCnt,
input [15:0] ByteCntOut,               // Byte counter
input        ByteCntEq4,               // Byte counter ,
input         StateIdle,
input        IFGCounterEq24,           // IFG counter reaches 9600 ns (960 ns)
input        ByteCntEq3,               // Byte counter ,
input        ByteCntGreat2,            // Byte counter > 2
input        ByteCntMaxFrame,          // Byte counter ,
input        ByteCntEq2,               // Byte counter ,
input          ByteCntMax,
input  [15:0]  ByteCntDelayed,
input         MRxDV,
input         r_IFG,
input         HugEn,
input         StatePreamble,
input [15:0]  MaxFL,
input        ByteCntSmall7,            // Byte counter < 7
input         MRxDEqD,
input         StateSFD,
input         Transmitting,
input [3:0]  DlyCrcCnt,                // Delayed CRC counter
input          ResetByteCounter,
input         MRxClk,
input          IncrementByteCounter,
input          ResetIFGCounter,
input [1:0]   StateData,
input        ByteCntEq7,               // Byte counter ,
input        ByteCntEq5,               // Byte counter ,
input   [4:0]   IFGCounter,
input         Reset,
input          IncrementIFGCounter
);

assert property(@(posedge MRxClk) (IFGCounterEq24 & StateSFD & MRxDV & MRxDEqD) |-> (DlyCrcCnt == 4'h0);
assert property(@(posedge MRxClk) (StateDrop & ~IFGCounterEq24) |-> (DlyCrcCnt == 4'h0);
assert property(@(posedge MRxClk) (StateIdle & ~Transmitting & ~IFGCounterEq24) |-> (DlyCrcCnt == 4'h0);
assert property(@(posedge MRxClk) (StatePreamble & ~IFGCounterEq24) |-> (DlyCrcCnt == 4'h0);
assert property(@(posedge MRxClk) (StateSFD & ~IFGCounterEq24) |-> (DlyCrcCnt == 4'h0);
assert property(@(posedge MRxClk) (DlyCrcEn & StateSFD) |-> (DlyCrcCnt == 4'h1);
assert property(@(posedge MRxClk) (|DlyCrcCnt) |-> (DlyCrcEn);
assert property(@(posedge MRxClk) (ByteCntMaxFrame & ~HugEn) |-> (ByteCntMax == 1);
assert property(@(posedge MRxClk) (ByteCnt > 2) |-> (ByteCntGreat2 == 1);
assert property(@(posedge MRxClk) (ByteCnt < 7) |-> (ByteCntSmall7 == 1);
assert property(@(posedge MRxClk) (ByteCnt == 0) |-> (ByteCntEq0 == 1);
assert property(@(posedge MRxClk) (ByteCnt == 1) |-> (ByteCntEq1 == 1);
assert property(@(posedge MRxClk) (ByteCnt == 2) |-> (ByteCntEq2 == 1);
assert property(@(posedge MRxClk) (ByteCnt == 3) |-> (ByteCntEq3 == 1);
assert property(@(posedge MRxClk) (ByteCnt == 4) |-> (ByteCntEq4 == 1);
assert property(@(posedge MRxClk) (ByteCnt == 5) |-> (ByteCntEq5 == 1);
assert property(@(posedge MRxClk) (ByteCnt == 6) |-> (ByteCntEq6 == 1);
assert property(@(posedge MRxClk) (ByteCnt == 7) |-> (ByteCntEq7 == 1);
assert property(@(posedge MRxClk) (ByteCnt == 65535) |-> (ByteCntMax == 1);
endmodule