module i_cavlc_read_total_zeros(
input   chroma_DC_sel,
input     [3:0]   len_comb,
input     [3:0]   TotalZeros_G3,
input     [0:2]   rbsp_chroma_DC,         
input   ena,
input     [1:0]   len_chroma_DC,
input     [3:0]   TotalZeros_LE3,
input     [0:5]   rbsp_G3,        
input   [0:8]   rbsp,
input     [1:0]   TotalZeros_chroma_DC,
input     [0:8]   rbsp_LE3,       
input     [3:0]   len_LE3,
input   sel,
input DEFAULT_CLOCK,
input DEFAULT_RESET,
input  [3:0]   TotalZeros_comb,
input     [2:0]   len_G3,
input   [3:0]   TotalCoeff
);

assert property(@(posedge clk) (ena && sel && chroma_DC_sel) |-> (rbsp_chroma_DC == rbsp[0:2]));
assert property(@(posedge clk) (ena && sel && TotalCoeff[3:2] == 2'b00) |-> (rbsp_LE3 == rbsp[0:8]));
assert property(@(posedge clk) (ena && sel && !chroma_DC_sel && TotalCoeff[3:2] != 2'b00) |-> (rbsp_G3 == rbsp[0:5]));
assert property(@(posedge clk) (TotalCoeff == 1 && rbsp_chroma_DC[0]) |-> (TotalZeros_chroma_DC == 0 && len_chroma_DC == 1));
assert property(@(posedge clk) (TotalCoeff == 1 && rbsp_chroma_DC[1]) |-> (TotalZeros_chroma_DC == 1 && len_chroma_DC == 2));
assert property(@(posedge clk) (TotalCoeff == 1 && rbsp_chroma_DC[2]) |-> (TotalZeros_chroma_DC == 2 && len_chroma_DC == 3));
assert property(@(posedge clk) (TotalCoeff == 1 && !rbsp_chroma_DC[0] && !rbsp_chroma_DC[1] && !rbsp_chroma_DC[2]) |-> (TotalZeros_chroma_DC == 3 && len_chroma_DC == 3));
assert property(@(posedge clk) (TotalCoeff == 2 && rbsp_chroma_DC[0]) |-> (TotalZeros_chroma_DC == 0 && len_chroma_DC == 1));
assert property(@(posedge clk) (TotalCoeff == 2 && rbsp_chroma_DC[1]) |-> (TotalZeros_chroma_DC == 1 && len_chroma_DC == 2));
assert property(@(posedge clk) (TotalCoeff == 2 && !rbsp_chroma_DC[0] && !rbsp_chroma_DC[1]) |-> (TotalZeros_chroma_DC == 2 && len_chroma_DC == 2));
assert property(@(posedge clk) (TotalCoeff != 1 && TotalCoeff != 2 && rbsp_chroma_DC[0]) |-> (TotalZeros_chroma_DC == 0 && len_chroma_DC == 1));
assert property(@(posedge clk) (TotalCoeff != 1 && TotalCoeff != 2 && !rbsp_chroma_DC[0]) |-> (TotalZeros_chroma_DC == 1 && len_chroma_DC == 1));
assert property(@(posedge clk) (TotalCoeff[1:0] == 1 && rbsp_LE3[0]) |-> (TotalZeros_LE3 == 0 && len_LE3 == 1));
assert property(@(posedge clk) (TotalCoeff[1:0] == 1 && rbsp_LE3[1] && rbsp_LE3[2]) |-> (TotalZeros_LE3 == 1 && len_LE3 == 3));
assert property(@(posedge clk) (TotalCoeff[1:0] == 1 && rbsp_LE3[1] && !rbsp_LE3[2]) |-> (TotalZeros_LE3 == 2 && len_LE3 == 3));
assert property(@(posedge clk) (TotalCoeff[1:0] == 1 && rbsp_LE3[2] && rbsp_LE3[3]) |-> (TotalZeros_LE3 == 3 && len_LE3 == 4));
assert property(@(posedge clk) (TotalCoeff[1:0] == 1 && rbsp_LE3[2] && !rbsp_LE3[3]) |-> (TotalZeros_LE3 == 4 && len_LE3 == 4));
assert property(@(posedge clk) (TotalCoeff[1:0] == 1 && rbsp_LE3[3] && rbsp_LE3[4]) |-> (TotalZeros_LE3 == 5 && len_LE3 == 5));
assert property(@(posedge clk) (TotalCoeff[1:0] == 1 && rbsp_LE3[3] && !rbsp_LE3[4]) |-> (TotalZeros_LE3 == 6 && len_LE3 == 5));
assert property(@(posedge clk) (TotalCoeff[1:0] == 1 && rbsp_LE3[4] && rbsp_LE3[5]) |-> (TotalZeros_LE3 == 7 && len_LE3 == 6));
assert property(@(posedge clk) (TotalCoeff[1:0] == 1 && rbsp_LE3[4] && !rbsp_LE3[5]) |-> (TotalZeros_LE3 == 8 && len_LE3 == 6));

endmodule