module i_cavlc_fsm(
input idle,
input  ena,
input  [3:0]  ZeroLeft,
input  [1:0]  TrailingOnes,
input  start,
input [3:0]  i,
input  [7:0]  state,
input  [4:0]  TotalCoeff_comb,
input  [1:0]  TrailingOnes_comb,
input  clk,
input  [4:0]  TotalCoeff,
input  [4:0]  max_coeff_num,
input valid,
input  rst_n
);

assert property(@(posedge clk) (state == `cavlc_idle_s && start) |-> (state == `cavlc_read_total_coeffs_s));
assert property(@(posedge clk) (state == `cavlc_idle_s && !start) |-> (state == `cavlc_idle_s));
assert property(@(posedge clk) (state == `cavlc_read_total_coeffs_s && TrailingOnes_comb > 0 && TotalCoeff_comb > 0) |-> (state == `cavlc_read_t1s_flags_s));
assert property(@(posedge clk) (state == `cavlc_read_total_coeffs_s && TrailingOnes_comb == 0 && TotalCoeff_comb > 0) |-> (state == `cavlc_read_level_prefix_s));
assert property(@(posedge clk) (state == `cavlc_read_total_coeffs_s && TotalCoeff_comb == 0) |-> (state == `cavlc_idle_s && valid == 1));
assert property(@(posedge clk) (state == `cavlc_read_t1s_flags_s && TrailingOnes == TotalCoeff) |-> (state == `cavlc_read_total_zeros_s));
assert property(@(posedge clk) (state == `cavlc_read_t1s_flags_s && TrailingOnes != TotalCoeff) |-> (state == `cavlc_read_level_prefix_s));
assert property(@(posedge clk) (state == `cavlc_read_level_prefix_s) |-> (state == `cavlc_read_level_suffix_s));
assert property(@(posedge clk) (state == `cavlc_read_level_suffix_s) |-> (state == `cavlc_calc_level_s));
assert property(@(posedge clk) (state == `cavlc_calc_level_s && i == 0 && TotalCoeff < max_coeff_num) |-> (state == `cavlc_read_total_zeros_s));
assert property(@(posedge clk) (state == `cavlc_calc_level_s && i == 0 && TotalCoeff >= max_coeff_num) |-> (state == `cavlc_read_run_befores_s));
assert property(@(posedge clk) (state == `cavlc_calc_level_s && i != 0) |-> (state == `cavlc_read_level_prefix_s));
assert property(@(posedge clk) (state == `cavlc_read_total_zeros_s) |-> (state == `cavlc_read_run_befores_s));
assert property(@(posedge clk) (state == `cavlc_read_run_befores_s && (i == 0 || ZeroLeft == 0)) |-> (state == `cavlc_idle_s && valid == 1));
assert property(@(posedge clk) (state == `cavlc_read_run_befores_s && i != 0 && ZeroLeft != 0) |-> (state == `cavlc_read_run_befores_s));
endmodule