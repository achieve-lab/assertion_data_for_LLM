
module i_rxStateMachine(
   input[4:0] rxstate, rxstate_next,
    input get_sfd, // SFD has been received,
   input crc_check_valid,//Indicate the frame passed CRC Check,
    input receiving_d1,
   input get_error_code,
   input check_reset,
   input start_da,// Start to receive Destination Address,
   input crc_check_invalid,//Indicate the frame failed in CRC Check,
    input recv_enable,
   input good_frame_get,// A good frame has been received,
   input get_terminator,//Indicate end of receiving FCS field,
   input receiving, //Rx Engine is working, not in IDLE state and Check state.
    input local_invalid,// The Frame's DA field is not Local MAC,
   input    start_lt,
    input  wait_crc_check, 
    input length_error,//
    input rxclk,
   input bad_frame_get, // A bad frame has been received, 
    input reset
);


property a2;
@(posedge rxclk) (crc_check_valid == 0 & rxstate[3] == 0 & check_reset == 0) |=> (bad_frame_get == 1);
endproperty
assert_a2: assert property(a2);

property a4;
@(posedge rxclk) (crc_check_invalid == 0 & length_error == 0 & crc_check_valid == 1 & rxstate[0] == 1) |=> (bad_frame_get == 0);
endproperty
assert_a4: assert property(a4);

property a7;
@(posedge rxclk) (crc_check_invalid == 0 & length_error == 0 & crc_check_valid == 1 & rxstate[2] == 1) |=> (bad_frame_get == 0);
endproperty
assert_a7: assert property(a7);

property a6;
@(posedge rxclk) (crc_check_invalid == 0 & length_error == 0 & crc_check_valid == 1 & rxstate[1] == 1) |=> (bad_frame_get == 0);
endproperty
assert_a6: assert property(a6);

property a9;
@(posedge rxclk) (crc_check_invalid == 0 & length_error == 0 & crc_check_valid == 1 & rxstate[3] == 0) |=> (bad_frame_get == 0);
endproperty
assert_a9: assert property(a9);

property a3;
@(posedge rxclk) (crc_check_invalid == 0 & length_error == 0 & check_reset == 1 & rxstate[0] == 1) |=> (bad_frame_get == 0);
endproperty
assert_a3: assert property(a3);

property a5;
@(posedge rxclk) (crc_check_invalid == 0 & length_error == 0 & check_reset == 1 & rxstate[1] == 1) |=> (bad_frame_get == 0);
endproperty
assert_a5: assert property(a5);

property a8;
@(posedge rxclk) (crc_check_invalid == 0 & length_error == 0 & check_reset == 1 & rxstate[2] == 1) |=> (bad_frame_get == 0);
endproperty
assert_a8: assert property(a8);

property a1;
@(posedge rxclk) (length_error == 1) |=> (bad_frame_get == 1);
endproperty
assert_a1: assert property(a1);

property a0;
@(posedge rxclk) (crc_check_invalid == 1) |=> (bad_frame_get == 1);
endproperty
assert_a0: assert property(a0);


property a12;
@(posedge rxclk) (crc_check_valid == 0 & check_reset == 1) |=> (good_frame_get == 0);
endproperty
assert_a12: assert property(a12);

property a13;
@(posedge rxclk) (crc_check_valid == 0 & rxstate[3] == 0) |=> (good_frame_get == 0);
endproperty
assert_a13: assert property(a13);

property a15;
@(posedge rxclk) (crc_check_invalid == 0 & length_error == 0 & crc_check_valid == 1 & rxstate[1] == 1) |=> (good_frame_get == 1);
endproperty
assert_a15: assert property(a15);

property a14;
@(posedge rxclk) (crc_check_invalid == 0 & length_error == 0 & crc_check_valid == 1 & rxstate[0] == 1) |=> (good_frame_get == 1);
endproperty
assert_a14: assert property(a14);

property a17;
@(posedge rxclk) (crc_check_invalid == 0 & length_error == 0 & crc_check_valid == 1 & rxstate[3] == 0) |=> (good_frame_get == 1);
endproperty
assert_a17: assert property(a17);

property a16;
@(posedge rxclk) (crc_check_invalid == 0 & length_error == 0 & crc_check_valid == 1 & rxstate[2] == 1) |=> (good_frame_get == 1);
endproperty
assert_a16: assert property(a16);

property a11;
@(posedge rxclk) (length_error == 1) |=> (good_frame_get == 0);
endproperty
assert_a11: assert property(a11);

property a10;
@(posedge rxclk) (crc_check_invalid == 1) |=> (good_frame_get == 0);
endproperty
assert_a10: assert property(a10);

property a19;
@(posedge rxclk) (receiving == 1) |=> (receiving_d1 == 1);
endproperty
assert_a19: assert property(a19);

property a18;
@(posedge rxclk) (receiving == 0) |=> (receiving_d1 == 0);
endproperty
assert_a18: assert property(a18);


property a21;
@(posedge rxclk) (rxstate[2] == 1) ##1 (rxstate[2] == 0) |-> (receiving == 0);
endproperty
assert_a21: assert property(a21);

property a20;
@(posedge rxclk) (rxstate[2] == 1 & get_error_code == 1) |=> (receiving == 0);
endproperty
assert_a20: assert property(a20);

property a23;
@(posedge rxclk) (get_sfd == 0 & recv_enable == 1) ##1 (rxstate[2] == 0 & rxstate[1] == 0) |-> (receiving == 0);
endproperty
assert_a23: assert property(a23);

property a22;
@(posedge rxclk) (recv_enable == 0) ##1 (rxstate[1] == 0 & rxstate[2] == 0) |-> (receiving == 0);
endproperty
assert_a22: assert property(a22);

property a25;
@(posedge rxclk) (rxstate[1] == 1) |-> (receiving == 1);
endproperty
assert_a25: assert property(a25);

property a24;
@(posedge rxclk) (rxstate[0] == 1) |-> (receiving == 1);
endproperty
assert_a24: assert property(a24);

property a26;
@(posedge rxclk) (rxstate[2] == 1) |-> (receiving == 1);
endproperty
assert_a26: assert property(a26);

property a28;
@(posedge rxclk) (rxstate[0] == 1) |-> (start_da == 1);
endproperty
assert_a28: assert property(a28);

property a27;
@(posedge rxclk) (rxstate[0] == 0) |-> (start_da == 0);
endproperty
assert_a27: assert property(a27);

property a30;
@(posedge rxclk) (rxstate[1] == 0) |-> (start_lt == 0);
endproperty
assert_a30: assert property(a1);

property a29;
@(posedge rxclk) (rxstate[0] == 1) |-> (start_lt == 0);
endproperty
assert_a29: assert property(a29);

property a31;
@(posedge rxclk) (rxstate[1] == 1) |-> (start_lt == 1);
endproperty
assert_a31: assert property(a31);


property a33;
@(posedge rxclk) (rxstate[1] == 1) |=> (wait_crc_check == 0);
endproperty
assert_a33: assert property(a33);

property a32;
@(posedge rxclk) (rxstate[0] == 1) |=> (wait_crc_check == 0);
endproperty
assert_a32: assert property(a32);

property a35;
@(posedge rxclk) (rxstate[3] == 1) |=> (wait_crc_check == 0);
endproperty
assert_a35: assert property(a35);

property a34;
@(posedge rxclk) (rxstate[2] == 1) |=> (wait_crc_check == 0);
endproperty
assert_a34: assert property(a34);

property a38;
@(posedge rxclk) (crc_check_valid == 0 & crc_check_invalid == 0 & wait_crc_check == 0) |=> (wait_crc_check == 0);
endproperty
assert_a38: assert property(a38);

property a37;
@(posedge rxclk) (wait_crc_check == 1 & crc_check_invalid == 1) |=> (wait_crc_check == 0);
endproperty
assert_a37: assert property(a37);

property a36;
@(posedge rxclk) (wait_crc_check == 1 & crc_check_valid == 1) |=> (wait_crc_check == 0);
endproperty
assert_a36: assert property(a36);


endmodule
