module i_dpll(
input  SignalIn,                // input signal
input  MainClock,               // reference signal
input SignalOut,               // input
input Lead, Lag,               // internal DPLL signals
input Positive, Negative,      // internal DPLL signals
input InputSignalEdgeDet,
input InputSignalEdge,
input InputSignal
);

assert property(@(posedge MainClock) (SignalIn) |-> InputSignal);
assert property(@(posedge MainClock) (InputSignal) |-> SignalIn);
assert property(@(posedge MainClock) (SignalIn ##1 1) |-> (InputSignalEdgeDet >= 2) && (InputSignalEdgeDet <= 3));
assert property(@(posedge MainClock) (InputSignal ##1 1) |-> (InputSignalEdgeDet >= 2) && (InputSignalEdgeDet <= 3));
assert property(@(posedge MainClock) (!SignalIn ##1 1) |-> (InputSignalEdgeDet >= 0) && (InputSignalEdgeDet <= 1));
assert property(@(posedge MainClock) (!InputSignal ##1 1) |-> (InputSignalEdgeDet >= 0) && (InputSignalEdgeDet <= 1));
assert property(@(posedge MainClock) ((InputSignalEdgeDet == 3) ##1 1) |-> (InputSignalEdgeDet >= 2) && (InputSignalEdgeDet <= 3));
assert property(@(posedge MainClock) ((InputSignalEdgeDet == 3)) |-> (InputSignalEdgeDet >= 2) && (InputSignalEdgeDet <= 3));
assert property(@(posedge MainClock) ((InputSignalEdgeDet == 3)) |-> SignalIn);
assert property(@(posedge MainClock) ((InputSignalEdgeDet == 3)) |-> InputSignal);
assert property(@(posedge MainClock) ((InputSignalEdgeDet == 1)) |-> InputSignalEdge);
assert property(@(posedge MainClock) (InputSignalEdge) |-> (InputSignalEdgeDet == 1));
assert property(@(posedge MainClock) ((InputSignalEdgeDet == 1)) |-> (InputSignalEdgeDet >= 0) && (InputSignalEdgeDet <= 1));
assert property(@(posedge MainClock) (InputSignalEdge) |-> (InputSignalEdgeDet >= 0) && (InputSignalEdgeDet <= 1));
assert property(@(posedge MainClock) (InputSignalEdge) |-> InputSignal);
assert property(@(posedge MainClock) ((InputSignalEdgeDet == 1)) |-> InputSignal);
assert property(@(posedge MainClock) (InputSignalEdge) |-> SignalIn);
assert property(@(posedge MainClock) ((InputSignalEdgeDet == 1)) |-> SignalIn);
assert property(@(posedge MainClock) ((InputSignalEdgeDet == 2)) |-> (InputSignalEdgeDet >= 2) && (InputSignalEdgeDet <= 3));
assert property(@(posedge MainClock) ((InputSignalEdgeDet == 0) ##1 1) |-> (InputSignalEdgeDet >= 0) && (InputSignalEdgeDet <= 1));
assert property(@(posedge MainClock) ((InputSignalEdgeDet == 0)) |-> (InputSignalEdgeDet >= 0) && (InputSignalEdgeDet <= 1));
assert property(@(posedge MainClock) ((InputSignalEdgeDet == 2) ##1 1) |-> (InputSignalEdgeDet >= 0) && (InputSignalEdgeDet <= 1));
assert property(@(posedge MainClock) ((InputSignalEdgeDet == 1) ##1 1) |-> (InputSignalEdgeDet >= 2) && (InputSignalEdgeDet <= 3));
assert property(@(posedge MainClock) (InputSignalEdge ##1 1) |-> (InputSignalEdgeDet >= 2) && (InputSignalEdgeDet <= 3));
endmodule
