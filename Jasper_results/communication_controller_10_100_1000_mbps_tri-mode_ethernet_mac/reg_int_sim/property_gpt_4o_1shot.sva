module i_reg_int_sim(
input	[5:0]	CPU_rd_addr				,
input			tx_pause_en				,
input			broadcast_filter_en	    ,
input			Reset					,
input        	Nvalid             		,// Invalid Status (qualifier for the valid scan result)
input	[7:0]	MAC_tx_add_prom_data	,
input	[5:0]	RX_IFG_SET	  			,
input        	Busy               		,// Busy Signal
input			FullDuplex         		,
input	[31:0]	CPU_rd_dout				,
input	[4:0]	Tx_Lwmark				,	
input        	LinkFail           		,// Link Integrity Signal
input			CRC_chk_en				,				
input			MAC_tx_add_en			,				
input	[5:0]	IFGset					,
input			RX_APPEND_CRC			,
input        	UpdateMIIRX_DATAReg,		// Updates MII RX_DATA inputister with read data
input	[15:0]	RX_MAX_LENGTH 			,//	1518
input			xon_cpu	            	,
input	[2:0]	Speed					,
input	[2:0]	MAC_rx_add_prom_add		,   
input			Clk_input					,
input	[3:0]	MaxRetry	        	,
input			pause_frame_send_en		,				
input			CPU_rd_apply			,
input			CPU_rd_grant			,
input			Line_loop_en			,
input	[2:0]	MAC_tx_add_prom_add		,
input	[6:0]	RX_MIN_LENGTH			,//	64
input			MAC_rx_add_chk_en		,	
input			xoff_cpu	        	,
input	[15:0]	broadcast_MAX	        ,				        
input 	[15:0] 	Prsd               		,// Read Status Data (data read from the PHY)
input	[4:0]	Tx_Hwmark				,
input	[7:0]	MAC_rx_add_prom_data	,	
input			MAC_tx_add_prom_wr		,
input			MAC_rx_add_prom_wr		,   
input	[15:0]	pause_quanta_set		,
input Clk_reg
);

assert property(@(posedge Clk_reg) (CPU_rd_apply == 1) |-> (CPU_rd_grant == 1);
assert property(@(posedge Clk_reg) (CPU_rd_grant == 1) |-> (CPU_rd_apply == 1);
assert property(@(posedge Clk_reg) (FullDuplex == 1) |-> (MaxRetry == 2);
assert property(@(posedge Clk_reg) (Tx_Hwmark == 5'h1e) |-> (Tx_Lwmark == 5'h19);
assert property(@(posedge Clk_reg) (pause_frame_send_en == 0) |-> (pause_quanta_set == 0);
assert property(@(posedge Clk_reg) (MAC_tx_add_en == 0) |-> (MAC_tx_add_prom_wr == 0);
assert property(@(posedge Clk_reg) (tx_pause_en == 0) |-> (xoff_cpu == 0);
assert property(@(posedge Clk_reg) (xon_cpu == 0) |-> (MAC_rx_add_chk_en == 0);
assert property(@(posedge Clk_reg) (broadcast_filter_en == 0) |-> (broadcast_MAX == 10);
assert property(@(posedge Clk_reg) (RX_APPEND_CRC == 0) |-> (CRC_chk_en == 1);
assert property(@(posedge Clk_reg) (RX_IFG_SET == 10) |-> (RX_MAX_LENGTH == 1518);
assert property(@(posedge Clk_reg) (RX_MIN_LENGTH == 64) |-> (CPU_rd_addr == 0);
assert property(@(posedge Clk_reg) (CPU_rd_apply == 0) |-> (Line_loop_en == 0);
assert property(@(posedge Clk_reg) (Speed == 3'b001) |-> (Busy == 0);
assert property(@(posedge Clk_reg) (Busy == 0) |-> (LinkFail == 0);
assert property(@(posedge Clk_reg) (Nvalid == 0) |-> (Prsd == 0);
assert property(@(posedge Clk_reg) (UpdateMIIRX_DATAReg == 0) |-> (CPU_rd_dout == 0);
endmodule