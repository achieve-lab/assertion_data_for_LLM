
module i_Phy_int(
input             Rx_er_dl1           ,
input   [2:0]   Speed               ,
input          MCrs_dv             ,       
input             Col_dl1             ,
input             Crs_dl1             ,
input             Tx_en               ,
input           Crs                 ,
input             Tx_odd_data_ptr     ,  
input             Rx_odd_data_ptr     ,
input     [7:0]   Rxd_dl1             ,
input             MTxEn_dl1           ,
input   [7:0]   MTxD                ,
input           MAC_tx_clk          ,
input           MTxEn               ,   
input          Tx_er               ,
input     [7:0]   Rxd_dl2             ,
input     [7:0]   MRxD                ,
input             Rx_dv_dl1           ,
input          MCRS                ,
input           Col                 ,
input           MAC_rx_clk          ,
input   [7:0]   Rxd                 ,
input           Rx_dv               ,
input           Line_loop_en        ,
input           Rx_er               ,
input           Reset               ,
input             Rx_dv_dl2           ,
input          MRxErr              ,       
input     [7:0]   Txd                 ,
input     [7:0]   MTxD_dl1            
);

property a7;
@(posedge MAC_rx_clk) (Crs_dl1 == 1) |-> (MCRS == 1);
endproperty
assert_a7: assert property(a7);

property a6;
@(posedge MAC_rx_clk) (Crs_dl1 == 0) |-> (MCRS == 0);
endproperty
assert_a6: assert property(a6);

property a2;
@(posedge MAC_rx_clk) (Rx_dv_dl2 == 0 & Line_loop_en == 0) |=> (MCrs_dv == 0);
endproperty
assert_a2: assert property(a2);

property a5;
@(posedge MAC_rx_clk) (Rx_dv_dl2 == 1 & Line_loop_en == 0) |=> (MCrs_dv == 1);
endproperty
assert_a5: assert property(a5);

property a1;
@(posedge MAC_rx_clk) (Tx_en == 0 & Line_loop_en == 1) |=> (MCrs_dv == 0);
endproperty
assert_a1: assert property(a1);

property a4;
@(posedge MAC_rx_clk) (Tx_en == 1 & Line_loop_en == 1) |=> (MCrs_dv == 1);
endproperty
assert_a4: assert property(a4);

property a0;
@(posedge MAC_rx_clk) (Tx_en == 0 & Rx_dv_dl2 == 0) |=> (MCrs_dv == 0);
endproperty
assert_a0: assert property(a0);

property a3;
@(posedge MAC_rx_clk) (Rx_dv_dl2 == 1 & Tx_en == 1) |=> (MCrs_dv == 1);
endproperty
assert_a3: assert property(a3);


property a9;
@(posedge MAC_rx_clk) (Rx_er_dl1 == 1) |-> (MRxErr == 1);
endproperty
assert_a9: assert property(a9);

property a8;
@(posedge MAC_rx_clk) (Rx_er_dl1 == 0) |-> (MRxErr == 0);
endproperty
assert_a8: assert property(a8);

endmodule
