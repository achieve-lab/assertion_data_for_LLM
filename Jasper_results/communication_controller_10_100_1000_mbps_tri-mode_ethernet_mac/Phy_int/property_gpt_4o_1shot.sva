module i_Phy_int(
input             Rx_er_dl1           ,
input   [2:0]   Speed               ,
input          MCrs_dv             ,       
input             Col_dl1             ,
input             Crs_dl1             ,
input             Tx_en               ,
input           Crs                 ,
input             Tx_odd_data_ptr     ,  
input             Rx_odd_data_ptr     ,
input     [7:0]   Rxd_dl1             ,
input             MTxEn_dl1           ,
input   [7:0]   MTxD                ,
input           MAC_tx_clk          ,
input           MTxEn               ,   
input          Tx_er               ,
input     [7:0]   Rxd_dl2             ,
input     [7:0]   MRxD                ,
input             Rx_dv_dl1           ,
input          MCRS                ,
input           Col                 ,
input           MAC_rx_clk          ,
input   [7:0]   Rxd                 ,
input           Rx_dv               ,
input           Line_loop_en        ,
input           Rx_er               ,
input           Reset               ,
input             Rx_dv_dl2           ,
input          MRxErr              ,       
input     [7:0]   Txd                 ,
input     [7:0]   MTxD_dl1            
);

assert property(@(posedge MAC_tx_clk) (Reset) |-> (MTxD_dl1 == 0 && MTxEn_dl1 == 0);
assert property(@(posedge MAC_tx_clk) (!Reset && MTxD == 0) |-> (Tx_odd_data_ptr == 0);
assert property(@(posedge MAC_tx_clk) (!Reset && MTxD != 0) |-> (Tx_odd_data_ptr == !Tx_odd_data_ptr);
assert property(@(posedge MAC_tx_clk) (Reset) |-> (Txd == 0);
assert property(@(posedge MAC_tx_clk) (!Reset && Speed[2] && MTxEn_dl1) |-> (Txd == MTxD_dl1);
assert property(@(posedge MAC_tx_clk) (!Reset && MTxEn_dl1 && !Tx_odd_data_ptr) |-> (Txd == {4'b0, MTxD_dl1[3:0]});
assert property(@(posedge MAC_tx_clk) (!Reset && MTxEn_dl1 && Tx_odd_data_ptr) |-> (Txd == {4'b0, MTxD_dl1[7:4]});
assert property(@(posedge MAC_tx_clk) (!Reset && !MTxEn_dl1) |-> (Txd == 0);
assert property(@(posedge MAC_tx_clk) (Reset) |-> (Tx_en == 0);
assert property(@(posedge MAC_tx_clk) (!Reset && MTxEn_dl1) |-> (Tx_en == 1);
assert property(@(posedge MAC_tx_clk) (!Reset && !MTxEn_dl1) |-> (Tx_en == 0);
assert property(@(posedge MAC_rx_clk) (Reset) |-> (Rx_er_dl1 == 0 && Rx_dv_dl1 == 0 && Rx_dv_dl2 == 0 && Rxd_dl1 == 0 && Rxd_dl2 == 0 && Crs_dl1 == 0 && Col_dl1 == 0);
assert property(@(posedge MAC_rx_clk) (!Reset) |-> (Rx_er_dl1 == Rx_er && Rx_dv_dl1 == Rx_dv && Rx_dv_dl2 == Rx_dv_dl1 && Rxd_dl1 == Rxd && Rxd_dl2 == Rxd_dl1 && Crs_dl1 == Crs && Col_dl1 == Col);
assert property(@(posedge MAC_rx_clk) (Reset) |-> (MCrs_dv == 0);
assert property(@(posedge MAC_rx_clk) (!Reset && Line_loop_en) |-> (MCrs_dv == Tx_en);
assert property(@(posedge MAC_rx_clk) (!Reset && !Line_loop_en && Rx_dv_dl2) |-> (MCrs_dv == 1);
assert property(@(posedge MAC_rx_clk) (!Reset && !Line_loop_en && !Rx_dv_dl2) |-> (MCrs_dv == 0);
assert property(@(posedge MAC_rx_clk) (Reset) |-> (Rx_odd_data_ptr == 0);
assert property(@(posedge MAC_rx_clk) (!Reset && !Rx_dv_dl1) |-> (Rx_odd_data_ptr == 0);
assert property(@(posedge MAC_rx_clk) (!Reset && Rx_dv_dl1) |-> (Rx_odd_data_ptr == !Rx_odd_data_ptr);
assert property(@(posedge MAC_rx_clk) (Reset) |-> (MRxD == 0);
assert property(@(posedge MAC_rx_clk) (!Reset && Line_loop_en) |-> (MRxD == Txd);
assert property(@(posedge MAC_rx_clk) (!Reset && Speed[2] && Rx_dv_dl2) |-> (MRxD == Rxd_dl2);
assert property(@(posedge MAC_rx_clk) (!Reset && Rx_dv_dl1 && Rx_odd_data_ptr) |-> (MRxD == {Rxd_dl1[3:0], Rxd_dl2[3:0]});
endmodule