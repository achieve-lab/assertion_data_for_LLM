module i_MAC_tx_Ctrl(
input           Clk                 ,
input             MAC_tx_addr_rd      ,
input             Tx_apply_rmon_tmp   ,
input [3:0]       Next_state,
input [7:0]       IPLengthCounter     ,//for pad append
input           Fifo_data_err_full  ,
input  [3:0]   RetryCnt            ,
input           xoff_gen            ,
input             TxEn_tmp            ,   
input            Collision           , 
input [1:0]       PADCounter          ,
input             PktDrpEvenPtr       ,
input             pause_frame_send_en_dl1 ,               
input   [7:0]   CRC_out             ,
input             Random_init         ,
input          pause_quanta_sub    ,
input             CRC_init            ,
input          xoff_gen_complete   ,
input          MAC_tx_addr_init    ,
input [3:0]       Current_state   ,
input [7:0]       TxD                 ,   
input             Data_en             ,
input [7:0]       pause_counter       ,
input             Tx_apply_rmon       ,
input             CRC_rd              ,
input           Fifo_ra             ,
input          TxEn                ,   
input           xon_gen             ,
input          Fifo_rd             ,
input             Fifo_rd_finish      ,
input  [7:0]   Frame_data          ,
input             MAC_header_slot     ,
input   [15:0]  pause_quanta_set    ,
input             xon_gen_complete    ,
input [7:0]       TxD_tmp             ,   
input [2:0]       Tx_pkt_err_type_rmon,   
input           MAC_tx_add_en       ,               
input             Fifo_rd_retry       ,
input [7:0]       JamCounter          ,
input           CRS                 ,
input [5:0]       IFG_counter,
input   [5:0]   IFGset              ,
input           Fifo_eop            ,
input             Src_MAC_ptr         ,
input [15:0]      pause_quanta_set_dl1    ,
input           pause_frame_send_en ,               
input           Reset               ,
input           Fifo_da             ,
input [4:0]       Preamble_counter,//
input   [3:0]   MaxRetry            ,
input [2:0]       Tx_pkt_type_rmon    ,
input           pause_apply         ,
input   [7:0]   Fifo_data           ,
input           FullDuplex          ,
input             Tx_apply_rmon_tmp_pl1,
input           Fifo_data_err_empty ,
input             MAC_header_slot_tmp ,
input           Random_time_meet    ,//levle hight indicate random time passed away
input           CRC_end             ,
input   [7:0]   MAC_tx_addr_data    ,
input  [15:0]  Tx_pkt_length_rmon  
);

assert property(@(posedge Clk) (Reset) |-> (Current_state == StateDefer));
assert property(@(posedge Clk) (Current_state == StateDefer && (FullDuplex || (!FullDuplex && !CRS))) |-> (Next_state == StateIFG));
assert property(@(posedge Clk) (Current_state == StateIFG && !FullDuplex && CRS) |-> (Next_state == StateDefer));
assert property(@(posedge Clk) (Current_state == StateIFG && ((FullDuplex && IFG_counter == IFGset - 4) || (!FullDuplex && !CRS && IFG_counter == IFGset - 4))) |-> (Next_state == StateIdle));
assert property(@(posedge Clk) (Current_state == StateIdle && !FullDuplex && CRS) |-> (Next_state == StateDefer));
assert property(@(posedge Clk) (Current_state == StateIdle && pause_apply) |-> (Next_state == StatePause));
assert property(@(posedge Clk) (Current_state == StateIdle && ((FullDuplex && Fifo_ra) || (!FullDuplex && !CRS && Fifo_ra) || (pause_frame_send_en_dl1 && (xoff_gen || xon_gen)))) |-> (Next_state == StatePreamble));
assert property(@(posedge Clk) (Current_state == StatePause && pause_counter == 512 / 8) |-> (Next_state == StateDefer));
assert property(@(posedge Clk) (Current_state == StatePreamble && !FullDuplex && Collision) |-> (Next_state == StateJam));
assert property(@(posedge Clk) (Current_state == StatePreamble && ((FullDuplex && Preamble_counter == 6) || (!FullDuplex && !Collision && Preamble_counter == 6))) |-> (Next_state == StateSFD));
assert property(@(posedge Clk) (Current_state == StateSFD && !FullDuplex && Collision) |-> (Next_state == StateJam));
assert property(@(posedge Clk) (Current_state == StateSFD && pause_frame_send_en_dl1 && (xoff_gen || xon_gen)) |-> (Next_state == StateSendPauseFrame));
assert property(@(posedge Clk) (Current_state == StateSendPauseFrame && IPLengthCounter == 17) |-> (Next_state == StatePAD));
assert property(@(posedge Clk) (Current_state == StateData && !FullDuplex && Collision) |-> (Next_state == StateJam));
assert property(@(posedge Clk) (Current_state == StateData && Fifo_data_err_empty) |-> (Next_state == StateFFEmptyDrop));
assert property(@(posedge Clk) (Current_state == StateData && Fifo_eop && IPLengthCounter >= 59) |-> (Next_state == StateFCS));
assert property(@(posedge Clk) (Current_state == StateData && Fifo_eop) |-> (Next_state == StatePAD));
assert property(@(posedge Clk) (Current_state == StatePAD && !FullDuplex && Collision) |-> (Next_state == StateJam));
assert property(@(posedge Clk) (Current_state == StatePAD && IPLengthCounter >= 59) |-> (Next_state == StateFCS));
assert property(@(posedge Clk) (Current_state == StateJam && RetryCnt <= MaxRetry && JamCounter == 16) |-> (Next_state == StateBackOff));
assert property(@(posedge Clk) (Current_state == StateJam && RetryCnt > MaxRetry) |-> (Next_state == StateJamDrop));
assert property(@(posedge Clk) (Current_state == StateBackOff && Random_time_meet) |-> (Next_state == StateDefer));
assert property(@(posedge Clk) (Current_state == StateFCS && !FullDuplex && Collision) |-> (Next_state == StateJam));
assert property(@(posedge Clk) (Current_state == StateFCS && CRC_end) |-> (Next_state == StateSwitchNext));
assert property(@(posedge Clk) (Current_state == StateFFEmptyDrop && Fifo_eop) |-> (Next_state == StateSwitchNext));
assert property(@(posedge Clk) (Current_state == StateJamDrop && Fifo_eop) |-> (Next_state == StateSwitchNext));
assert property(@(posedge Clk) (Current_state == StateSwitchNext) |-> (Next_state == StateDefer));
assert property(@(posedge Clk) (Current_state == StateJam && Next_state == StateBackOff) |-> Random_init);
assert property(@(posedge Clk) (Current_state == StateData || (Current_state == StateSFD && !(pause_frame_send_en_dl1 && (xoff_gen || xon_gen)) || (Current_state == StateJam
endmodule