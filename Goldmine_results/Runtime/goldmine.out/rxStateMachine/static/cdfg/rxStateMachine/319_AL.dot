strict digraph "" {
	node [label="\N"];
	"320:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe0276ed0>",
		fillcolor=turquoise,
		label="320:BL
bad_frame_get <= #TP 0;
good_frame_get <= #TP 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe02a9f10>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fcfe0276910>]",
		style=filled,
		typ=Block];
	"Leaf_319:AL"	 [def_var="['good_frame_get', 'bad_frame_get']",
		label="Leaf_319:AL"];
	"320:BL" -> "Leaf_319:AL"	 [cond="[]",
		lineno=None];
	"332:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fd001cf8350>",
		fillcolor=turquoise,
		label="332:BL
good_frame_get <= #TP 1'b0;
bad_frame_get <= #TP 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0276f10>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fd001cf8150>]",
		style=filled,
		typ=Block];
	"332:BL" -> "Leaf_319:AL"	 [cond="[]",
		lineno=None];
	"324:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fd001cf8790>",
		fillcolor=turquoise,
		label="324:BL
bad_frame_get <= #TP 1'b1;
good_frame_get <= #TP 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fd001cf8390>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fd001cf8590>]",
		style=filled,
		typ=Block];
	"324:BL" -> "Leaf_319:AL"	 [cond="[]",
		lineno=None];
	"328:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fd001cf87d0>",
		fillcolor=springgreen,
		label="328:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"328:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fd001cf8910>",
		fillcolor=turquoise,
		label="328:BL
good_frame_get <= #TP 1'b1;
bad_frame_get <= #TP 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fd001cf8950>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fd001cf8b50>]",
		style=filled,
		typ=Block];
	"328:IF" -> "328:BL"	 [cond="['crc_check_valid']",
		label=crc_check_valid,
		lineno=328];
	"332:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fd001cf8850>",
		fillcolor=springgreen,
		label="332:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"328:IF" -> "332:IF"	 [cond="['crc_check_valid']",
		label="!(crc_check_valid)",
		lineno=328];
	"319:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fd001cf8dd0>",
		fillcolor=turquoise,
		label="319:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"320:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fd001cf8e10>",
		fillcolor=springgreen,
		label="320:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"319:BL" -> "320:IF"	 [cond="[]",
		lineno=None];
	"319:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fd001d00150>",
		clk_sens=True,
		fillcolor=gold,
		label="319:AL",
		sens="['rxclk', 'reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['reset', 'rxstate', 'length_error', 'crc_check_invalid', 'crc_check_valid', 'check_reset']"];
	"319:AL" -> "319:BL"	 [cond="[]",
		lineno=None];
	"320:IF" -> "320:BL"	 [cond="['reset']",
		label=reset,
		lineno=320];
	"324:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fd001cf8e50>",
		fillcolor=springgreen,
		label="324:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"320:IF" -> "324:IF"	 [cond="['reset']",
		label="!(reset)",
		lineno=320];
	"328:BL" -> "Leaf_319:AL"	 [cond="[]",
		lineno=None];
	"332:IF" -> "332:BL"	 [cond="['check_reset']",
		label=check_reset,
		lineno=332];
	"324:IF" -> "324:BL"	 [cond="['rxstate', 'crc_check_invalid', 'length_error']",
		label="(rxstate[3] || crc_check_invalid || length_error)",
		lineno=324];
	"324:IF" -> "328:IF"	 [cond="['rxstate', 'crc_check_invalid', 'length_error']",
		label="!((rxstate[3] || crc_check_invalid || length_error))",
		lineno=324];
}
