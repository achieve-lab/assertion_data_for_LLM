strict digraph "compose( ,  )" {
	node [label="\N"];
	"Leaf_286:AL"	 [def_var="['rxstate']",
		label="Leaf_286:AL"];
	"308:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fcfe0b4b790>",
		clk_sens=True,
		fillcolor=gold,
		label="308:AL",
		sens="['rxclk', 'reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['reset', 'rxstate', 'length_error', 'crc_check_invalid', 'crc_check_valid', 'wait_crc_check']"];
	"Leaf_286:AL" -> "308:AL";
	"293:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fcfe0b485d0>",
		def_var="['start_da']",
		fillcolor=deepskyblue,
		label="293:AS
start_da = rxstate[0];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['rxstate']"];
	"Leaf_286:AL" -> "293:AS";
	"295:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fcfe0b48b50>",
		def_var="['receiving']",
		fillcolor=deepskyblue,
		label="295:AS
receiving = rxstate[2] | rxstate[1] | rxstate[0];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['rxstate', 'rxstate', 'rxstate']"];
	"Leaf_286:AL" -> "295:AS";
	"243:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fcfe0736550>",
		clk_sens=False,
		fillcolor=gold,
		label="243:AL",
		sens="['rxstate', 'get_sfd', 'local_invalid', 'recv_enable', 'get_error_code', 'length_error', 'get_terminator', 'reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['reset', 'recv_enable', 'rxstate', 'length_error', 'get_error_code', 'get_sfd', 'get_terminator', 'local_invalid']"];
	"Leaf_286:AL" -> "243:AL";
	"294:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fcfe0b48790>",
		def_var="['start_lt']",
		fillcolor=deepskyblue,
		label="294:AS
start_lt = rxstate[1];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['rxstate']"];
	"Leaf_286:AL" -> "294:AS";
	"319:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fcfe06f6390>",
		clk_sens=True,
		fillcolor=gold,
		label="319:AL",
		sens="['rxclk', 'reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['reset', 'rxstate', 'length_error', 'crc_check_invalid', 'crc_check_valid', 'check_reset']"];
	"Leaf_286:AL" -> "319:AL";
	"308:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe0b4b810>",
		fillcolor=turquoise,
		label="308:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"308:AL" -> "308:BL"	 [cond="[]",
		lineno=None];
	"287:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcfe0b48250>",
		fillcolor=springgreen,
		label="287:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"290:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b48450>",
		fillcolor=firebrick,
		label="290:NS
rxstate <= #TP rxstate_next;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b48450>]",
		style=filled,
		typ=NonblockingSubstitution];
	"287:IF" -> "290:NS"	 [cond="['reset']",
		label="!(reset)",
		lineno=287];
	"288:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b48210>",
		fillcolor=firebrick,
		label="288:NS
rxstate <= #TP IDLE;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b48210>]",
		style=filled,
		typ=NonblockingSubstitution];
	"287:IF" -> "288:NS"	 [cond="['reset']",
		label=reset,
		lineno=287];
	"Leaf_243:AL"	 [def_var="['rxstate_next']",
		label="Leaf_243:AL"];
	"286:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fcfe0b40fd0>",
		clk_sens=True,
		fillcolor=gold,
		label="286:AL",
		sens="['rxclk', 'reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['reset', 'rxstate_next']"];
	"Leaf_243:AL" -> "286:AL";
	"254:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0736fd0>",
		fillcolor=firebrick,
		label="254:NS
rxstate_next <= #TP IDLE;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0736fd0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"254:NS" -> "Leaf_243:AL"	 [cond="[]",
		lineno=None];
	"276:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcfe0b40850>",
		fillcolor=lightcyan,
		label="276:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"276:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe0b40890>",
		fillcolor=turquoise,
		label="276:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"276:CA" -> "276:BL"	 [cond="[]",
		lineno=None];
	"302:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe0b4b2d0>",
		fillcolor=turquoise,
		label="302:BL
receiving_d1 <= #TP receiving;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b4b410>]",
		style=filled,
		typ=Block];
	"Leaf_298:AL"	 [def_var="['receiving_d1']",
		label="Leaf_298:AL"];
	"302:BL" -> "Leaf_298:AL"	 [cond="[]",
		lineno=None];
	"245:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe0736690>",
		fillcolor=turquoise,
		label="245:BL
rxstate_next <= #TP IDLE;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe07367d0>]",
		style=filled,
		typ=Block];
	"245:BL" -> "Leaf_243:AL"	 [cond="[]",
		lineno=None];
	"310:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b4b9d0>",
		fillcolor=firebrick,
		label="310:NS
wait_crc_check <= #TP 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b4b9d0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"Leaf_308:AL"	 [def_var="['wait_crc_check']",
		label="Leaf_308:AL"];
	"310:NS" -> "Leaf_308:AL"	 [cond="[]",
		lineno=None];
	"298:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fcfe0b48ed0>",
		clk_sens=True,
		fillcolor=gold,
		label="298:AL",
		sens="['rxclk', 'reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['reset', 'receiving']"];
	"295:AS" -> "298:AL";
	"319:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe06f65d0>",
		fillcolor=turquoise,
		label="319:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"320:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcfe06f6ad0>",
		fillcolor=springgreen,
		label="320:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"319:BL" -> "320:IF"	 [cond="[]",
		lineno=None];
	"309:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcfe0b4ba10>",
		fillcolor=springgreen,
		label="309:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"309:IF" -> "310:NS"	 [cond="['reset']",
		label=reset,
		lineno=309];
	"311:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcfe0b4bdd0>",
		fillcolor=springgreen,
		label="311:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"309:IF" -> "311:IF"	 [cond="['reset']",
		label="!(reset)",
		lineno=309];
	"262:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe0b4f7d0>",
		fillcolor=turquoise,
		label="262:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"263:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcfe0b4fc90>",
		fillcolor=springgreen,
		label="263:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"262:BL" -> "263:IF"	 [cond="[]",
		lineno=None];
	"332:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcfe0716910>",
		fillcolor=springgreen,
		label="332:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"332:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe0716b50>",
		fillcolor=turquoise,
		label="332:BL
good_frame_get <= #TP 1'b0;
bad_frame_get <= #TP 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0716b10>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fcfe0716d10>]",
		style=filled,
		typ=Block];
	"332:IF" -> "332:BL"	 [cond="['check_reset']",
		label=check_reset,
		lineno=332];
	"313:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcfe06f63d0>",
		fillcolor=springgreen,
		label="313:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"311:IF" -> "313:IF"	 [cond="['rxstate']",
		label="!(rxstate[4])",
		lineno=311];
	"312:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b4bd90>",
		fillcolor=firebrick,
		label="312:NS
wait_crc_check <= #TP 1'b1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b4bd90>]",
		style=filled,
		typ=NonblockingSubstitution];
	"311:IF" -> "312:NS"	 [cond="['rxstate']",
		label="rxstate[4]",
		lineno=311];
	"264:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b4fc50>",
		fillcolor=firebrick,
		label="264:NS
rxstate_next <= #TP rxGetError;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b4fc50>]",
		style=filled,
		typ=NonblockingSubstitution];
	"263:IF" -> "264:NS"	 [cond="['local_invalid', 'length_error', 'get_error_code']",
		label="(local_invalid | length_error | get_error_code)",
		lineno=263];
	"265:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcfe0b40110>",
		fillcolor=springgreen,
		label="265:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"263:IF" -> "265:IF"	 [cond="['local_invalid', 'length_error', 'get_error_code']",
		label="!((local_invalid | length_error | get_error_code))",
		lineno=263];
	"286:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe0b48090>",
		fillcolor=turquoise,
		label="286:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"286:AL" -> "286:BL"	 [cond="[]",
		lineno=None];
	"278:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b40c10>",
		fillcolor=firebrick,
		label="278:NS
rxstate_next <= #TP rxReceiveDA;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b40c10>]",
		style=filled,
		typ=NonblockingSubstitution];
	"278:NS" -> "Leaf_243:AL"	 [cond="[]",
		lineno=None];
	"320:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe06f6850>",
		fillcolor=turquoise,
		label="320:BL
bad_frame_get <= #TP 0;
good_frame_get <= #TP 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe06f6810>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fcfe06f6a10>]",
		style=filled,
		typ=Block];
	"320:IF" -> "320:BL"	 [cond="['reset']",
		label=reset,
		lineno=320];
	"324:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcfe0716290>",
		fillcolor=springgreen,
		label="324:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"320:IF" -> "324:IF"	 [cond="['reset']",
		label="!(reset)",
		lineno=320];
	"250:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe0736a50>",
		fillcolor=turquoise,
		label="250:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"251:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcfe0736e90>",
		fillcolor=springgreen,
		label="251:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"250:BL" -> "251:IF"	 [cond="[]",
		lineno=None];
	"308:BL" -> "309:IF"	 [cond="[]",
		lineno=None];
	"268:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b40290>",
		fillcolor=firebrick,
		label="268:NS
rxstate_next <= #TP rxReceiveData;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b40290>]",
		style=filled,
		typ=NonblockingSubstitution];
	"268:NS" -> "Leaf_243:AL"	 [cond="[]",
		lineno=None];
	"244:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe0736590>",
		fillcolor=turquoise,
		label="244:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"243:AL" -> "244:BL"	 [cond="[]",
		lineno=None];
	"314:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe06f62d0>",
		fillcolor=firebrick,
		label="314:NS
wait_crc_check <= #TP 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe06f62d0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"314:NS" -> "Leaf_308:AL"	 [cond="[]",
		lineno=None];
	"270:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe0b40350>",
		fillcolor=turquoise,
		label="270:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"271:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcfe0b406d0>",
		fillcolor=springgreen,
		label="271:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"270:BL" -> "271:IF"	 [cond="[]",
		lineno=None];
	"290:NS" -> "Leaf_286:AL"	 [cond="[]",
		lineno=None];
	"256:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe0b4f310>",
		fillcolor=turquoise,
		label="256:BL
rxstate_next <= #TP rxReceiveLT;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b4f2d0>]",
		style=filled,
		typ=Block];
	"256:BL" -> "Leaf_243:AL"	 [cond="[]",
		lineno=None];
	"286:BL" -> "287:IF"	 [cond="[]",
		lineno=None];
	"250:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcfe0736a10>",
		fillcolor=lightcyan,
		label="250:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"250:CA" -> "250:BL"	 [cond="[]",
		lineno=None];
	"245:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcfe0736890>",
		fillcolor=springgreen,
		label="245:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"244:BL" -> "245:IF"	 [cond="[]",
		lineno=None];
	"298:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe0b48f10>",
		fillcolor=turquoise,
		label="298:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"298:AL" -> "298:BL"	 [cond="[]",
		lineno=None];
	"264:NS" -> "Leaf_243:AL"	 [cond="[]",
		lineno=None];
	"Leaf_319:AL"	 [def_var="['good_frame_get', 'bad_frame_get']",
		label="Leaf_319:AL"];
	"332:BL" -> "Leaf_319:AL"	 [cond="[]",
		lineno=None];
	"280:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b40e50>",
		fillcolor=firebrick,
		label="280:NS
rxstate_next <= #TP IDLE;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b40e50>]",
		style=filled,
		typ=NonblockingSubstitution];
	"280:NS" -> "Leaf_243:AL"	 [cond="[]",
		lineno=None];
	"313:IF" -> "314:NS"	 [cond="['crc_check_valid', 'crc_check_invalid', 'length_error']",
		label="(crc_check_valid || crc_check_invalid || length_error)",
		lineno=313];
	"316:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe06f6550>",
		fillcolor=firebrick,
		label="316:NS
wait_crc_check <= #TP wait_crc_check;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe06f6550>]",
		style=filled,
		typ=NonblockingSubstitution];
	"313:IF" -> "316:NS"	 [cond="['crc_check_valid', 'crc_check_invalid', 'length_error']",
		label="!((crc_check_valid || crc_check_invalid || length_error))",
		lineno=313];
	"288:NS" -> "Leaf_286:AL"	 [cond="[]",
		lineno=None];
	"274:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b40810>",
		fillcolor=firebrick,
		label="274:NS
rxstate_next <= #TP IDLE;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b40810>]",
		style=filled,
		typ=NonblockingSubstitution];
	"274:NS" -> "Leaf_243:AL"	 [cond="[]",
		lineno=None];
	"324:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe06f6fd0>",
		fillcolor=turquoise,
		label="324:BL
bad_frame_get <= #TP 1'b1;
good_frame_get <= #TP 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe06f6f90>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fcfe07161d0>]",
		style=filled,
		typ=Block];
	"324:BL" -> "Leaf_319:AL"	 [cond="[]",
		lineno=None];
	"259:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcfe0b4f350>",
		fillcolor=lightcyan,
		label="259:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"259:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe0b4f650>",
		fillcolor=turquoise,
		label="259:BL
rxstate_next <= #TP rxReceiveData;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b4f610>]",
		style=filled,
		typ=Block];
	"259:CA" -> "259:BL"	 [cond="[]",
		lineno=None];
	"277:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcfe0b40d10>",
		fillcolor=springgreen,
		label="277:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"277:IF" -> "278:NS"	 [cond="['get_sfd', 'recv_enable']",
		label="(get_sfd && recv_enable)",
		lineno=277];
	"277:IF" -> "280:NS"	 [cond="['get_sfd', 'recv_enable']",
		label="!((get_sfd && recv_enable))",
		lineno=277];
	"270:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcfe0b4fdd0>",
		fillcolor=lightcyan,
		label="270:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"270:CA" -> "270:BL"	 [cond="[]",
		lineno=None];
	"299:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe0b4b050>",
		fillcolor=turquoise,
		label="299:BL
receiving_d1 <= #TP 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b4b190>]",
		style=filled,
		typ=Block];
	"299:BL" -> "Leaf_298:AL"	 [cond="[]",
		lineno=None];
	"320:BL" -> "Leaf_319:AL"	 [cond="[]",
		lineno=None];
	"256:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcfe0b4f090>",
		fillcolor=lightcyan,
		label="256:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"256:CA" -> "256:BL"	 [cond="[]",
		lineno=None];
	"248:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe0736810>",
		fillcolor=turquoise,
		label="248:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"249:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7fcfe0b408d0>",
		fillcolor=linen,
		label="249:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"248:BL" -> "249:CS"	 [cond="[]",
		lineno=None];
	"328:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcfe0716850>",
		fillcolor=springgreen,
		label="328:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"328:IF" -> "332:IF"	 [cond="['crc_check_valid']",
		label="!(crc_check_valid)",
		lineno=328];
	"328:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcfe07165d0>",
		fillcolor=turquoise,
		label="328:BL
good_frame_get <= #TP 1'b1;
bad_frame_get <= #TP 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0716590>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fcfe0716790>]",
		style=filled,
		typ=Block];
	"328:IF" -> "328:BL"	 [cond="['crc_check_valid']",
		label=crc_check_valid,
		lineno=328];
	"316:NS" -> "Leaf_308:AL"	 [cond="[]",
		lineno=None];
	"324:IF" -> "324:BL"	 [cond="['rxstate', 'crc_check_invalid', 'length_error']",
		label="(rxstate[3] || crc_check_invalid || length_error)",
		lineno=324];
	"324:IF" -> "328:IF"	 [cond="['rxstate', 'crc_check_invalid', 'length_error']",
		label="!((rxstate[3] || crc_check_invalid || length_error))",
		lineno=324];
	"312:NS" -> "Leaf_308:AL"	 [cond="[]",
		lineno=None];
	"252:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0736d90>",
		fillcolor=firebrick,
		label="252:NS
rxstate_next <= #TP rxReceiveDA;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0736d90>]",
		style=filled,
		typ=NonblockingSubstitution];
	"252:NS" -> "Leaf_243:AL"	 [cond="[]",
		lineno=None];
	"Leaf_308:AL" -> "308:AL";
	"245:IF" -> "245:BL"	 [cond="['reset']",
		label=reset,
		lineno=245];
	"245:IF" -> "248:BL"	 [cond="['reset']",
		label="!(reset)",
		lineno=245];
	"271:IF" -> "274:NS"	 [cond="['get_sfd', 'recv_enable']",
		label="!((get_sfd && recv_enable))",
		lineno=271];
	"272:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b405d0>",
		fillcolor=firebrick,
		label="272:NS
rxstate_next <= #TP rxReceiveDA;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b405d0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"271:IF" -> "272:NS"	 [cond="['get_sfd', 'recv_enable']",
		label="(get_sfd && recv_enable)",
		lineno=271];
	"299:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcfe0b4b250>",
		fillcolor=springgreen,
		label="299:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"298:BL" -> "299:IF"	 [cond="[]",
		lineno=None];
	"265:IF" -> "268:NS"	 [cond="['get_terminator']",
		label="!(get_terminator)",
		lineno=265];
	"266:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b4ffd0>",
		fillcolor=firebrick,
		label="266:NS
rxstate_next <= #TP rxIFGWait;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fcfe0b4ffd0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"265:IF" -> "266:NS"	 [cond="['get_terminator']",
		label=get_terminator,
		lineno=265];
	"328:BL" -> "Leaf_319:AL"	 [cond="[]",
		lineno=None];
	"251:IF" -> "254:NS"	 [cond="['get_sfd', 'recv_enable']",
		label="!((get_sfd && recv_enable))",
		lineno=251];
	"251:IF" -> "252:NS"	 [cond="['get_sfd', 'recv_enable']",
		label="(get_sfd && recv_enable)",
		lineno=251];
	"259:BL" -> "Leaf_243:AL"	 [cond="[]",
		lineno=None];
	"266:NS" -> "Leaf_243:AL"	 [cond="[]",
		lineno=None];
	"272:NS" -> "Leaf_243:AL"	 [cond="[]",
		lineno=None];
	"276:BL" -> "277:IF"	 [cond="[]",
		lineno=None];
	"299:IF" -> "302:BL"	 [cond="['reset']",
		label="!(reset)",
		lineno=299];
	"299:IF" -> "299:BL"	 [cond="['reset']",
		label=reset,
		lineno=299];
	"262:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcfe0b4f790>",
		fillcolor=lightcyan,
		label="262:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"262:CA" -> "262:BL"	 [cond="[]",
		lineno=None];
	"319:AL" -> "319:BL"	 [cond="[]",
		lineno=None];
	"249:CS" -> "276:CA"	 [cond="['rxstate']",
		label=rxstate,
		lineno=249];
	"249:CS" -> "250:CA"	 [cond="['rxstate']",
		label=rxstate,
		lineno=249];
	"249:CS" -> "259:CA"	 [cond="['rxstate']",
		label=rxstate,
		lineno=249];
	"249:CS" -> "270:CA"	 [cond="['rxstate']",
		label=rxstate,
		lineno=249];
	"249:CS" -> "256:CA"	 [cond="['rxstate']",
		label=rxstate,
		lineno=249];
	"249:CS" -> "262:CA"	 [cond="['rxstate']",
		label=rxstate,
		lineno=249];
}
