strict digraph "compose( ,  )" {
	node [label="\N"];
	"110:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f8ec68659d0>",
		fillcolor=lightcyan,
		label="110:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"111:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f8ec6865450>",
		fillcolor=turquoise,
		label="111:BL
data_lo = { DATA_WIDTH{ 1'b0 } };
data_hi = { DATA_WIDTH{ 1'b0 } };",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f8ec6865b90>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7f8ec6865d90>]",
		style=filled,
		typ=Block];
	"110:CA" -> "111:BL"	 [cond="[]",
		lineno=None];
	"96:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f8ec6c8da50>",
		fillcolor=lightcyan,
		label="96:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"97:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f8ec6c8d910>",
		fillcolor=turquoise,
		label="97:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"96:CA" -> "97:BL"	 [cond="[]",
		lineno=None];
	"93:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f8ec69d7350>",
		clk_sens=False,
		fillcolor=gold,
		label="93:AL",
		sens="['data_b', 'data_a']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['data_b', 'data_a', 'sel0', 'LOW_MUX', 'HI_MUX']"];
	"94:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f8ec72a64d0>",
		fillcolor=turquoise,
		label="94:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"93:AL" -> "94:BL"	 [cond="[]",
		lineno=None];
	"98:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f8ec6c8d450>",
		fillcolor=springgreen,
		label="98:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"97:BL" -> "98:IF"	 [cond="[]",
		lineno=None];
	"100:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f8ec6865650>",
		fillcolor=springgreen,
		label="100:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"97:BL" -> "100:IF"	 [cond="[]",
		lineno=None];
	"Leaf_93:AL"	 [def_var="['data_hi', 'data_lo']",
		label="Leaf_93:AL"];
	"103:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f8ec68652d0>",
		fillcolor=lightcyan,
		label="103:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"104:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f8ec6865190>",
		fillcolor=turquoise,
		label="104:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"103:CA" -> "104:BL"	 [cond="[]",
		lineno=None];
	"99:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f8ec6865850>",
		fillcolor=cadetblue,
		label="99:BS
data_lo = data_a;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f8ec6865850>]",
		style=filled,
		typ=BlockingSubstitution];
	"99:BS" -> "Leaf_93:AL"	 [cond="[]",
		lineno=None];
	"85:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f8ec69ad450>",
		fillcolor=turquoise,
		label="85:BL
sel0 = 1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f8ec69ad550>]",
		style=filled,
		typ=Block];
	"Leaf_83:AL"	 [def_var="['sel0']",
		label="Leaf_83:AL"];
	"85:BL" -> "Leaf_83:AL"	 [cond="[]",
		lineno=None];
	"101:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f8ec6865c90>",
		fillcolor=cadetblue,
		label="101:BS
data_hi = data_b;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f8ec6865c90>]",
		style=filled,
		typ=BlockingSubstitution];
	"101:BS" -> "Leaf_93:AL"	 [cond="[]",
		lineno=None];
	"95:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7f8ec6865750>",
		fillcolor=linen,
		label="95:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"94:BL" -> "95:CS"	 [cond="[]",
		lineno=None];
	"106:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f8ec6865e90>",
		fillcolor=cadetblue,
		label="106:BS
data_lo = data_b;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f8ec6865e90>]",
		style=filled,
		typ=BlockingSubstitution];
	"106:BS" -> "Leaf_93:AL"	 [cond="[]",
		lineno=None];
	"111:BL" -> "Leaf_93:AL"	 [cond="[]",
		lineno=None];
	"98:IF" -> "99:BS"	 [cond="['LOW_MUX']",
		label="(LOW_MUX == 1)",
		lineno=98];
	"107:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f8ec68653d0>",
		fillcolor=springgreen,
		label="107:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"104:BL" -> "107:IF"	 [cond="[]",
		lineno=None];
	"105:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f8ec6865e50>",
		fillcolor=springgreen,
		label="105:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"104:BL" -> "105:IF"	 [cond="[]",
		lineno=None];
	"83:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f8ec69c52d0>",
		clk_sens=False,
		fillcolor=gold,
		label="83:AL",
		sens="[]",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['data_b', 'data_a']"];
	"84:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f8ec69c50d0>",
		fillcolor=turquoise,
		label="84:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"83:AL" -> "84:BL"	 [cond="[]",
		lineno=None];
	"100:IF" -> "101:BS"	 [cond="['HI_MUX']",
		label="(HI_MUX == 1)",
		lineno=100];
	"85:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f8ec69ad050>",
		fillcolor=springgreen,
		label="85:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"84:BL" -> "85:IF"	 [cond="[]",
		lineno=None];
	"108:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f8ec6865dd0>",
		fillcolor=cadetblue,
		label="108:BS
data_hi = data_a;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f8ec6865dd0>]",
		style=filled,
		typ=BlockingSubstitution];
	"108:BS" -> "Leaf_93:AL"	 [cond="[]",
		lineno=None];
	"Leaf_83:AL" -> "93:AL";
	"85:IF" -> "85:BL"	 [cond="['data_a', 'data_b']",
		label="(data_a < data_b)",
		lineno=85];
	"87:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f8ec69adb50>",
		fillcolor=turquoise,
		label="87:BL
sel0 = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f8ec69ad150>]",
		style=filled,
		typ=Block];
	"85:IF" -> "87:BL"	 [cond="['data_a', 'data_b']",
		label="!((data_a < data_b))",
		lineno=85];
	"87:BL" -> "Leaf_83:AL"	 [cond="[]",
		lineno=None];
	"107:IF" -> "108:BS"	 [cond="['HI_MUX']",
		label="(HI_MUX == 1)",
		lineno=107];
	"105:IF" -> "106:BS"	 [cond="['LOW_MUX']",
		label="(LOW_MUX == 1)",
		lineno=105];
	"95:CS" -> "110:CA"	 [cond="['sel0']",
		label=sel0,
		lineno=95];
	"95:CS" -> "96:CA"	 [cond="['sel0']",
		label=sel0,
		lineno=95];
	"95:CS" -> "103:CA"	 [cond="['sel0']",
		label=sel0,
		lineno=95];
}
