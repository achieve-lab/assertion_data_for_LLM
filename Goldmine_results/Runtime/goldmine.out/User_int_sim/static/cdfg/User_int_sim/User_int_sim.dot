strict digraph "compose( ,  )" {
	node [label="\N"];
	"115:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fe07ba68c10>",
		fillcolor=springgreen,
		label="115:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"116:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fe07ba68d50>",
		fillcolor=firebrick,
		label="116:NS
Start_tran <= 1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fe07ba68d50>]",
		style=filled,
		typ=NonblockingSubstitution];
	"115:IF" -> "116:NS"	 [cond="['Tx_mac_wa']",
		label=Tx_mac_wa,
		lineno=115];
	"146:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fe07b789350>",
		clk_sens=True,
		fillcolor=gold,
		label="146:AL",
		sens="['Clk_user']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Rx_mac_pa']"];
	"147:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fe07b789850>",
		fillcolor=springgreen,
		label="147:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"146:AL" -> "147:IF"	 [cond="[]",
		lineno=None];
	"Leaf_110:AL"	 [def_var="['Start_tran']",
		label="Leaf_110:AL"];
	"130:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fe07b782710>",
		def_var="['Tx_mac_sop']",
		fillcolor=deepskyblue,
		label="130:AS
Tx_mac_sop = operation[3];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['operation']"];
	"Leaf_146:AL"	 [def_var="[]",
		label="Leaf_146:AL"];
	"129:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fe07b782550>",
		def_var="['Tx_mac_wr']",
		fillcolor=deepskyblue,
		label="129:AS
Tx_mac_wr = operation[4];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['operation']"];
	"139:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fe07b7891d0>",
		fillcolor=springgreen,
		label="139:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"143:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fe07b789390>",
		fillcolor=firebrick,
		label="143:NS
Rx_mac_rd <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fe07b789390>]",
		style=filled,
		typ=NonblockingSubstitution];
	"139:IF" -> "143:NS"	 [cond="['Rx_mac_ra', 'Rx_mac_rd']",
		label="!((Rx_mac_ra & (Rx_mac_rd == 0)))",
		lineno=139];
	"141:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fe07b789210>",
		fillcolor=firebrick,
		label="141:NS
Rx_mac_rd <= 1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fe07b789210>]",
		style=filled,
		typ=NonblockingSubstitution];
	"139:IF" -> "141:NS"	 [cond="['Rx_mac_ra', 'Rx_mac_rd']",
		label="(Rx_mac_ra & (Rx_mac_rd == 0))",
		lineno=139];
	"113:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fe07ba68a90>",
		fillcolor=springgreen,
		label="113:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"113:IF" -> "115:IF"	 [cond="['Tx_mac_eop', 'Tx_mac_wa']",
		label="!((Tx_mac_eop && !Tx_mac_wa))",
		lineno=113];
	"114:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fe07ba68ad0>",
		fillcolor=firebrick,
		label="114:NS
Start_tran <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fe07ba68ad0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"113:IF" -> "114:NS"	 [cond="['Tx_mac_eop', 'Tx_mac_wa']",
		label="(Tx_mac_eop && !Tx_mac_wa)",
		lineno=113];
	"128:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fe07b782390>",
		def_var="['Tx_mac_data']",
		fillcolor=deepskyblue,
		label="128:AS
Tx_mac_data = data;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['data']"];
	"119:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fe07ba68b10>",
		clk_sens=True,
		fillcolor=gold,
		label="119:AL",
		sens="['Clk_user']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['CPU_init_end', 'Tx_mac_wa']"];
	"120:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fe07ba68f90>",
		fillcolor=springgreen,
		label="120:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"119:AL" -> "120:IF"	 [cond="[]",
		lineno=None];
	"148:SS"	 [ast="<pyverilog.vparser.ast.SingleStatement object at 0x7fe07b789090>",
		fillcolor=aquamarine,
		label="148:SS",
		statements="[]",
		style=filled,
		typ=SingleStatement];
	"148:SS" -> "Leaf_146:AL"	 [cond="[]",
		lineno=None];
	"138:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fe07b782e50>",
		fillcolor=firebrick,
		label="138:NS
Rx_mac_rd <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fe07b782e50>]",
		style=filled,
		typ=NonblockingSubstitution];
	"Leaf_136:AL"	 [def_var="['Rx_mac_rd']",
		label="Leaf_136:AL"];
	"138:NS" -> "Leaf_136:AL"	 [cond="[]",
		lineno=None];
	"123:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fe07b782150>",
		fillcolor=turquoise,
		label="123:BL
operation <= 0;
data <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fe07b782190>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fe07b7822d0>]",
		style=filled,
		typ=Block];
	"Leaf_119:AL"	 [def_var="['operation', 'data']",
		label="Leaf_119:AL"];
	"123:BL" -> "Leaf_119:AL"	 [cond="[]",
		lineno=None];
	"136:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fe07b782d10>",
		clk_sens=True,
		fillcolor=gold,
		label="136:AL",
		sens="['Clk_user', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'Rx_mac_rd', 'Rx_mac_ra']"];
	"Leaf_136:AL" -> "136:AL";
	"116:NS" -> "Leaf_110:AL"	 [cond="[]",
		lineno=None];
	"137:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fe07b782e10>",
		fillcolor=springgreen,
		label="137:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"136:AL" -> "137:IF"	 [cond="[]",
		lineno=None];
	"137:IF" -> "139:IF"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=137];
	"137:IF" -> "138:NS"	 [cond="['Reset']",
		label=Reset,
		lineno=137];
	"121:SS"	 [ast="<pyverilog.vparser.ast.SingleStatement object at 0x7fe07ba68e50>",
		fillcolor=aquamarine,
		label="121:SS",
		statements="[]",
		style=filled,
		typ=SingleStatement];
	"121:SS" -> "Leaf_119:AL"	 [cond="[]",
		lineno=None];
	"143:NS" -> "Leaf_136:AL"	 [cond="[]",
		lineno=None];
	"132:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fe07b782a90>",
		def_var="['Tx_mac_BE']",
		fillcolor=deepskyblue,
		label="132:AS
Tx_mac_BE = operation[1:0];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['operation']"];
	"120:IF" -> "123:BL"	 [cond="['Tx_mac_wa', 'CPU_init_end']",
		label="!((Tx_mac_wa && CPU_init_end))",
		lineno=120];
	"120:IF" -> "121:SS"	 [cond="['Tx_mac_wa', 'CPU_init_end']",
		label="(Tx_mac_wa && CPU_init_end)",
		lineno=120];
	"112:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fe07ba68790>",
		fillcolor=firebrick,
		label="112:NS
Start_tran <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fe07ba68790>]",
		style=filled,
		typ=NonblockingSubstitution];
	"112:NS" -> "Leaf_110:AL"	 [cond="[]",
		lineno=None];
	"147:IF" -> "148:SS"	 [cond="['Rx_mac_pa']",
		label=Rx_mac_pa,
		lineno=147];
	"Leaf_119:AL" -> "130:AS";
	"Leaf_119:AL" -> "129:AS";
	"Leaf_119:AL" -> "128:AS";
	"Leaf_119:AL" -> "132:AS";
	"131:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fe07b7828d0>",
		def_var="['Tx_mac_eop']",
		fillcolor=deepskyblue,
		label="131:AS
Tx_mac_eop = operation[2];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['operation']"];
	"Leaf_119:AL" -> "131:AS";
	"141:NS" -> "Leaf_136:AL"	 [cond="[]",
		lineno=None];
	"110:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fe07ba68650>",
		clk_sens=True,
		fillcolor=gold,
		label="110:AL",
		sens="['Clk_user', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'Tx_mac_wa', 'Tx_mac_eop']"];
	"131:AS" -> "110:AL";
	"111:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fe07ba68750>",
		fillcolor=springgreen,
		label="111:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"111:IF" -> "113:IF"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=111];
	"111:IF" -> "112:NS"	 [cond="['Reset']",
		label=Reset,
		lineno=111];
	"114:NS" -> "Leaf_110:AL"	 [cond="[]",
		lineno=None];
	"110:AL" -> "111:IF"	 [cond="[]",
		lineno=None];
}
