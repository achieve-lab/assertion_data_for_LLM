strict digraph "" {
	node [label="\N"];
	"215:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd1837b990>",
		fillcolor=turquoise,
		label="215:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"216:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcd1837b9d0>",
		fillcolor=springgreen,
		label="216:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"215:BL" -> "216:IF"	 [cond="[]",
		lineno=None];
	"Leaf_209:AL"	 [def_var="['next_state_byte']",
		label="Leaf_209:AL"];
	"218:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcd1837bc90>",
		fillcolor=springgreen,
		label="218:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"219:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837bcd0>",
		fillcolor=cadetblue,
		label="219:BS
next_state_byte = IDLE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837bcd0>]",
		style=filled,
		typ=BlockingSubstitution];
	"218:IF" -> "219:BS"	 [cond="['write', 'has_data']",
		label="(!write && !has_data)",
		lineno=218];
	"219:BS" -> "Leaf_209:AL"	 [cond="[]",
		lineno=None];
	"249:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd18309450>",
		fillcolor=cadetblue,
		label="249:BS
next_state_byte = IDLE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd18309450>]",
		style=filled,
		typ=BlockingSubstitution];
	"249:BS" -> "Leaf_209:AL"	 [cond="[]",
		lineno=None];
	"217:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd1837bc50>",
		fillcolor=turquoise,
		label="217:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"217:BL" -> "218:IF"	 [cond="[]",
		lineno=None];
	"245:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd183093d0>",
		fillcolor=turquoise,
		label="245:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"246:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcd18309410>",
		fillcolor=springgreen,
		label="246:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"245:BL" -> "246:IF"	 [cond="[]",
		lineno=None];
	"222:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd1837ba10>",
		fillcolor=turquoise,
		label="222:BL
next_state_byte = BYTE_1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837ba50>]",
		style=filled,
		typ=Block];
	"222:BL" -> "Leaf_209:AL"	 [cond="[]",
		lineno=None];
	"229:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd18300450>",
		fillcolor=turquoise,
		label="229:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"230:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcd18300490>",
		fillcolor=springgreen,
		label="230:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"229:BL" -> "230:IF"	 [cond="[]",
		lineno=None];
	"210:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd18300c10>",
		fillcolor=turquoise,
		label="210:BL
next_state_byte = state_byte;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd18300a90>]",
		style=filled,
		typ=Block];
	"212:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7fcd18300c50>",
		fillcolor=linen,
		label="212:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"210:BL" -> "212:CS"	 [cond="[]",
		lineno=None];
	"216:IF" -> "217:BL"	 [cond="['size_in', 'BYTE']",
		label="(size_in == BYTE)",
		lineno=216];
	"216:IF" -> "222:BL"	 [cond="['size_in', 'BYTE']",
		label="!((size_in == BYTE))",
		lineno=216];
	"233:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd183004d0>",
		fillcolor=cadetblue,
		label="233:BS
next_state_byte = IDLE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd183004d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"230:IF" -> "233:BS"	 [cond="['has_data', 'write', 'buffer_full']",
		label="!((has_data || write && !buffer_full))",
		lineno=230];
	"231:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd18300650>",
		fillcolor=cadetblue,
		label="231:BS
next_state_byte = BYTE_0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd18300650>]",
		style=filled,
		typ=BlockingSubstitution];
	"230:IF" -> "231:BS"	 [cond="['has_data', 'write', 'buffer_full']",
		label="(has_data || write && !buffer_full)",
		lineno=230];
	"213:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcd18300d10>",
		fillcolor=lightcyan,
		label="213:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"213:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd18300d90>",
		fillcolor=cadetblue,
		label="213:BS
next_state_byte = (write)? BYTE_0 : IDLE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd18300d90>]",
		style=filled,
		typ=BlockingSubstitution];
	"213:CA" -> "213:BS"	 [cond="[]",
		lineno=None];
	"236:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd18300210>",
		fillcolor=turquoise,
		label="236:BL
next_state_byte = BYTE_2;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd18300250>]",
		style=filled,
		typ=Block];
	"236:BL" -> "Leaf_209:AL"	 [cond="[]",
		lineno=None];
	"209:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fcd18309990>",
		clk_sens=False,
		fillcolor=gold,
		label="209:AL",
		sens="['state_byte', 'write', 'IDLE', 'BYTE_1', 'BYTE_0', 'BYTE_3', 'BYTE_2']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['size_in', 'BYTE_2', 'buffer_full', 'state_byte', 'write', 'IDLE', 'BYTE_1', 'BYTE_0', 'BYTE', 'HALF_WORD', 'BYTE_3', 'has_data']"];
	"209:AL" -> "210:BL"	 [cond="[]",
		lineno=None];
	"212:CS" -> "213:CA"	 [cond="['state_byte']",
		label=state_byte,
		lineno=212];
	"240:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcd18309090>",
		fillcolor=lightcyan,
		label="240:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"212:CS" -> "240:CA"	 [cond="['state_byte']",
		label=state_byte,
		lineno=212];
	"226:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcd18300150>",
		fillcolor=lightcyan,
		label="226:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"212:CS" -> "226:CA"	 [cond="['state_byte']",
		label=state_byte,
		lineno=212];
	"244:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcd18309350>",
		fillcolor=lightcyan,
		label="244:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"212:CS" -> "244:CA"	 [cond="['state_byte']",
		label=state_byte,
		lineno=212];
	"214:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcd18300f90>",
		fillcolor=lightcyan,
		label="214:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"212:CS" -> "214:CA"	 [cond="['state_byte']",
		label=state_byte,
		lineno=212];
	"227:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd18300190>",
		fillcolor=turquoise,
		label="227:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"228:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcd183001d0>",
		fillcolor=springgreen,
		label="228:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"227:BL" -> "228:IF"	 [cond="[]",
		lineno=None];
	"246:IF" -> "249:BS"	 [cond="['has_data', 'write', 'buffer_full']",
		label="!((has_data || write && !buffer_full))",
		lineno=246];
	"247:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd18309610>",
		fillcolor=cadetblue,
		label="247:BS
next_state_byte = BYTE_0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd18309610>]",
		style=filled,
		typ=BlockingSubstitution];
	"246:IF" -> "247:BS"	 [cond="['has_data', 'write', 'buffer_full']",
		label="(has_data || write && !buffer_full)",
		lineno=246];
	"241:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd18309110>",
		fillcolor=turquoise,
		label="241:BL
next_state_byte = BYTE_3;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd18309150>]",
		style=filled,
		typ=Block];
	"240:CA" -> "241:BL"	 [cond="[]",
		lineno=None];
	"233:BS" -> "Leaf_209:AL"	 [cond="[]",
		lineno=None];
	"228:IF" -> "229:BL"	 [cond="['size_in', 'HALF_WORD']",
		label="(size_in == HALF_WORD)",
		lineno=228];
	"228:IF" -> "236:BL"	 [cond="['size_in', 'HALF_WORD']",
		label="!((size_in == HALF_WORD))",
		lineno=228];
	"247:BS" -> "Leaf_209:AL"	 [cond="[]",
		lineno=None];
	"226:CA" -> "227:BL"	 [cond="[]",
		lineno=None];
	"244:CA" -> "245:BL"	 [cond="[]",
		lineno=None];
	"231:BS" -> "Leaf_209:AL"	 [cond="[]",
		lineno=None];
	"241:BL" -> "Leaf_209:AL"	 [cond="[]",
		lineno=None];
	"213:BS" -> "Leaf_209:AL"	 [cond="[]",
		lineno=None];
	"214:CA" -> "215:BL"	 [cond="[]",
		lineno=None];
}
