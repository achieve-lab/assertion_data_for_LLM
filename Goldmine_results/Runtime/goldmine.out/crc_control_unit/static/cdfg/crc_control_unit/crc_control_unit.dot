strict digraph "compose( ,  )" {
	node [label="\N"];
	"317:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d92090>",
		fillcolor=cadetblue,
		label="317:BS
next_state_reset = (last_byte)? RESET : RESET_2;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d92090>]",
		style=filled,
		typ=BlockingSubstitution];
	"Leaf_289:AL"	 [def_var="['next_state_reset']",
		label="Leaf_289:AL"];
	"317:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"171:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf71c88d0>",
		fillcolor=turquoise,
		label="171:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"172:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fccf71cd090>",
		fillcolor=springgreen,
		label="172:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"171:BL" -> "172:IF"	 [cond="[]",
		lineno=None];
	"282:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf6d7ff50>",
		fillcolor=turquoise,
		label="282:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"283:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fccf6d9d110>",
		fillcolor=springgreen,
		label="283:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"282:BL" -> "283:IF"	 [cond="[]",
		lineno=None];
	"294:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf6d9de90>",
		fillcolor=turquoise,
		label="294:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"295:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fccf6d9dc50>",
		fillcolor=springgreen,
		label="295:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"294:BL" -> "295:IF"	 [cond="[]",
		lineno=None];
	"297:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fccf6d950d0>",
		fillcolor=springgreen,
		label="297:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"294:BL" -> "297:IF"	 [cond="[]",
		lineno=None];
	"159:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fccf71c8a50>",
		fillcolor=springgreen,
		label="159:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"160:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf71c8910>",
		fillcolor=turquoise,
		label="160:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"159:IF" -> "160:BL"	 [cond="['last_byte']",
		label=last_byte,
		lineno=159];
	"165:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf71c8c90>",
		fillcolor=turquoise,
		label="165:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"159:IF" -> "165:BL"	 [cond="['last_byte']",
		label="!(last_byte)",
		lineno=159];
	"255:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fccf6d937d0>",
		clk_sens=False,
		fillcolor=gold,
		label="255:AL",
		sens="['BYTE_1', 'BYTE_0', 'BYTE_3', 'BYTE_2']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['BYTE_1', 'BYTE_0', 'BYTE_3', 'BYTE_2', 'state_byte']"];
	"256:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf6d93950>",
		fillcolor=turquoise,
		label="256:BL
byte_sel = 2'b00;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d93890>]",
		style=filled,
		typ=Block];
	"255:AL" -> "256:BL"	 [cond="[]",
		lineno=None];
	"222:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf71d34d0>",
		fillcolor=turquoise,
		label="222:BL
next_state_byte = BYTE_1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71d3510>]",
		style=filled,
		typ=Block];
	"Leaf_209:AL"	 [def_var="['next_state_byte']",
		label="Leaf_209:AL"];
	"222:BL" -> "Leaf_209:AL"	 [cond="[]",
		lineno=None];
	"321:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fccf6d92350>",
		fillcolor=lightcyan,
		label="321:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"322:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf6d92210>",
		fillcolor=turquoise,
		label="322:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"321:CA" -> "322:BL"	 [cond="[]",
		lineno=None];
	"153:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf71c8310>",
		fillcolor=turquoise,
		label="153:BL
next_state_full = state_full;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71c8290>]",
		style=filled,
		typ=Block];
	"155:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7fccf71c8f90>",
		fillcolor=linen,
		label="155:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"153:BL" -> "155:CS"	 [cond="[]",
		lineno=None];
	"309:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fccf6d95b90>",
		fillcolor=springgreen,
		label="309:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"310:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d95ad0>",
		fillcolor=cadetblue,
		label="310:BS
next_state_reset = (write)? WRITE : RESET;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d95ad0>]",
		style=filled,
		typ=BlockingSubstitution];
	"309:IF" -> "310:BS"	 [cond="['last_byte']",
		label=last_byte,
		lineno=309];
	"312:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d95c90>",
		fillcolor=cadetblue,
		label="312:BS
next_state_reset = WAIT;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d95c90>]",
		style=filled,
		typ=BlockingSubstitution];
	"309:IF" -> "312:BS"	 [cond="['last_byte']",
		label="!(last_byte)",
		lineno=309];
	"139:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf6df4650>",
		fillcolor=turquoise,
		label="139:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"140:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fccf6df4790>",
		fillcolor=springgreen,
		label="140:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"139:BL" -> "140:IF"	 [cond="[]",
		lineno=None];
	"296:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d9de10>",
		fillcolor=cadetblue,
		label="296:BS
next_state_reset = RESET;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d9de10>]",
		style=filled,
		typ=BlockingSubstitution];
	"295:IF" -> "296:BS"	 [cond="['reset_chain', 'has_data', 'state_byte', 'IDLE', 'last_byte', 'reset_chain', 'has_data', 'last_byte']",
		label="(reset_chain && !has_data && (state_byte != IDLE) && !last_byte || reset_chain && has_data && last_byte)",
		lineno=295];
	"284:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fccf6d9d150>",
		fillcolor=firebrick,
		label="284:NS
state_reset <= NO_RESET;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fccf6d9d150>]",
		style=filled,
		typ=NonblockingSubstitution];
	"Leaf_281:AL"	 [def_var="['state_reset']",
		label="Leaf_281:AL"];
	"284:NS" -> "Leaf_281:AL"	 [cond="[]",
		lineno=None];
	"158:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf71c87d0>",
		fillcolor=turquoise,
		label="158:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"158:BL" -> "159:IF"	 [cond="[]",
		lineno=None];
	"227:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf71d35d0>",
		fillcolor=turquoise,
		label="227:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"228:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fccf71d3a10>",
		fillcolor=springgreen,
		label="228:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"227:BL" -> "228:IF"	 [cond="[]",
		lineno=None];
	"192:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fccf71cddd0>",
		def_var="['bypass_byte0']",
		fillcolor=deepskyblue,
		label="192:AS
bypass_byte0 = state_full != BYPASS;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['state_full', 'BYPASS']"];
	"326:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d92890>",
		fillcolor=cadetblue,
		label="326:BS
next_state_reset = RESET_2;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d92890>]",
		style=filled,
		typ=BlockingSubstitution];
	"326:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"166:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fccf71c8dd0>",
		fillcolor=springgreen,
		label="166:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"167:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71c8ed0>",
		fillcolor=cadetblue,
		label="167:BS
next_state_full = WRITE_2;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71c8ed0>]",
		style=filled,
		typ=BlockingSubstitution];
	"166:IF" -> "167:BS"	 [cond="['write']",
		label=write,
		lineno=166];
	"187:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fccf71cdbd0>",
		def_var="['read_wait']",
		fillcolor=deepskyblue,
		label="187:AS
read_wait = state_byte != IDLE;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['state_byte', 'IDLE']"];
	"323:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fccf6d92790>",
		fillcolor=springgreen,
		label="323:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"323:IF" -> "326:BS"	 [cond="['last_byte']",
		label="!(last_byte)",
		lineno=323];
	"324:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d926d0>",
		fillcolor=cadetblue,
		label="324:BS
next_state_reset = (write)? WRITE : RESET;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d926d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"323:IF" -> "324:BS"	 [cond="['last_byte']",
		label=last_byte,
		lineno=323];
	"258:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7fccf6d93fd0>",
		fillcolor=linen,
		label="258:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"256:BL" -> "258:CS"	 [cond="[]",
		lineno=None];
	"173:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71cd250>",
		fillcolor=cadetblue,
		label="173:BS
next_state_full = (write)? BYPASS : WRITE_1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71cd250>]",
		style=filled,
		typ=BlockingSubstitution];
	"Leaf_152:AL"	 [def_var="['next_state_full']",
		label="Leaf_152:AL"];
	"173:BS" -> "Leaf_152:AL"	 [cond="[]",
		lineno=None];
	"241:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf6d93090>",
		fillcolor=turquoise,
		label="241:BL
next_state_byte = BYTE_3;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d930d0>]",
		style=filled,
		typ=Block];
	"241:BL" -> "Leaf_209:AL"	 [cond="[]",
		lineno=None];
	"286:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fccf6d9d310>",
		fillcolor=firebrick,
		label="286:NS
state_reset <= next_state_reset;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fccf6d9d310>]",
		style=filled,
		typ=NonblockingSubstitution];
	"286:NS" -> "Leaf_281:AL"	 [cond="[]",
		lineno=None];
	"161:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fccf71c8b10>",
		fillcolor=springgreen,
		label="161:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"162:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71c8c10>",
		fillcolor=cadetblue,
		label="162:BS
next_state_full = EMPTY;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71c8c10>]",
		style=filled,
		typ=BlockingSubstitution];
	"161:IF" -> "162:BS"	 [cond="['write']",
		label="(!write)",
		lineno=161];
	"260:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d93e50>",
		fillcolor=cadetblue,
		label="260:BS
byte_sel = BYTE_1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d93e50>]",
		style=filled,
		typ=BlockingSubstitution];
	"Leaf_255:AL"	 [def_var="['byte_sel']",
		label="Leaf_255:AL"];
	"260:BS" -> "Leaf_255:AL"	 [cond="[]",
		lineno=None];
	"143:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fccf6df4990>",
		fillcolor=firebrick,
		label="143:NS
state_full <= next_state_full;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fccf6df4990>]",
		style=filled,
		typ=NonblockingSubstitution];
	"140:IF" -> "143:NS"	 [cond="['rst_n']",
		label="!((!rst_n))",
		lineno=140];
	"141:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fccf6df47d0>",
		fillcolor=firebrick,
		label="141:NS
state_full <= EMPTY;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fccf6df47d0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"140:IF" -> "141:NS"	 [cond="['rst_n']",
		label="(!rst_n)",
		lineno=140];
	"281:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fccf6d7ff10>",
		clk_sens=True,
		fillcolor=gold,
		label="281:AL",
		sens="['clk']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['rst_n', 'NO_RESET', 'next_state_reset']"];
	"Leaf_289:AL" -> "281:AL";
	"293:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fccf6d9d790>",
		fillcolor=lightcyan,
		label="293:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"293:CA" -> "294:BL"	 [cond="[]",
		lineno=None];
	"259:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fccf6d93b10>",
		fillcolor=lightcyan,
		label="259:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"259:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d93c10>",
		fillcolor=cadetblue,
		label="259:BS
byte_sel = BYTE_0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d93c10>]",
		style=filled,
		typ=BlockingSubstitution];
	"259:CA" -> "259:BS"	 [cond="[]",
		lineno=None];
	"218:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fccf71d3250>",
		fillcolor=springgreen,
		label="218:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"219:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71d3350>",
		fillcolor=cadetblue,
		label="219:BS
next_state_byte = IDLE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71d3350>]",
		style=filled,
		typ=BlockingSubstitution];
	"218:IF" -> "219:BS"	 [cond="['write', 'has_data']",
		label="(!write && !has_data)",
		lineno=218];
	"210:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf71cf8d0>",
		fillcolor=turquoise,
		label="210:BL
next_state_byte = state_byte;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71cf850>]",
		style=filled,
		typ=Block];
	"212:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7fccf6d93150>",
		fillcolor=linen,
		label="212:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"210:BL" -> "212:CS"	 [cond="[]",
		lineno=None];
	"156:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fccf71c8510>",
		fillcolor=lightcyan,
		label="156:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"156:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71c86d0>",
		fillcolor=cadetblue,
		label="156:BS
next_state_full = (write)? WRITE_1 : EMPTY;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71c86d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"156:CA" -> "156:BS"	 [cond="[]",
		lineno=None];
	"167:BS" -> "Leaf_152:AL"	 [cond="[]",
		lineno=None];
	"337:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fccf6d9e350>",
		def_var="['clear_crc_init_sel']",
		fillcolor=deepskyblue,
		label="337:AS
clear_crc_init_sel = (state_reset == NO_RESET) && last_byte && reset_chain || (state_byte == IDLE) && reset_chain || (state_\
reset == RESET) && last_byte || (state_reset == WRITE) && last_byte || (state_reset == RESET_2) && last_byte;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['state_reset', 'NO_RESET', 'last_byte', 'reset_chain', 'state_byte', 'IDLE', 'reset_chain', 'state_reset', 'RESET', 'last_byte', '\
state_reset', 'WRITE', 'last_byte', 'state_reset', 'RESET_2', 'last_byte']"];
	"Leaf_281:AL" -> "337:AS";
	"343:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fccf6d9e510>",
		def_var="['reset_pending']",
		fillcolor=deepskyblue,
		label="343:AS
reset_pending = state_reset != NO_RESET;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['state_reset', 'NO_RESET']"];
	"Leaf_281:AL" -> "343:AS";
	"289:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fccf6d9d410>",
		clk_sens=False,
		fillcolor=gold,
		label="289:AL",
		sens="['RESET', 'state_reset', 'last_byte', 'RESET_2', 'WRITE', 'write', 'NO_RESET', 'WAIT']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['RESET', 'state_reset', 'last_byte', 'RESET_2', 'state_byte', 'WRITE', 'IDLE', 'write', 'reset_chain', 'WAIT', 'NO_RESET', 'has_\
data']"];
	"Leaf_281:AL" -> "289:AL";
	"213:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fccf71cfad0>",
		fillcolor=lightcyan,
		label="213:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"213:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71cfc90>",
		fillcolor=cadetblue,
		label="213:BS
next_state_byte = (write)? BYTE_0 : IDLE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71cfc90>]",
		style=filled,
		typ=BlockingSubstitution];
	"213:CA" -> "213:BS"	 [cond="[]",
		lineno=None];
	"236:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf71d3e10>",
		fillcolor=turquoise,
		label="236:BL
next_state_byte = BYTE_2;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71d3e50>]",
		style=filled,
		typ=Block];
	"236:BL" -> "Leaf_209:AL"	 [cond="[]",
		lineno=None];
	"172:IF" -> "173:BS"	 [cond="['last_byte']",
		label=last_byte,
		lineno=172];
	"276:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fccf6d7fc50>",
		def_var="['byte_en']",
		fillcolor=deepskyblue,
		label="276:AS
byte_en = (state_byte == BYTE_0) && ((size_in == HALF_WORD) || (size_in == WORD)) && (state_full != BYPASS) || last_byte && \
has_data;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['state_byte', 'BYTE_0', 'size_in', 'HALF_WORD', 'size_in', 'WORD', 'state_full', 'BYPASS', 'last_byte', 'has_data']"];
	"259:BS" -> "Leaf_255:AL"	 [cond="[]",
		lineno=None];
	"152:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fccf71c8150>",
		clk_sens=False,
		fillcolor=gold,
		label="152:AL",
		sens="['WRITE_1', 'state_full', 'write', 'WRITE_2', 'BYPASS', 'EMPTY']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['last_byte', 'WRITE_1', 'state_full', 'write', 'WRITE_2', 'BYPASS', 'EMPTY']"];
	"152:AL" -> "153:BL"	 [cond="[]",
		lineno=None];
	"Leaf_138:AL"	 [def_var="['state_full']",
		label="Leaf_138:AL"];
	"Leaf_138:AL" -> "192:AS";
	"Leaf_138:AL" -> "276:AS";
	"Leaf_138:AL" -> "152:AL";
	"184:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fccf71cda50>",
		def_var="['buffer_full']",
		fillcolor=deepskyblue,
		label="184:AS
buffer_full = (state_full == WRITE_2) && !last_byte || (state_full == BYPASS) && !last_byte;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['state_full', 'WRITE_2', 'last_byte', 'state_full', 'BYPASS', 'last_byte']"];
	"Leaf_138:AL" -> "184:AS";
	"195:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fccf71cf090>",
		def_var="['has_data']",
		fillcolor=deepskyblue,
		label="195:AS
has_data = (state_full == WRITE_2) || (state_full == BYPASS);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['state_full', 'WRITE_2', 'state_full', 'BYPASS']"];
	"Leaf_138:AL" -> "195:AS";
	"268:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fccf6d7f710>",
		def_var="['bypass_size']",
		fillcolor=deepskyblue,
		label="268:AS
bypass_size = !((state_full != BYPASS) && (state_byte != BYTE_0) || (state_full == BYPASS));",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['state_full', 'BYPASS', 'state_byte', 'BYTE_0', 'state_full', 'BYPASS']"];
	"Leaf_138:AL" -> "268:AS";
	"138:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fccf6df45d0>",
		clk_sens=True,
		fillcolor=gold,
		label="138:AL",
		sens="['clk']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['next_state_full', 'rst_n', 'EMPTY']"];
	"138:AL" -> "139:BL"	 [cond="[]",
		lineno=None];
	"230:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fccf71d3bd0>",
		fillcolor=springgreen,
		label="230:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"231:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71d3b10>",
		fillcolor=cadetblue,
		label="231:BS
next_state_byte = BYTE_0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71d3b10>]",
		style=filled,
		typ=BlockingSubstitution];
	"230:IF" -> "231:BS"	 [cond="['has_data', 'write', 'buffer_full']",
		label="(has_data || write && !buffer_full)",
		lineno=230];
	"233:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71d3cd0>",
		fillcolor=cadetblue,
		label="233:BS
next_state_byte = IDLE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71d3cd0>]",
		style=filled,
		typ=BlockingSubstitution];
	"230:IF" -> "233:BS"	 [cond="['has_data', 'write', 'buffer_full']",
		label="!((has_data || write && !buffer_full))",
		lineno=230];
	"162:BS" -> "Leaf_152:AL"	 [cond="[]",
		lineno=None];
	"209:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fccf71cf710>",
		clk_sens=False,
		fillcolor=gold,
		label="209:AL",
		sens="['state_byte', 'write', 'IDLE', 'BYTE_1', 'BYTE_0', 'BYTE_3', 'BYTE_2']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['size_in', 'BYTE_2', 'buffer_full', 'state_byte', 'write', 'IDLE', 'BYTE_1', 'BYTE_0', 'BYTE', 'HALF_WORD', 'BYTE_3', 'has_data']"];
	"184:AS" -> "209:AL";
	"195:AS" -> "276:AS";
	"195:AS" -> "289:AL";
	"195:AS" -> "209:AL";
	"281:AL" -> "282:BL"	 [cond="[]",
		lineno=None];
	"316:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fccf6d92150>",
		fillcolor=springgreen,
		label="316:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"316:IF" -> "317:BS"	 [cond="['reset_chain']",
		label=reset_chain,
		lineno=316];
	"319:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d92310>",
		fillcolor=cadetblue,
		label="319:BS
next_state_reset = (last_byte)? NO_RESET : WRITE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d92310>]",
		style=filled,
		typ=BlockingSubstitution];
	"316:IF" -> "319:BS"	 [cond="['reset_chain']",
		label="!(reset_chain)",
		lineno=316];
	"231:BS" -> "Leaf_209:AL"	 [cond="[]",
		lineno=None];
	"156:BS" -> "Leaf_152:AL"	 [cond="[]",
		lineno=None];
	"303:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d954d0>",
		fillcolor=cadetblue,
		label="303:BS
next_state_reset = NO_RESET;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d954d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"303:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"213:BS" -> "Leaf_209:AL"	 [cond="[]",
		lineno=None];
	"296:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"301:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf6d95190>",
		fillcolor=turquoise,
		label="301:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"302:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fccf6d95590>",
		fillcolor=springgreen,
		label="302:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"301:BL" -> "302:IF"	 [cond="[]",
		lineno=None];
	"201:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fccf71cf250>",
		clk_sens=True,
		fillcolor=gold,
		label="201:AL",
		sens="['clk']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['rst_n', 'IDLE', 'next_state_byte']"];
	"202:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf71cf290>",
		fillcolor=turquoise,
		label="202:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"201:AL" -> "202:BL"	 [cond="[]",
		lineno=None];
	"147:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fccf6df4fd0>",
		def_var="['last_byte']",
		fillcolor=deepskyblue,
		label="147:AS
last_byte = (size_in == BYTE) && (state_byte == BYTE_0) || (size_in == HALF_WORD) && (state_byte == BYTE_1) || (size_in == \
WORD) && (state_byte == BYTE_3);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['size_in', 'BYTE', 'state_byte', 'BYTE_0', 'size_in', 'HALF_WORD', 'state_byte', 'BYTE_1', 'size_in', 'WORD', 'state_byte', 'BYTE_\
3']"];
	"147:AS" -> "337:AS";
	"147:AS" -> "276:AS";
	"147:AS" -> "152:AL";
	"147:AS" -> "184:AS";
	"147:AS" -> "289:AL";
	"322:BL" -> "323:IF"	 [cond="[]",
		lineno=None];
	"215:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf71cfd90>",
		fillcolor=turquoise,
		label="215:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"216:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fccf71d31d0>",
		fillcolor=springgreen,
		label="216:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"215:BL" -> "216:IF"	 [cond="[]",
		lineno=None];
	"261:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fccf6d93f10>",
		fillcolor=lightcyan,
		label="261:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"261:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d7f050>",
		fillcolor=cadetblue,
		label="261:BS
byte_sel = BYTE_2;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d7f050>]",
		style=filled,
		typ=BlockingSubstitution];
	"261:CA" -> "261:BS"	 [cond="[]",
		lineno=None];
	"176:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf71cd290>",
		fillcolor=turquoise,
		label="176:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"177:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fccf71cd550>",
		fillcolor=springgreen,
		label="177:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"176:BL" -> "177:IF"	 [cond="[]",
		lineno=None];
	"Leaf_209:AL" -> "201:AL";
	"319:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"292:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7fccf6d95dd0>",
		fillcolor=linen,
		label="292:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"292:CS" -> "321:CA"	 [cond="['state_reset']",
		label=state_reset,
		lineno=292];
	"292:CS" -> "293:CA"	 [cond="['state_reset']",
		label=state_reset,
		lineno=292];
	"300:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fccf6d95210>",
		fillcolor=lightcyan,
		label="300:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"292:CS" -> "300:CA"	 [cond="['state_reset']",
		label=state_reset,
		lineno=292];
	"307:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fccf6d95650>",
		fillcolor=lightcyan,
		label="307:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"292:CS" -> "307:CA"	 [cond="['state_reset']",
		label=state_reset,
		lineno=292];
	"314:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fccf6d95cd0>",
		fillcolor=lightcyan,
		label="314:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"292:CS" -> "314:CA"	 [cond="['state_reset']",
		label=state_reset,
		lineno=292];
	"Leaf_152:AL" -> "138:AL";
	"178:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71cd650>",
		fillcolor=cadetblue,
		label="178:BS
next_state_full = WRITE_1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf71cd650>]",
		style=filled,
		typ=BlockingSubstitution];
	"178:BS" -> "Leaf_152:AL"	 [cond="[]",
		lineno=None];
	"262:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d7f250>",
		fillcolor=cadetblue,
		label="262:BS
byte_sel = BYTE_3;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d7f250>]",
		style=filled,
		typ=BlockingSubstitution];
	"262:BS" -> "Leaf_255:AL"	 [cond="[]",
		lineno=None];
	"245:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf6d931d0>",
		fillcolor=turquoise,
		label="245:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"246:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fccf6d93690>",
		fillcolor=springgreen,
		label="246:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"245:BL" -> "246:IF"	 [cond="[]",
		lineno=None];
	"229:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf71d3710>",
		fillcolor=turquoise,
		label="229:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"229:BL" -> "230:IF"	 [cond="[]",
		lineno=None];
	"283:IF" -> "284:NS"	 [cond="['rst_n']",
		label="(!rst_n)",
		lineno=283];
	"283:IF" -> "286:NS"	 [cond="['rst_n']",
		label="!((!rst_n))",
		lineno=283];
	"160:BL" -> "161:IF"	 [cond="[]",
		lineno=None];
	"216:IF" -> "222:BL"	 [cond="['size_in', 'BYTE']",
		label="!((size_in == BYTE))",
		lineno=216];
	"217:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf71cff50>",
		fillcolor=turquoise,
		label="217:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"216:IF" -> "217:BL"	 [cond="['size_in', 'BYTE']",
		label="(size_in == BYTE)",
		lineno=216];
	"300:CA" -> "301:BL"	 [cond="[]",
		lineno=None];
	"155:CS" -> "156:CA"	 [cond="['state_full']",
		label=state_full,
		lineno=155];
	"157:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fccf71c8810>",
		fillcolor=lightcyan,
		label="157:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"155:CS" -> "157:CA"	 [cond="['state_full']",
		label=state_full,
		lineno=155];
	"175:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fccf71cd310>",
		fillcolor=lightcyan,
		label="175:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"155:CS" -> "175:CA"	 [cond="['state_full']",
		label=state_full,
		lineno=155];
	"170:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fccf71c8f50>",
		fillcolor=lightcyan,
		label="170:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"155:CS" -> "170:CA"	 [cond="['state_full']",
		label=state_full,
		lineno=155];
	"247:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d935d0>",
		fillcolor=cadetblue,
		label="247:BS
next_state_byte = BYTE_0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d935d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"246:IF" -> "247:BS"	 [cond="['has_data', 'write', 'buffer_full']",
		label="(has_data || write && !buffer_full)",
		lineno=246];
	"249:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d93790>",
		fillcolor=cadetblue,
		label="249:BS
next_state_byte = IDLE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d93790>]",
		style=filled,
		typ=BlockingSubstitution];
	"246:IF" -> "249:BS"	 [cond="['has_data', 'write', 'buffer_full']",
		label="!((has_data || write && !buffer_full))",
		lineno=246];
	"143:NS" -> "Leaf_138:AL"	 [cond="[]",
		lineno=None];
	"233:BS" -> "Leaf_209:AL"	 [cond="[]",
		lineno=None];
	"203:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fccf71cf410>",
		fillcolor=springgreen,
		label="203:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"202:BL" -> "203:IF"	 [cond="[]",
		lineno=None];
	"260:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fccf6d93d50>",
		fillcolor=lightcyan,
		label="260:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"260:CA" -> "260:BS"	 [cond="[]",
		lineno=None];
	"141:NS" -> "Leaf_138:AL"	 [cond="[]",
		lineno=None];
	"157:CA" -> "158:BL"	 [cond="[]",
		lineno=None];
	"310:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"177:IF" -> "178:BS"	 [cond="['last_byte', 'write']",
		label="(last_byte && !write)",
		lineno=177];
	"308:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf6d95310>",
		fillcolor=turquoise,
		label="308:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"308:BL" -> "309:IF"	 [cond="[]",
		lineno=None];
	"258:CS" -> "259:CA"	 [cond="['state_byte']",
		label=state_byte,
		lineno=258];
	"258:CS" -> "261:CA"	 [cond="['state_byte']",
		label=state_byte,
		lineno=258];
	"258:CS" -> "260:CA"	 [cond="['state_byte']",
		label=state_byte,
		lineno=258];
	"262:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fccf6d7f150>",
		fillcolor=lightcyan,
		label="262:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"258:CS" -> "262:CA"	 [cond="['state_byte']",
		label=state_byte,
		lineno=258];
	"247:BS" -> "Leaf_209:AL"	 [cond="[]",
		lineno=None];
	"312:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"290:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf6d9d5d0>",
		fillcolor=turquoise,
		label="290:BL
next_state_reset = state_reset;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d9d550>]",
		style=filled,
		typ=Block];
	"290:BL" -> "292:CS"	 [cond="[]",
		lineno=None];
	"244:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fccf6d93210>",
		fillcolor=lightcyan,
		label="244:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"244:CA" -> "245:BL"	 [cond="[]",
		lineno=None];
	"175:CA" -> "176:BL"	 [cond="[]",
		lineno=None];
	"273:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fccf6d7f7d0>",
		def_var="['crc_out_en']",
		fillcolor=deepskyblue,
		label="273:AS
crc_out_en = state_byte != IDLE;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['state_byte', 'IDLE']"];
	"307:CA" -> "308:BL"	 [cond="[]",
		lineno=None];
	"324:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"305:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d95750>",
		fillcolor=cadetblue,
		label="305:BS
next_state_reset = (write)? WRITE : RESET;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d95750>]",
		style=filled,
		typ=BlockingSubstitution];
	"305:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"333:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fccf6d929d0>",
		def_var="['set_crc_init_sel']",
		fillcolor=deepskyblue,
		label="333:AS
set_crc_init_sel = state_byte == BYTE_0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['state_byte', 'BYTE_0']"];
	"226:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fccf71d3590>",
		fillcolor=lightcyan,
		label="226:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"226:CA" -> "227:BL"	 [cond="[]",
		lineno=None];
	"170:CA" -> "171:BL"	 [cond="[]",
		lineno=None];
	"212:CS" -> "213:CA"	 [cond="['state_byte']",
		label=state_byte,
		lineno=212];
	"212:CS" -> "244:CA"	 [cond="['state_byte']",
		label=state_byte,
		lineno=212];
	"212:CS" -> "226:CA"	 [cond="['state_byte']",
		label=state_byte,
		lineno=212];
	"240:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fccf71d3e90>",
		fillcolor=lightcyan,
		label="240:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"212:CS" -> "240:CA"	 [cond="['state_byte']",
		label=state_byte,
		lineno=212];
	"214:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fccf71cfdd0>",
		fillcolor=lightcyan,
		label="214:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"212:CS" -> "214:CA"	 [cond="['state_byte']",
		label=state_byte,
		lineno=212];
	"298:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d951d0>",
		fillcolor=cadetblue,
		label="298:BS
next_state_reset = WAIT;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fccf6d951d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"297:IF" -> "298:BS"	 [cond="['reset_chain', 'has_data', 'last_byte']",
		label="(reset_chain && has_data && !last_byte)",
		lineno=297];
	"206:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fccf71cf610>",
		fillcolor=firebrick,
		label="206:NS
state_byte <= next_state_byte;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fccf71cf610>]",
		style=filled,
		typ=NonblockingSubstitution];
	"203:IF" -> "206:NS"	 [cond="['rst_n']",
		label="!((!rst_n))",
		lineno=203];
	"204:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fccf71cf450>",
		fillcolor=firebrick,
		label="204:NS
state_byte <= IDLE;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fccf71cf450>]",
		style=filled,
		typ=NonblockingSubstitution];
	"203:IF" -> "204:NS"	 [cond="['rst_n']",
		label="(!rst_n)",
		lineno=203];
	"217:BL" -> "218:IF"	 [cond="[]",
		lineno=None];
	"219:BS" -> "Leaf_209:AL"	 [cond="[]",
		lineno=None];
	"249:BS" -> "Leaf_209:AL"	 [cond="[]",
		lineno=None];
	"289:AL" -> "290:BL"	 [cond="[]",
		lineno=None];
	"315:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fccf6d95c50>",
		fillcolor=turquoise,
		label="315:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"315:BL" -> "316:IF"	 [cond="[]",
		lineno=None];
	"209:AL" -> "210:BL"	 [cond="[]",
		lineno=None];
	"240:CA" -> "241:BL"	 [cond="[]",
		lineno=None];
	"314:CA" -> "315:BL"	 [cond="[]",
		lineno=None];
	"165:BL" -> "166:IF"	 [cond="[]",
		lineno=None];
	"228:IF" -> "236:BL"	 [cond="['size_in', 'HALF_WORD']",
		label="!((size_in == HALF_WORD))",
		lineno=228];
	"228:IF" -> "229:BL"	 [cond="['size_in', 'HALF_WORD']",
		label="(size_in == HALF_WORD)",
		lineno=228];
	"298:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"261:BS" -> "Leaf_255:AL"	 [cond="[]",
		lineno=None];
	"Leaf_201:AL"	 [def_var="['state_byte']",
		label="Leaf_201:AL"];
	"206:NS" -> "Leaf_201:AL"	 [cond="[]",
		lineno=None];
	"Leaf_201:AL" -> "255:AL";
	"Leaf_201:AL" -> "187:AS";
	"Leaf_201:AL" -> "337:AS";
	"Leaf_201:AL" -> "276:AS";
	"Leaf_201:AL" -> "147:AS";
	"Leaf_201:AL" -> "268:AS";
	"Leaf_201:AL" -> "273:AS";
	"Leaf_201:AL" -> "333:AS";
	"Leaf_201:AL" -> "289:AL";
	"Leaf_201:AL" -> "209:AL";
	"262:CA" -> "262:BS"	 [cond="[]",
		lineno=None];
	"204:NS" -> "Leaf_201:AL"	 [cond="[]",
		lineno=None];
	"302:IF" -> "303:BS"	 [cond="['last_byte']",
		label=last_byte,
		lineno=302];
	"302:IF" -> "305:BS"	 [cond="['last_byte']",
		label="!(last_byte)",
		lineno=302];
	"214:CA" -> "215:BL"	 [cond="[]",
		lineno=None];
}
