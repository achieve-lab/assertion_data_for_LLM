strict digraph "" {
	node [label="\N"];
	"171:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd18377a10>",
		fillcolor=turquoise,
		label="171:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"172:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcd1837b450>",
		fillcolor=springgreen,
		label="172:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"171:BL" -> "172:IF"	 [cond="[]",
		lineno=None];
	"159:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcd1837b810>",
		fillcolor=springgreen,
		label="159:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"160:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd1837ba90>",
		fillcolor=turquoise,
		label="160:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"159:IF" -> "160:BL"	 [cond="['last_byte']",
		label=last_byte,
		lineno=159];
	"165:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd1837b850>",
		fillcolor=turquoise,
		label="165:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"159:IF" -> "165:BL"	 [cond="['last_byte']",
		label="!(last_byte)",
		lineno=159];
	"176:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd1837bd50>",
		fillcolor=turquoise,
		label="176:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"177:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcd1837bd90>",
		fillcolor=springgreen,
		label="177:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"176:BL" -> "177:IF"	 [cond="[]",
		lineno=None];
	"Leaf_152:AL"	 [def_var="['next_state_full']",
		label="Leaf_152:AL"];
	"170:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcd1837f090>",
		fillcolor=lightcyan,
		label="170:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"170:CA" -> "171:BL"	 [cond="[]",
		lineno=None];
	"156:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcd1837f110>",
		fillcolor=lightcyan,
		label="156:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"156:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837f190>",
		fillcolor=cadetblue,
		label="156:BS
next_state_full = (write)? WRITE_1 : EMPTY;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837f190>]",
		style=filled,
		typ=BlockingSubstitution];
	"156:CA" -> "156:BS"	 [cond="[]",
		lineno=None];
	"178:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837bdd0>",
		fillcolor=cadetblue,
		label="178:BS
next_state_full = WRITE_1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837bdd0>]",
		style=filled,
		typ=BlockingSubstitution];
	"178:BS" -> "Leaf_152:AL"	 [cond="[]",
		lineno=None];
	"167:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837b8d0>",
		fillcolor=cadetblue,
		label="167:BS
next_state_full = WRITE_2;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837b8d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"167:BS" -> "Leaf_152:AL"	 [cond="[]",
		lineno=None];
	"161:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcd1837bad0>",
		fillcolor=springgreen,
		label="161:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"160:BL" -> "161:IF"	 [cond="[]",
		lineno=None];
	"153:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd1837f590>",
		fillcolor=turquoise,
		label="153:BL
next_state_full = state_full;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837f410>]",
		style=filled,
		typ=Block];
	"155:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7fcd1837f5d0>",
		fillcolor=linen,
		label="155:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"153:BL" -> "155:CS"	 [cond="[]",
		lineno=None];
	"173:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837b550>",
		fillcolor=cadetblue,
		label="173:BS
next_state_full = (write)? BYPASS : WRITE_1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837b550>]",
		style=filled,
		typ=BlockingSubstitution];
	"172:IF" -> "173:BS"	 [cond="['last_byte']",
		label=last_byte,
		lineno=172];
	"155:CS" -> "170:CA"	 [cond="['state_full']",
		label=state_full,
		lineno=155];
	"155:CS" -> "156:CA"	 [cond="['state_full']",
		label=state_full,
		lineno=155];
	"157:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcd1837f690>",
		fillcolor=lightcyan,
		label="157:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"155:CS" -> "157:CA"	 [cond="['state_full']",
		label=state_full,
		lineno=155];
	"175:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcd1837f750>",
		fillcolor=lightcyan,
		label="175:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"155:CS" -> "175:CA"	 [cond="['state_full']",
		label=state_full,
		lineno=155];
	"158:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd1837f710>",
		fillcolor=turquoise,
		label="158:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"158:BL" -> "159:IF"	 [cond="[]",
		lineno=None];
	"152:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fcd1837f810>",
		clk_sens=False,
		fillcolor=gold,
		label="152:AL",
		sens="['WRITE_1', 'state_full', 'write', 'WRITE_2', 'BYPASS', 'EMPTY']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['last_byte', 'WRITE_1', 'state_full', 'write', 'WRITE_2', 'BYPASS', 'EMPTY']"];
	"152:AL" -> "153:BL"	 [cond="[]",
		lineno=None];
	"166:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcd1837b890>",
		fillcolor=springgreen,
		label="166:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"166:IF" -> "167:BS"	 [cond="['write']",
		label=write,
		lineno=166];
	"165:BL" -> "166:IF"	 [cond="[]",
		lineno=None];
	"157:CA" -> "158:BL"	 [cond="[]",
		lineno=None];
	"177:IF" -> "178:BS"	 [cond="['last_byte', 'write']",
		label="(last_byte && !write)",
		lineno=177];
	"162:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837bb10>",
		fillcolor=cadetblue,
		label="162:BS
next_state_full = EMPTY;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837bb10>]",
		style=filled,
		typ=BlockingSubstitution];
	"162:BS" -> "Leaf_152:AL"	 [cond="[]",
		lineno=None];
	"173:BS" -> "Leaf_152:AL"	 [cond="[]",
		lineno=None];
	"156:BS" -> "Leaf_152:AL"	 [cond="[]",
		lineno=None];
	"175:CA" -> "176:BL"	 [cond="[]",
		lineno=None];
	"161:IF" -> "162:BS"	 [cond="['write']",
		label="(!write)",
		lineno=161];
}
