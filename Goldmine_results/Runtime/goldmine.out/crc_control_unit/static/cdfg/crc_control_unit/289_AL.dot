strict digraph "" {
	node [label="\N"];
	"317:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837b910>",
		fillcolor=cadetblue,
		label="317:BS
next_state_reset = (last_byte)? RESET : RESET_2;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837b910>]",
		style=filled,
		typ=BlockingSubstitution];
	"Leaf_289:AL"	 [def_var="['next_state_reset']",
		label="Leaf_289:AL"];
	"317:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"301:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd1837bbd0>",
		fillcolor=turquoise,
		label="301:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"302:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcd1837bc10>",
		fillcolor=springgreen,
		label="302:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"301:BL" -> "302:IF"	 [cond="[]",
		lineno=None];
	"322:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd1837f110>",
		fillcolor=turquoise,
		label="322:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"323:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcd1837f150>",
		fillcolor=springgreen,
		label="323:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"322:BL" -> "323:IF"	 [cond="[]",
		lineno=None];
	"293:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcd1837fa90>",
		fillcolor=lightcyan,
		label="293:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"294:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd1837fb10>",
		fillcolor=turquoise,
		label="294:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"293:CA" -> "294:BL"	 [cond="[]",
		lineno=None];
	"324:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837f310>",
		fillcolor=cadetblue,
		label="324:BS
next_state_reset = (write)? WRITE : RESET;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837f310>]",
		style=filled,
		typ=BlockingSubstitution];
	"324:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"292:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7fcd18307450>",
		fillcolor=linen,
		label="292:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"292:CS" -> "293:CA"	 [cond="['state_reset']",
		label=state_reset,
		lineno=292];
	"321:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcd18307910>",
		fillcolor=lightcyan,
		label="321:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"292:CS" -> "321:CA"	 [cond="['state_reset']",
		label=state_reset,
		lineno=292];
	"300:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcd18307510>",
		fillcolor=lightcyan,
		label="300:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"292:CS" -> "300:CA"	 [cond="['state_reset']",
		label=state_reset,
		lineno=292];
	"307:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcd1837f590>",
		fillcolor=lightcyan,
		label="307:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"292:CS" -> "307:CA"	 [cond="['state_reset']",
		label=state_reset,
		lineno=292];
	"314:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fcd18307590>",
		fillcolor=lightcyan,
		label="314:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"292:CS" -> "314:CA"	 [cond="['state_reset']",
		label=state_reset,
		lineno=292];
	"297:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcd18307110>",
		fillcolor=springgreen,
		label="297:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"294:BL" -> "297:IF"	 [cond="[]",
		lineno=None];
	"295:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcd1837fb50>",
		fillcolor=springgreen,
		label="295:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"294:BL" -> "295:IF"	 [cond="[]",
		lineno=None];
	"298:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd18307150>",
		fillcolor=cadetblue,
		label="298:BS
next_state_reset = WAIT;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd18307150>]",
		style=filled,
		typ=BlockingSubstitution];
	"297:IF" -> "298:BS"	 [cond="['reset_chain', 'has_data', 'last_byte']",
		label="(reset_chain && has_data && !last_byte)",
		lineno=297];
	"319:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd18307690>",
		fillcolor=cadetblue,
		label="319:BS
next_state_reset = (last_byte)? NO_RESET : WRITE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd18307690>]",
		style=filled,
		typ=BlockingSubstitution];
	"319:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"321:CA" -> "322:BL"	 [cond="[]",
		lineno=None];
	"300:CA" -> "301:BL"	 [cond="[]",
		lineno=None];
	"289:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fcd183079d0>",
		clk_sens=False,
		fillcolor=gold,
		label="289:AL",
		sens="['RESET', 'state_reset', 'last_byte', 'RESET_2', 'WRITE', 'write', 'NO_RESET', 'WAIT']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['RESET', 'state_reset', 'last_byte', 'RESET_2', 'state_byte', 'WRITE', 'IDLE', 'write', 'reset_chain', 'WAIT', 'NO_RESET', 'has_\
data']"];
	"290:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd18307a90>",
		fillcolor=turquoise,
		label="290:BL
next_state_reset = state_reset;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd18307ad0>]",
		style=filled,
		typ=Block];
	"289:AL" -> "290:BL"	 [cond="[]",
		lineno=None];
	"315:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd18307610>",
		fillcolor=turquoise,
		label="315:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"316:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcd18307650>",
		fillcolor=springgreen,
		label="316:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"315:BL" -> "316:IF"	 [cond="[]",
		lineno=None];
	"309:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fcd1837f650>",
		fillcolor=springgreen,
		label="309:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"310:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837f810>",
		fillcolor=cadetblue,
		label="310:BS
next_state_reset = (write)? WRITE : RESET;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837f810>]",
		style=filled,
		typ=BlockingSubstitution];
	"309:IF" -> "310:BS"	 [cond="['last_byte']",
		label=last_byte,
		lineno=309];
	"312:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837f690>",
		fillcolor=cadetblue,
		label="312:BS
next_state_reset = WAIT;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837f690>]",
		style=filled,
		typ=BlockingSubstitution];
	"309:IF" -> "312:BS"	 [cond="['last_byte']",
		label="!(last_byte)",
		lineno=309];
	"310:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"296:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837fb90>",
		fillcolor=cadetblue,
		label="296:BS
next_state_reset = RESET;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837fb90>]",
		style=filled,
		typ=BlockingSubstitution];
	"295:IF" -> "296:BS"	 [cond="['reset_chain', 'has_data', 'state_byte', 'IDLE', 'last_byte', 'reset_chain', 'has_data', 'last_byte']",
		label="(reset_chain && !has_data && (state_byte != IDLE) && !last_byte || reset_chain && has_data && last_byte)",
		lineno=295];
	"305:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837bc90>",
		fillcolor=cadetblue,
		label="305:BS
next_state_reset = (write)? WRITE : RESET;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837bc90>]",
		style=filled,
		typ=BlockingSubstitution];
	"305:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"326:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837f190>",
		fillcolor=cadetblue,
		label="326:BS
next_state_reset = RESET_2;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837f190>]",
		style=filled,
		typ=BlockingSubstitution];
	"326:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"308:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fcd1837f610>",
		fillcolor=turquoise,
		label="308:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"307:CA" -> "308:BL"	 [cond="[]",
		lineno=None];
	"314:CA" -> "315:BL"	 [cond="[]",
		lineno=None];
	"298:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"308:BL" -> "309:IF"	 [cond="[]",
		lineno=None];
	"312:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"290:BL" -> "292:CS"	 [cond="[]",
		lineno=None];
	"323:IF" -> "324:BS"	 [cond="['last_byte']",
		label=last_byte,
		lineno=323];
	"323:IF" -> "326:BS"	 [cond="['last_byte']",
		label="!(last_byte)",
		lineno=323];
	"316:IF" -> "317:BS"	 [cond="['reset_chain']",
		label=reset_chain,
		lineno=316];
	"316:IF" -> "319:BS"	 [cond="['reset_chain']",
		label="!(reset_chain)",
		lineno=316];
	"303:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837bf10>",
		fillcolor=cadetblue,
		label="303:BS
next_state_reset = NO_RESET;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fcd1837bf10>]",
		style=filled,
		typ=BlockingSubstitution];
	"303:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"296:BS" -> "Leaf_289:AL"	 [cond="[]",
		lineno=None];
	"302:IF" -> "305:BS"	 [cond="['last_byte']",
		label="!(last_byte)",
		lineno=302];
	"302:IF" -> "303:BS"	 [cond="['last_byte']",
		label=last_byte,
		lineno=302];
}
