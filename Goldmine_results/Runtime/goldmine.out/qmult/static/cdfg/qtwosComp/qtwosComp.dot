strict digraph "compose( ,  )" {
	node [label="\N"];
	"70:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f2a7ba262d0>",
		clk_sens=False,
		fillcolor=gold,
		label="70:AL",
		sens="['flip']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['flip']"];
	"71:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f2a7de4ff10>",
		fillcolor=turquoise,
		label="71:BL
out <= flip + 1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f2a7bd49a90>]",
		style=filled,
		typ=Block];
	"70:AL" -> "71:BL"	 [cond="[]",
		lineno=None];
	"60:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f2a7ba01c90>",
		clk_sens=False,
		fillcolor=gold,
		label="60:AL",
		sens="['a']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['a']"];
	"61:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f2a7ba01f90>",
		fillcolor=turquoise,
		label="61:BL
data <= a;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f2a7ba01ed0>]",
		style=filled,
		typ=Block];
	"60:AL" -> "61:BL"	 [cond="[]",
		lineno=None];
	"Leaf_60:AL"	 [def_var="['data']",
		label="Leaf_60:AL"];
	"61:BL" -> "Leaf_60:AL"	 [cond="[]",
		lineno=None];
	"58:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f2a7b9f8050>",
		def_var="['b']",
		fillcolor=deepskyblue,
		label="58:AS
b = out;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['out']"];
	"Leaf_70:AL"	 [def_var="['out']",
		label="Leaf_70:AL"];
	"Leaf_70:AL" -> "58:AS";
	"66:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f2a7b9fc2d0>",
		fillcolor=turquoise,
		label="66:BL
flip <= ~a;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f2a7b9fc3d0>]",
		style=filled,
		typ=Block];
	"Leaf_65:AL"	 [def_var="['flip']",
		label="Leaf_65:AL"];
	"66:BL" -> "Leaf_65:AL"	 [cond="[]",
		lineno=None];
	"71:BL" -> "Leaf_70:AL"	 [cond="[]",
		lineno=None];
	"65:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f2a7b9fc1d0>",
		clk_sens=False,
		fillcolor=gold,
		label="65:AL",
		sens="['data']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['a']"];
	"65:AL" -> "66:BL"	 [cond="[]",
		lineno=None];
	"Leaf_65:AL" -> "70:AL";
}
