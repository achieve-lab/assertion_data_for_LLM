digraph "" {
	rd_err -> bus_out_mux	 [weight=1.0];
	col_bus -> bus_out_mux	 [weight=1.0];
	ENABLE -> first_block_clear	 [weight=1.0];
	ENABLE -> cnt_en	 [weight=4.0];
	ENABLE -> enable_clear	 [weight=1.0];
	ENABLE -> access_permission	 [weight=1.0];
	ENABLE -> start_core	 [weight=1.0];
	ENABLE -> first_block_set	 [weight=1.0];
	write_completed -> next_state	 [weight=1.0];
	CTR -> aes_cr	 [weight=2.0];
	errc -> rd_err	 [weight=1.0];
	errc -> wr_err	 [weight=1.0];
	write_en -> wr_err_en	 [weight=1.0];
	write_en -> cnt_en	 [weight=1.0];
	write_en -> aes_cr_wr_en	 [weight=1.0];
	write_en -> col_wr_en	 [weight=1.0];
	write_en -> iv_en	 [weight=1.0];
	write_en -> key_en	 [weight=1.0];
	first_block_clear -> first_block	 [weight=1.0];
	PSEL -> write_en	 [weight=1.0];
	PSEL -> read_en	 [weight=1.0];
	mode_in -> aes_cr	 [weight=3.0];
	ccfc -> ccf	 [weight=1.0];
	ccfc -> bus_out_mux	 [weight=1.0];
	WAIT -> next_state	 [weight=1.0];
	ccf -> bus_out_mux	 [weight=2.0];
	OUTPUT -> col_rd_en	 [weight=1.0];
	OUTPUT -> dma_req_rd	 [weight=1.0];
	OUTPUT -> next_state	 [weight=2.0];
	OUTPUT -> rd_err_en	 [weight=1.0];
	PRESETn -> rd_err	 [weight=2.0];
	PRESETn -> ccf	 [weight=2.0];
	PRESETn -> first_block	 [weight=3.0];
	PRESETn -> cnt	 [weight=3.0];
	PRESETn -> wr_err	 [weight=3.0];
	PRESETn -> aes_cr	 [weight=11.0];
	PRESETn -> state	 [weight=3.0];
	PRESETn -> dma_req	 [weight=2.0];
	dma_in_en -> dma_req_wr	 [weight=1.0];
	DISABLE -> first_block_clear	 [weight=1.0];
	DISABLE -> cnt_en	 [weight=1.0];
	DISABLE -> enable_clear	 [weight=1.0];
	DISABLE -> access_permission	 [weight=1.0];
	DISABLE -> start_core	 [weight=1.0];
	DISABLE -> first_block_set	 [weight=1.0];
	wr_err_en -> wr_err	 [weight=2.0];
	wr_err_en -> int_err	 [weight=1.0];
	cnt_en -> cnt	 [weight=1.0];
	cnt_en -> next_state	 [weight=2.0];
	AES_DOUTR -> cnt_en	 [weight=1.0];
	AES_DOUTR -> col_rd_en	 [weight=1.0];
	AES_DOUTR -> bus_out_mux	 [weight=1.0];
	AES_DOUTR -> rd_err_en	 [weight=1.0];
	KEY_DERIVATION -> key_deriv	 [weight=1.0];
	cnt -> write_completed	 [weight=1.0];
	cnt -> col_addr	 [weight=1.0];
	cnt -> cnt	 [weight=1.0];
	cnt -> read_completed	 [weight=1.0];
	cnt -> dma_req_rd	 [weight=1.0];
	cnt -> dma_req_wr	 [weight=1.0];
	cnt -> dma_req	 [weight=1.0];
	START -> cnt	 [weight=2.0];
	START -> next_state	 [weight=2.0];
	AES_SR_RESET -> wr_err	 [weight=1.0];
	key_deriv -> cnt_en	 [weight=1.0];
	key_deriv -> enable_clear	 [weight=1.0];
	key_deriv -> next_state	 [weight=2.0];
	ccf_ie -> int_ccf	 [weight=1.0];
	wr_err -> bus_out_mux	 [weight=1.0];
	aes_cr -> chmod	 [weight=1.0];
	aes_cr -> dma_in_en	 [weight=1.0];
	aes_cr -> data_type	 [weight=1.0];
	aes_cr -> ccf_ie	 [weight=1.0];
	aes_cr -> mode	 [weight=1.0];
	aes_cr -> enable	 [weight=1.0];
	aes_cr -> err_ie	 [weight=1.0];
	aes_cr -> dma_out_en	 [weight=1.0];
	aes_cr -> bus_out_mux	 [weight=1.0];
	state -> first_block_clear	 [weight=1.0];
	state -> wr_err_en	 [weight=1.0];
	state -> cnt_en	 [weight=4.0];
	state -> cnt	 [weight=2.0];
	state -> enable_clear	 [weight=1.0];
	state -> col_rd_en	 [weight=1.0];
	state -> col_wr_en	 [weight=1.0];
	state -> dma_req_rd	 [weight=1.0];
	state -> access_permission	 [weight=1.0];
	state -> dma_req_wr	 [weight=1.0];
	state -> next_state	 [weight=6.0];
	state -> start_core	 [weight=1.0];
	state -> rd_err_en	 [weight=1.0];
	state -> first_block_set	 [weight=1.0];
	enable_clear -> aes_cr	 [weight=2.0];
	read_completed -> next_state	 [weight=1.0];
	AES_DINR -> wr_err_en	 [weight=1.0];
	AES_DINR -> cnt_en	 [weight=1.0];
	AES_DINR -> col_wr_en	 [weight=1.0];
	aes_cr_wr_en -> rd_err	 [weight=1.0];
	aes_cr_wr_en -> ccf	 [weight=1.0];
	aes_cr_wr_en -> wr_err	 [weight=1.0];
	aes_cr_wr_en -> aes_cr	 [weight=9.0];
	aes_cr_wr_en -> bus_out_mux	 [weight=1.0];
	iv_bus -> bus_out_mux	 [weight=1.0];
	chmod_in -> aes_cr	 [weight=2.0];
	mode -> key_deriv	 [weight=1.0];
	DECRYPTION -> aes_cr	 [weight=1.0];
	enable -> cnt_en	 [weight=1.0];
	enable -> cnt	 [weight=2.0];
	enable -> state	 [weight=2.0];
	enable -> dma_req_rd	 [weight=1.0];
	enable -> disable_core	 [weight=1.0];
	enable -> bus_out_mux	 [weight=2.0];
	enable -> dma_req_wr	 [weight=1.0];
	enable -> next_state	 [weight=1.0];
	PWDATA -> errc	 [weight=1.0];
	PWDATA -> mode_in	 [weight=1.0];
	PWDATA -> ccfc	 [weight=1.0];
	PWDATA -> aes_cr	 [weight=6.0];
	PWDATA -> chmod_in	 [weight=1.0];
	err_ie -> int_err	 [weight=1.0];
	access_permission -> rd_err	 [weight=1.0];
	access_permission -> wr_err	 [weight=1.0];
	access_permission -> aes_cr	 [weight=8.0];
	access_permission -> key_en	 [weight=1.0];
	access_permission -> iv_sel	 [weight=1.0];
	access_permission -> key_sel	 [weight=1.0];
	dma_out_en -> dma_req_rd	 [weight=1.0];
	AES_CR -> aes_cr_wr_en	 [weight=1.0];
	PENABLE -> write_en	 [weight=1.0];
	PENABLE -> cnt_en	 [weight=1.0];
	PENABLE -> bus_out_mux	 [weight=1.0];
	ccf_set -> ccf	 [weight=2.0];
	ccf_set -> cnt_en	 [weight=1.0];
	ccf_set -> enable_clear	 [weight=1.0];
	ccf_set -> bus_out_mux	 [weight=2.0];
	ccf_set -> next_state	 [weight=1.0];
	ccf_set -> int_ccf	 [weight=1.0];
	read_en -> cnt_en	 [weight=1.0];
	read_en -> col_rd_en	 [weight=1.0];
	read_en -> bus_out	 [weight=1.0];
	read_en -> rd_err_en	 [weight=1.0];
	bus_out_mux -> bus_out	 [weight=1.0];
	INPUT -> wr_err_en	 [weight=1.0];
	INPUT -> col_wr_en	 [weight=1.0];
	INPUT -> dma_req_wr	 [weight=1.0];
	INPUT -> next_state	 [weight=3.0];
	next_state -> state	 [weight=1.0];
	bus_out -> PRDATA	 [weight=1.0];
	PWRITE -> write_en	 [weight=1.0];
	PWRITE -> read_en	 [weight=1.0];
	PWRITE -> bus_out_mux	 [weight=1.0];
	key_bus -> bus_out_mux	 [weight=1.0];
	rd_err_en -> rd_err	 [weight=2.0];
	rd_err_en -> int_err	 [weight=1.0];
	iv_sel -> iv_en	 [weight=1.0];
	AES_CR_RESET -> aes_cr	 [weight=1.0];
	DECRYP_W_DERIV -> aes_cr	 [weight=2.0];
	PADDR -> wr_err_en	 [weight=1.0];
	PADDR -> cnt_en	 [weight=2.0];
	PADDR -> aes_cr_wr_en	 [weight=1.0];
	PADDR -> col_rd_en	 [weight=1.0];
	PADDR -> col_wr_en	 [weight=1.0];
	PADDR -> bus_out_mux	 [weight=6.0];
	PADDR -> key_en	 [weight=1.0];
	PADDR -> rd_err_en	 [weight=1.0];
	PADDR -> iv_sel	 [weight=1.0];
	PADDR -> key_sel	 [weight=1.0];
	first_block_set -> first_block	 [weight=2.0];
	IDLE -> wr_err_en	 [weight=1.0];
	IDLE -> state	 [weight=2.0];
	IDLE -> dma_req_wr	 [weight=1.0];
	IDLE -> next_state	 [weight=1.0];
	IDLE -> rd_err_en	 [weight=1.0];
	dma_req -> dma_req_rd	 [weight=1.0];
	dma_req -> dma_req_wr	 [weight=1.0];
}
