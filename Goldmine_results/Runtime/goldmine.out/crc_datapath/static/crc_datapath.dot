strict digraph "()" {
	bypass_size -> size_out	 [weight=1.0];
	crc_data_in -> "CRC_UNIT.data_in"	 [weight=1.0];
	byte_sel -> crc_data_in	 [weight=5.0];
	byte0_mux_out -> crc_data_in	 [weight=1.0];
	"REV_IN.i" -> "REV_IN.data_reversed"	 [weight=4.0];
	set_crc_init_sel -> crc_init_sel_ff	 [weight=1.0];
	crc_init_ff -> crc_init_out	 [weight=1.0];
	crc_init_ff -> crc_init_mux	 [weight=1.0];
	crc_poly_size_32 -> crc_poly_size_in	 [weight=1.0];
	buffer_en -> bf_size_ff	 [weight=2.0];
	buffer_en -> buffer_ff	 [weight=1.0];
	"REV_IN.rev_type" -> "REV_IN.data_out"	 [weight=1.0];
	rev_in_type -> "REV_IN.rev_type"	 [weight=1.0];
	rev_out_type -> crc_out	 [weight=1.0];
	"CRC_UNIT.CRC_COMB.feedback" -> "CRC_UNIT.CRC_COMB.crc_out"	 [weight=1.0];
	"CRC_UNIT.poly_mux" -> "CRC_UNIT.CRC_COMB.crc_poly"	 [weight=1.0];
	byte2_in -> crc_data_in	 [weight=1.0];
	"CRC_UNIT.FRAME_SIZE" -> "CRC_UNIT.CRC_COMB.data_in"	 [weight=1.0];
	crc_unit_out -> crc_out_ff	 [weight=1.0];
	crc_poly_en -> crc_poly_ff	 [weight=1.0];
	bf_size_ff -> size_out	 [weight=1.0];
	bf_size_ff -> size_ff	 [weight=1.0];
	"CRC_UNIT.CRC_COMB.data_in" -> "CRC_UNIT.CRC_COMB.feedback"	 [weight=1.0];
	"CRC_UNIT.data_in" -> "CRC_UNIT.CRC_COMB.data_in"	 [weight=1.0];
	size_in -> bf_size_ff	 [weight=1.0];
	RESET_CRC_OUT -> crc_out_ff	 [weight=1.0];
	"REV_IN.data_in" -> "REV_IN.data_reversed"	 [weight=3.0];
	"CRC_UNIT.CRC_COMB.MASK_REVERSED" -> "CRC_UNIT.CRC_COMB.crc_in_masked"	 [weight=1.0];
	byte1_in -> crc_data_in	 [weight=1.0];
	clear_crc_init_sel -> crc_init_sel_ff	 [weight=2.0];
	crc_poly_size_8 -> crc_poly_size_in	 [weight=1.0];
	crc_poly_size_7 -> crc_poly_size_in	 [weight=1.0];
	crc_idr_en -> crc_idr_ff	 [weight=1.0];
	crc_out_rev -> crc_out	 [weight=1.0];
	byte3_in -> crc_data_in	 [weight=1.0];
	bus_reversed -> buffer_ff	 [weight=1.0];
	RESET_CRC_IDR -> crc_idr_ff	 [weight=1.0];
	crc_out_en -> crc_out_ff	 [weight=1.0];
	crc_init_mux -> "CRC_UNIT.crc_init"	 [weight=1.0];
	"CRC_UNIT.CRC_COMB.crc_poly_size" -> "CRC_UNIT.CRC_COMB.crc_poly_size_reversed"	 [weight=7.0];
	crc_idr_ff -> crc_idr_out	 [weight=1.0];
	"CRC_UNIT.crc_init_sel" -> "CRC_UNIT.crc_init_justified"	 [weight=1.0];
	byte_ff -> byte2_in	 [weight=1.0];
	byte_ff -> byte1_in	 [weight=1.0];
	byte_ff -> byte3_in	 [weight=1.0];
	byte_ff -> byte0_in	 [weight=1.0];
	RESET_BF_SIZE -> bf_size_ff	 [weight=2.0];
	"CRC_UNIT.CRC_COMB.crc_poly_size_reversed" -> "CRC_UNIT.CRC_COMB.crc_in_masked"	 [weight=1.0];
	"CRC_UNIT.sel_out" -> "CRC_UNIT.crc_out"	 [weight=1.0];
	crc_poly_size -> crc_poly_size_32	 [weight=1.0];
	crc_poly_size -> crc_poly_size_8	 [weight=1.0];
	crc_poly_size -> crc_poly_size_7	 [weight=1.0];
	crc_poly_size -> crc_poly_size_16	 [weight=1.0];
	"CRC_UNIT.CRC_COMB.CRC_SIZE" -> "CRC_UNIT.CRC_COMB.MASK_REVERSED"	 [weight=7.0];
	"REV_IN.data_reversed" -> "REV_IN.data_out"	 [weight=1.0];
	crc_init_sel_ff -> crc_init_mux	 [weight=1.0];
	"CRC_UNIT.CRC_COMB.crc_in_masked" -> "CRC_UNIT.CRC_COMB.crc_out"	 [weight=1.0];
	"CRC_UNIT.CRC_COMB.crc_in" -> "CRC_UNIT.CRC_COMB.feedback"	 [weight=1.0];
	"CRC_UNIT.CRC_COMB.crc_in" -> "CRC_UNIT.CRC_COMB.crc_in_masked"	 [weight=1.0];
	rst_n -> crc_init_ff	 [weight=3.0];
	rst_n -> bf_size_ff	 [weight=3.0];
	rst_n -> crc_idr_ff	 [weight=2.0];
	rst_n -> byte_ff	 [weight=2.0];
	rst_n -> crc_init_sel_ff	 [weight=3.0];
	rst_n -> size_ff	 [weight=2.0];
	rst_n -> crc_poly_ff	 [weight=2.0];
	rst_n -> buffer_ff	 [weight=2.0];
	rst_n -> crc_out_ff	 [weight=2.0];
	crc_init_en -> crc_init_ff	 [weight=2.0];
	size_ff -> size_out	 [weight=1.0];
	"CRC_UNIT.crc_init_justified" -> "CRC_UNIT.crc_comb_out"	 [weight=1.0];
	"CRC_UNIT.crc_out" -> crc_unit_out	 [weight=1.0];
	byte0_in -> byte0_mux_out	 [weight=1.0];
	crc_poly_ff -> "CRC_UNIT.crc_poly"	 [weight=1.0];
	crc_poly_ff -> crc_poly_out	 [weight=1.0];
	"REV_IN.data_out" -> bus_reversed	 [weight=1.0];
	buffer_rst -> crc_init_ff	 [weight=1.0];
	buffer_rst -> bf_size_ff	 [weight=1.0];
	crc_poly_size_in -> "CRC_UNIT.crc_poly_size"	 [weight=1.0];
	"CRC_UNIT.CRC_COMB.crc_out" -> "CRC_UNIT.i"	 [weight=1.0];
	"CRC_UNIT.CRC_COMB.crc_out" -> "CRC_UNIT.crc_comb_out"	 [weight=1.0];
	RESET_CRC_POLY -> crc_poly_ff	 [weight=1.0];
	"CRC_UNIT.CRC_SIZE" -> "CRC_UNIT.CRC_COMB.crc_poly_size"	 [weight=1.0];
	buffer_ff -> byte0_mux_out	 [weight=1.0];
	buffer_ff -> byte_ff	 [weight=1.0];
	bypass_byte0 -> byte0_mux_out	 [weight=1.0];
	"CRC_UNIT.poly_sel" -> "CRC_UNIT.poly_mux"	 [weight=1.0];
	"CRC_UNIT.m" -> "CRC_UNIT.crc_init_sel"	 [weight=1.0];
	"CRC_UNIT.m" -> "CRC_UNIT.crc_init_justified"	 [weight=1.0];
	"CRC_UNIT.l" -> "CRC_UNIT.sel_out"	 [weight=1.0];
	"CRC_UNIT.l" -> "CRC_UNIT.crc_out"	 [weight=1.0];
	"CRC_UNIT.l" -> "CRC_UNIT.crc_poly_size_reversed"	 [weight=1.0];
	"CRC_UNIT.k" -> "CRC_UNIT.poly_mux"	 [weight=1.0];
	"CRC_UNIT.k" -> "CRC_UNIT.poly_sel"	 [weight=1.0];
	"CRC_UNIT.crc_poly_size" -> "CRC_UNIT.CRC_COMB.crc_poly_size"	 [weight=1.0];
	"CRC_UNIT.crc_poly_size" -> "CRC_UNIT.crc_init_sel"	 [weight=1.0];
	"CRC_UNIT.crc_poly_size" -> "CRC_UNIT.poly_sel"	 [weight=1.0];
	"CRC_UNIT.crc_poly_size" -> "CRC_UNIT.crc_poly_size_reversed"	 [weight=1.0];
	RESET_BYTE -> byte_ff	 [weight=1.0];
	crc_poly_size_16 -> crc_poly_size_in	 [weight=1.0];
	"CRC_UNIT.crc_poly_size_reversed" -> "CRC_UNIT.sel_out"	 [weight=1.0];
	"CRC_UNIT.i" -> "CRC_UNIT.CRC_COMB.data_in"	 [weight=1.0];
	"CRC_UNIT.i" -> "CRC_UNIT.CRC_COMB.crc_in"	 [weight=1.0];
	RESET_CRC_INIT_SEL -> crc_init_sel_ff	 [weight=1.0];
	crc_out_ff -> crc_out	 [weight=1.0];
	crc_out_ff -> crc_out_rev	 [weight=32.0];
	crc_out_ff -> crc_init_mux	 [weight=1.0];
	"REV_IN.type" -> "REV_IN.data_reversed"	 [weight=5.0];
	"CRC_UNIT.crc_poly" -> "CRC_UNIT.poly_mux"	 [weight=2.0];
	RESET_CRC_INIT -> crc_init_ff	 [weight=2.0];
	RESET_BUFFER -> buffer_ff	 [weight=1.0];
	byte_en -> byte_ff	 [weight=1.0];
	byte_en -> size_ff	 [weight=1.0];
	"CRC_UNIT.crc_comb_out" -> "CRC_UNIT.CRC_COMB.crc_in"	 [weight=1.0];
	"CRC_UNIT.crc_comb_out" -> "CRC_UNIT.crc_out"	 [weight=1.0];
	RESET_SIZE -> size_ff	 [weight=1.0];
	bus_wr -> crc_init_ff	 [weight=1.0];
	bus_wr -> "REV_IN.data_in"	 [weight=1.0];
	bus_wr -> crc_idr_ff	 [weight=1.0];
	bus_wr -> crc_poly_ff	 [weight=1.0];
	"CRC_UNIT.crc_init" -> "CRC_UNIT.crc_init_justified"	 [weight=1.0];
	"CRC_UNIT.CRC_COMB.crc_poly" -> "CRC_UNIT.CRC_COMB.feedback"	 [weight=1.0];
}
