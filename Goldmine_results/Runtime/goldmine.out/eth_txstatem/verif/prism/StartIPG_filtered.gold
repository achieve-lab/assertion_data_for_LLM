property a2;
@(posedge clk) (StartIPG == 1) |=> (StartIPG == 0);
endproperty
assert_a2: assert property(a2);

property a3;
@(posedge clk) (StateDefer == 0) |-> (StartIPG == 0);
endproperty
assert_a3: assert property(a3);

property a6;
@(posedge clk) (ExcessiveDefer == 0 & CarrierSense == 0 & StateDefer == 1) |-> (StartIPG == 1);
endproperty
assert_a6: assert property(a6);

property a1;
@(posedge clk) (CarrierSense == 1) |-> (StartIPG == 0);
endproperty
assert_a1: assert property(a1);

property a0;
@(posedge clk) (ExcessiveDefer == 1) |-> (StartIPG == 0);
endproperty
assert_a0: assert property(a0);

property a5;
@(posedge clk) (Rule1 == 0) ##1 (ExcessiveDefer == 0 & CarrierSense == 0) |-> (StartIPG == 1);
endproperty
assert_a5: assert property(a5);

property a4;
@(posedge clk) (StateIdle == 1) ##1 (ExcessiveDefer == 0 & CarrierSense == 0) |-> (StartIPG == 1);
endproperty
assert_a4: assert property(a4);

