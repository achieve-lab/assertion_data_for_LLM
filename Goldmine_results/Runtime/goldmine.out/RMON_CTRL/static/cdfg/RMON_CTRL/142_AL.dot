strict digraph "" {
	node [label="\N"];
	"164:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f7ac5192290>",
		fillcolor=lightcyan,
		label="164:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"164:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac51924d0>",
		fillcolor=cadetblue,
		label="164:BS
NextState = StateMAC0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac51924d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"164:CA" -> "164:BS"	 [cond="[]",
		lineno=None];
	"151:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5192650>",
		fillcolor=cadetblue,
		label="151:BS
NextState = StateMAC1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5192650>]",
		style=filled,
		typ=BlockingSubstitution];
	"Leaf_142:AL"	 [def_var="['NextState']",
		label="Leaf_142:AL"];
	"151:BS" -> "Leaf_142:AL"	 [cond="[]",
		lineno=None];
	"155:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f7ac51927d0>",
		fillcolor=springgreen,
		label="155:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"157:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f7ac5192850>",
		fillcolor=springgreen,
		label="157:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"155:IF" -> "157:IF"	 [cond="['Reg_apply_1', 'CPU_rd_apply_reg']",
		label="!((!Reg_apply_1 && CPU_rd_apply_reg))",
		lineno=155];
	"156:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5192c10>",
		fillcolor=cadetblue,
		label="156:BS
NextState = StateCPU;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5192c10>]",
		style=filled,
		typ=BlockingSubstitution];
	"155:IF" -> "156:BS"	 [cond="['Reg_apply_1', 'CPU_rd_apply_reg']",
		label="(!Reg_apply_1 && CPU_rd_apply_reg)",
		lineno=155];
	"161:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f7ac5197a50>",
		fillcolor=lightcyan,
		label="161:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"162:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f7ac5197ad0>",
		fillcolor=springgreen,
		label="162:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"161:CA" -> "162:IF"	 [cond="[]",
		lineno=None];
	"165:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f7ac5197d10>",
		fillcolor=lightcyan,
		label="165:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"165:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5197d90>",
		fillcolor=cadetblue,
		label="165:BS
NextState = StateMAC1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5197d90>]",
		style=filled,
		typ=BlockingSubstitution];
	"165:CA" -> "165:BS"	 [cond="[]",
		lineno=None];
	"146:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7f7ac5197390>",
		fillcolor=linen,
		label="146:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"146:CS" -> "161:CA"	 [cond="['CurrentState']",
		label=CurrentState,
		lineno=146];
	"147:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f7ac5197450>",
		fillcolor=lightcyan,
		label="147:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"146:CS" -> "147:CA"	 [cond="['CurrentState']",
		label=CurrentState,
		lineno=146];
	"154:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f7ac51979d0>",
		fillcolor=lightcyan,
		label="154:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"146:CS" -> "154:CA"	 [cond="['CurrentState']",
		label=CurrentState,
		lineno=146];
	"171:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f7ac51980d0>",
		fillcolor=lightcyan,
		label="171:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"146:CS" -> "171:CA"	 [cond="['CurrentState']",
		label=CurrentState,
		lineno=146];
	"148:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f7ac51974d0>",
		fillcolor=springgreen,
		label="148:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"147:CA" -> "148:IF"	 [cond="[]",
		lineno=None];
	"163:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7f7ac5197c90>",
		fillcolor=linen,
		label="163:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"162:IF" -> "163:CS"	 [cond="['StepCounter']",
		label="(StepCounter == 3)",
		lineno=162];
	"169:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5197b10>",
		fillcolor=cadetblue,
		label="169:BS
NextState = CurrentState;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5197b10>]",
		style=filled,
		typ=BlockingSubstitution];
	"162:IF" -> "169:BS"	 [cond="['StepCounter']",
		label="!((StepCounter == 3))",
		lineno=162];
	"153:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5197550>",
		fillcolor=cadetblue,
		label="153:BS
NextState = CurrentState;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5197550>]",
		style=filled,
		typ=BlockingSubstitution];
	"153:BS" -> "Leaf_142:AL"	 [cond="[]",
		lineno=None];
	"160:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5192890>",
		fillcolor=cadetblue,
		label="160:BS
NextState = CurrentState;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5192890>]",
		style=filled,
		typ=BlockingSubstitution];
	"160:BS" -> "Leaf_142:AL"	 [cond="[]",
		lineno=None];
	"154:CA" -> "155:IF"	 [cond="[]",
		lineno=None];
	"166:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f7ac5197ed0>",
		fillcolor=lightcyan,
		label="166:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"166:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5197f10>",
		fillcolor=cadetblue,
		label="166:BS
NextState = StateMAC0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5197f10>]",
		style=filled,
		typ=BlockingSubstitution];
	"166:CA" -> "166:BS"	 [cond="[]",
		lineno=None];
	"157:IF" -> "160:BS"	 [cond="['Reg_apply_1']",
		label="!((!Reg_apply_1))",
		lineno=157];
	"158:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5192a50>",
		fillcolor=cadetblue,
		label="158:BS
NextState = StateMAC0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5192a50>]",
		style=filled,
		typ=BlockingSubstitution];
	"157:IF" -> "158:BS"	 [cond="['Reg_apply_1']",
		label="(!Reg_apply_1)",
		lineno=157];
	"172:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5198110>",
		fillcolor=cadetblue,
		label="172:BS
NextState = StateMAC0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5198110>]",
		style=filled,
		typ=BlockingSubstitution];
	"171:CA" -> "172:BS"	 [cond="[]",
		lineno=None];
	"163:CS" -> "164:CA"	 [cond="['CurrentState_reg']",
		label=CurrentState_reg,
		lineno=163];
	"163:CS" -> "165:CA"	 [cond="['CurrentState_reg']",
		label=CurrentState_reg,
		lineno=163];
	"163:CS" -> "166:CA"	 [cond="['CurrentState_reg']",
		label=CurrentState_reg,
		lineno=163];
	"165:BS" -> "Leaf_142:AL"	 [cond="[]",
		lineno=None];
	"149:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5197750>",
		fillcolor=cadetblue,
		label="149:BS
NextState = StateCPU;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f7ac5197750>]",
		style=filled,
		typ=BlockingSubstitution];
	"148:IF" -> "149:BS"	 [cond="['Reg_apply_0', 'CPU_rd_apply_reg']",
		label="(!Reg_apply_0 && CPU_rd_apply_reg)",
		lineno=148];
	"150:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f7ac5197510>",
		fillcolor=springgreen,
		label="150:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"148:IF" -> "150:IF"	 [cond="['Reg_apply_0', 'CPU_rd_apply_reg']",
		label="!((!Reg_apply_0 && CPU_rd_apply_reg))",
		lineno=148];
	"164:BS" -> "Leaf_142:AL"	 [cond="[]",
		lineno=None];
	"149:BS" -> "Leaf_142:AL"	 [cond="[]",
		lineno=None];
	"158:BS" -> "Leaf_142:AL"	 [cond="[]",
		lineno=None];
	"166:BS" -> "Leaf_142:AL"	 [cond="[]",
		lineno=None];
	"169:BS" -> "Leaf_142:AL"	 [cond="[]",
		lineno=None];
	"142:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f7ac5192f10>",
		clk_sens=False,
		fillcolor=gold,
		label="142:AL",
		sens="['CurrentState', 'CPU_rd_apply_reg', 'Reg_apply_0', 'CurrentState_reg', 'Reg_apply_1', 'StepCounter']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['CPU_rd_apply_reg', 'CurrentState_reg', 'Reg_apply_1', 'Reg_apply_0', 'StepCounter', 'CurrentState']"];
	"142:AL" -> "146:CS"	 [cond="[]",
		lineno=None];
	"172:BS" -> "Leaf_142:AL"	 [cond="[]",
		lineno=None];
	"156:BS" -> "Leaf_142:AL"	 [cond="[]",
		lineno=None];
	"150:IF" -> "151:BS"	 [cond="['Reg_apply_0']",
		label="(!Reg_apply_0)",
		lineno=150];
	"150:IF" -> "153:BS"	 [cond="['Reg_apply_0']",
		label="!((!Reg_apply_0))",
		lineno=150];
}
