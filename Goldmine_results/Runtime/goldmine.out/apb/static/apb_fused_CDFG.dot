strict digraph "compose( ,  )" {
	node [label="\N"];
	"158:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fdc90918790>",
		fillcolor=turquoise,
		label="158:BL
INTERNAL_I2C_REGISTER_TIMEOUT <= PWDATA[13:0];",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fdc90918990>]",
		style=filled,
		typ=Block];
	"Leaf_141:AL"	 [def_var="['INTERNAL_I2C_REGISTER_TIMEOUT', 'INTERNAL_I2C_REGISTER_CONFIG']",
		label="Leaf_141:AL"];
	"158:BL" -> "Leaf_141:AL"	 [cond="[]",
		lineno=None];
	"157:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fdc90918a10>",
		fillcolor=springgreen,
		label="157:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"157:IF" -> "158:BL"	 [cond="['PADDR', 'PSELx', 'PWRITE', 'PREADY']",
		label="((PADDR == 32'd12) && (PSELx == 1'b1) && (PWRITE == 1'b1) && (PREADY == 1'b1))",
		lineno=157];
	"162:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fdc90918a50>",
		fillcolor=turquoise,
		label="162:BL
INTERNAL_I2C_REGISTER_CONFIG <= INTERNAL_I2C_REGISTER_CONFIG;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fdc90918b90>]",
		style=filled,
		typ=Block];
	"157:IF" -> "162:BL"	 [cond="['PADDR', 'PSELx', 'PWRITE', 'PREADY']",
		label="!(((PADDR == 32'd12) && (PSELx == 1'b1) && (PWRITE == 1'b1) && (PREADY == 1'b1)))",
		lineno=157];
	"162:BL" -> "Leaf_141:AL"	 [cond="[]",
		lineno=None];
	"123:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fdc9050fc50>",
		def_var="['PREADY']",
		fillcolor=deepskyblue,
		label="123:AS
PREADY = (((WR_ENA == 1'b1) | (RD_ENA == 1'b1) | (PADDR == 32'd8) | (PADDR == 32'd12)) & ((PENABLE == 1'b1) & (PSELx == 1'\
b1)))? 1'b1 : 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['WR_ENA', 'RD_ENA', 'PADDR', 'PADDR', 'PENABLE', 'PSELx']"];
	"141:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fdc905437d0>",
		clk_sens=True,
		fillcolor=gold,
		label="141:AL",
		sens="['PCLK']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['PWDATA', 'PWRITE', 'PSELx', 'PREADY', 'PADDR', 'PRESETn', 'INTERNAL_I2C_REGISTER_CONFIG']"];
	"123:AS" -> "141:AL";
	"129:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fdc90543250>",
		def_var="['PRDATA']",
		fillcolor=deepskyblue,
		label="129:AS
PRDATA = (PADDR == 32'd4)? READ_DATA_ON_RX : READ_DATA_ON_RX;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['PADDR', 'READ_DATA_ON_RX', 'READ_DATA_ON_RX']"];
	"145:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fdc905439d0>",
		fillcolor=turquoise,
		label="145:BL
INTERNAL_I2C_REGISTER_CONFIG <= 14'd0;
INTERNAL_I2C_REGISTER_TIMEOUT <= 14'd0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fdc90543a10>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fdc90543b50>]",
		style=filled,
		typ=Block];
	"145:BL" -> "Leaf_141:AL"	 [cond="[]",
		lineno=None];
	"120:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fdc9050f510>",
		def_var="['RD_ENA']",
		fillcolor=deepskyblue,
		label="120:AS
RD_ENA = ((PWRITE == 1'b0) & (PENABLE == 1'b1) & (PADDR == 32'd4) & (PSELx == 1'b1))? 1'b1 : 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['PWRITE', 'PENABLE', 'PADDR', 'PSELx']"];
	"120:AS" -> "123:AS";
	"138:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fdc90543650>",
		def_var="['INT_RX']",
		fillcolor=deepskyblue,
		label="138:AS
INT_RX = RX_EMPTY;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['RX_EMPTY']"];
	"Leaf_141:AL" -> "141:AL";
	"117:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fdc92d776d0>",
		def_var="['WR_ENA']",
		fillcolor=deepskyblue,
		label="117:AS
WR_ENA = ((PWRITE == 1'b1) & (PENABLE == 1'b1) & (PADDR == 32'd0) & (PSELx == 1'b1))? 1'b1 : 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['PWRITE', 'PENABLE', 'PADDR', 'PSELx']"];
	"117:AS" -> "123:AS";
	"142:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fdc90543810>",
		fillcolor=turquoise,
		label="142:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"141:AL" -> "142:BL"	 [cond="[]",
		lineno=None];
	"154:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fdc90918090>",
		fillcolor=turquoise,
		label="154:BL
INTERNAL_I2C_REGISTER_CONFIG <= PWDATA[13:0];",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fdc90918290>]",
		style=filled,
		typ=Block];
	"154:BL" -> "Leaf_141:AL"	 [cond="[]",
		lineno=None];
	"153:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fdc90918350>",
		fillcolor=springgreen,
		label="153:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"153:IF" -> "157:IF"	 [cond="['PADDR', 'PSELx', 'PWRITE', 'PREADY']",
		label="!(((PADDR == 32'd8) && (PSELx == 1'b1) && (PWRITE == 1'b1) && (PREADY == 1'b1)))",
		lineno=153];
	"153:IF" -> "154:BL"	 [cond="['PADDR', 'PSELx', 'PWRITE', 'PREADY']",
		label="((PADDR == 32'd8) && (PSELx == 1'b1) && (PWRITE == 1'b1) && (PREADY == 1'b1))",
		lineno=153];
	"144:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fdc90543b10>",
		fillcolor=springgreen,
		label="144:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"144:IF" -> "145:BL"	 [cond="['PRESETn']",
		label="(!PRESETn)",
		lineno=144];
	"150:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fdc90543bd0>",
		fillcolor=turquoise,
		label="150:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"144:IF" -> "150:BL"	 [cond="['PRESETn']",
		label="!((!PRESETn))",
		lineno=144];
	"142:BL" -> "144:IF"	 [cond="[]",
		lineno=None];
	"150:BL" -> "153:IF"	 [cond="[]",
		lineno=None];
	"132:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fdc905433d0>",
		def_var="['PSLVERR']",
		fillcolor=deepskyblue,
		label="132:AS
PSLVERR = ERROR;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ERROR']"];
	"135:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fdc90543510>",
		def_var="['INT_TX']",
		fillcolor=deepskyblue,
		label="135:AS
INT_TX = TX_EMPTY;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['TX_EMPTY']"];
	"126:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fdc9050ff50>",
		def_var="['WRITE_DATA_ON_TX']",
		fillcolor=deepskyblue,
		label="126:AS
WRITE_DATA_ON_TX = (PADDR == 32'd0)? PWDATA : PWDATA;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['PADDR', 'PWDATA', 'PWDATA']"];
}
