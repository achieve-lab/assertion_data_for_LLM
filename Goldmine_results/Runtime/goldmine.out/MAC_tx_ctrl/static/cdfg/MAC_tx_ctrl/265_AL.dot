strict digraph "" {
	node [label="\N"];
	"268:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a56c1d0>",
		fillcolor=springgreen,
		label="268:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"269:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a56cf90>",
		fillcolor=cadetblue,
		label="269:BS
Next_state = StateIFG;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a56cf90>]",
		style=filled,
		typ=BlockingSubstitution];
	"268:IF" -> "269:BS"	 [cond="['FullDuplex', 'FullDuplex', 'CRS']",
		label="(FullDuplex || !FullDuplex && !CRS)",
		lineno=268];
	"271:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a56cd50>",
		fillcolor=cadetblue,
		label="271:BS
Next_state = Current_state;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a56cd50>]",
		style=filled,
		typ=BlockingSubstitution];
	"268:IF" -> "271:BS"	 [cond="['FullDuplex', 'FullDuplex', 'CRS']",
		label="!((FullDuplex || !FullDuplex && !CRS))",
		lineno=268];
	"316:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a5722d0>",
		fillcolor=cadetblue,
		label="316:BS
Next_state = StateFFEmptyDrop;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a5722d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"Leaf_265:AL"	 [def_var="['Next_state']",
		label="Leaf_265:AL"];
	"316:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"299:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a572490>",
		fillcolor=cadetblue,
		label="299:BS
Next_state = Current_state;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a572490>]",
		style=filled,
		typ=BlockingSubstitution];
	"299:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"348:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a51ed90>",
		fillcolor=cadetblue,
		label="348:BS
Next_state = Current_state;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a51ed90>]",
		style=filled,
		typ=BlockingSubstitution];
	"348:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"353:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a572610>",
		fillcolor=cadetblue,
		label="353:BS
Next_state = Current_state;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a572610>]",
		style=filled,
		typ=BlockingSubstitution];
	"353:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"329:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a572790>",
		fillcolor=cadetblue,
		label="329:BS
Next_state = Current_state;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a572790>]",
		style=filled,
		typ=BlockingSubstitution];
	"329:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"312:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f104a572910>",
		fillcolor=lightcyan,
		label="312:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"313:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a572990>",
		fillcolor=springgreen,
		label="313:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"312:CA" -> "313:IF"	 [cond="[]",
		lineno=None];
	"307:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f104a57b290>",
		fillcolor=lightcyan,
		label="307:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"308:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a57b350>",
		fillcolor=springgreen,
		label="308:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"307:CA" -> "308:IF"	 [cond="[]",
		lineno=None];
	"293:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f104a57b750>",
		fillcolor=lightcyan,
		label="293:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"294:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a57b810>",
		fillcolor=springgreen,
		label="294:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"293:CA" -> "294:IF"	 [cond="[]",
		lineno=None];
	"362:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584090>",
		fillcolor=cadetblue,
		label="362:BS
Next_state = StateDefer;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584090>]",
		style=filled,
		typ=BlockingSubstitution];
	"362:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"318:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a572d50>",
		fillcolor=cadetblue,
		label="318:BS
Next_state = StateFCS;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a572d50>]",
		style=filled,
		typ=BlockingSubstitution];
	"318:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"338:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a5841d0>",
		fillcolor=springgreen,
		label="338:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"341:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584210>",
		fillcolor=cadetblue,
		label="341:BS
Next_state = Current_state;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584210>]",
		style=filled,
		typ=BlockingSubstitution];
	"338:IF" -> "341:BS"	 [cond="['Random_time_meet']",
		label="!(Random_time_meet)",
		lineno=338];
	"339:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584390>",
		fillcolor=cadetblue,
		label="339:BS
Next_state = StateDefer;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584390>]",
		style=filled,
		typ=BlockingSubstitution];
	"338:IF" -> "339:BS"	 [cond="['Random_time_meet']",
		label=Random_time_meet,
		lineno=338];
	"344:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584550>",
		fillcolor=cadetblue,
		label="344:BS
Next_state = StateJam;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584550>]",
		style=filled,
		typ=BlockingSubstitution];
	"344:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"296:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a57b850>",
		fillcolor=springgreen,
		label="296:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"294:IF" -> "296:IF"	 [cond="['FullDuplex', 'Collision']",
		label="!((!FullDuplex && Collision))",
		lineno=294];
	"295:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a57be10>",
		fillcolor=cadetblue,
		label="295:BS
Next_state = StateJam;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a57be10>]",
		style=filled,
		typ=BlockingSubstitution];
	"294:IF" -> "295:BS"	 [cond="['FullDuplex', 'Collision']",
		label="(!FullDuplex && Collision)",
		lineno=294];
	"355:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a5847d0>",
		fillcolor=springgreen,
		label="355:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"358:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584810>",
		fillcolor=cadetblue,
		label="358:BS
Next_state = Current_state;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584810>]",
		style=filled,
		typ=BlockingSubstitution];
	"355:IF" -> "358:BS"	 [cond="['Fifo_eop']",
		label="!(Fifo_eop)",
		lineno=355];
	"356:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584990>",
		fillcolor=cadetblue,
		label="356:BS
Next_state = StateSwitchNext;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584990>]",
		style=filled,
		typ=BlockingSubstitution];
	"355:IF" -> "356:BS"	 [cond="['Fifo_eop']",
		label=Fifo_eop,
		lineno=355];
	"281:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a51e810>",
		fillcolor=cadetblue,
		label="281:BS
Next_state = StateDefer;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a51e810>]",
		style=filled,
		typ=BlockingSubstitution];
	"281:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"315:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a5729d0>",
		fillcolor=springgreen,
		label="315:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"315:IF" -> "316:BS"	 [cond="['Fifo_data_err_empty']",
		label=Fifo_data_err_empty,
		lineno=315];
	"317:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a572a10>",
		fillcolor=springgreen,
		label="317:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"315:IF" -> "317:IF"	 [cond="['Fifo_data_err_empty']",
		label="!(Fifo_data_err_empty)",
		lineno=315];
	"278:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a58e690>",
		fillcolor=cadetblue,
		label="278:BS
Next_state = Current_state;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a58e690>]",
		style=filled,
		typ=BlockingSubstitution];
	"278:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"332:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a58e810>",
		fillcolor=cadetblue,
		label="332:BS
Next_state = StateBackOff;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a58e810>]",
		style=filled,
		typ=BlockingSubstitution];
	"332:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"333:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a584b50>",
		fillcolor=springgreen,
		label="333:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"336:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584b90>",
		fillcolor=cadetblue,
		label="336:BS
Next_state = Current_state;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584b90>]",
		style=filled,
		typ=BlockingSubstitution];
	"333:IF" -> "336:BS"	 [cond="['RetryCnt', 'MaxRetry']",
		label="!((RetryCnt > MaxRetry))",
		lineno=333];
	"334:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584d10>",
		fillcolor=cadetblue,
		label="334:BS
Next_state = StateJamDrop;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584d10>]",
		style=filled,
		typ=BlockingSubstitution];
	"333:IF" -> "334:BS"	 [cond="['RetryCnt', 'MaxRetry']",
		label="(RetryCnt > MaxRetry)",
		lineno=333];
	"273:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a58e990>",
		fillcolor=springgreen,
		label="273:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"274:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a514050>",
		fillcolor=cadetblue,
		label="274:BS
Next_state = StateDefer;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a514050>]",
		style=filled,
		typ=BlockingSubstitution];
	"273:IF" -> "274:BS"	 [cond="['FullDuplex', 'CRS']",
		label="(!FullDuplex && CRS)",
		lineno=273];
	"275:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a58e9d0>",
		fillcolor=springgreen,
		label="275:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"273:IF" -> "275:IF"	 [cond="['FullDuplex', 'CRS']",
		label="!((!FullDuplex && CRS))",
		lineno=273];
	"289:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a514290>",
		fillcolor=springgreen,
		label="289:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"292:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a5142d0>",
		fillcolor=cadetblue,
		label="292:BS
Next_state = Current_state;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a5142d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"289:IF" -> "292:BS"	 [cond="['pause_counter']",
		label="!((pause_counter == 512 / 8))",
		lineno=289];
	"290:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a514450>",
		fillcolor=cadetblue,
		label="290:BS
Next_state = StateDefer;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a514450>]",
		style=filled,
		typ=BlockingSubstitution];
	"289:IF" -> "290:BS"	 [cond="['pause_counter']",
		label="(pause_counter == 512 / 8)",
		lineno=289];
	"354:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f104a528950>",
		fillcolor=lightcyan,
		label="354:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"354:CA" -> "355:IF"	 [cond="[]",
		lineno=None];
	"337:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f104a514710>",
		fillcolor=lightcyan,
		label="337:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"337:CA" -> "338:IF"	 [cond="[]",
		lineno=None];
	"274:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"359:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f104a5147d0>",
		fillcolor=lightcyan,
		label="359:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"360:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a514890>",
		fillcolor=cadetblue,
		label="360:BS
Next_state = StateDefer;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a514890>]",
		style=filled,
		typ=BlockingSubstitution];
	"359:CA" -> "360:BS"	 [cond="[]",
		lineno=None];
	"358:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"343:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a51ed10>",
		fillcolor=springgreen,
		label="343:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"343:IF" -> "344:BS"	 [cond="['FullDuplex', 'Collision']",
		label="(!FullDuplex && Collision)",
		lineno=343];
	"345:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a51ed50>",
		fillcolor=springgreen,
		label="345:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"343:IF" -> "345:IF"	 [cond="['FullDuplex', 'Collision']",
		label="!((!FullDuplex && Collision))",
		lineno=343];
	"301:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a584f50>",
		fillcolor=springgreen,
		label="301:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"302:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a58e450>",
		fillcolor=cadetblue,
		label="302:BS
Next_state = StateJam;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a58e450>]",
		style=filled,
		typ=BlockingSubstitution];
	"301:IF" -> "302:BS"	 [cond="['FullDuplex', 'Collision']",
		label="(!FullDuplex && Collision)",
		lineno=301];
	"303:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a584f90>",
		fillcolor=springgreen,
		label="303:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"301:IF" -> "303:IF"	 [cond="['FullDuplex', 'Collision']",
		label="!((!FullDuplex && Collision))",
		lineno=301];
	"300:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f104a5149d0>",
		fillcolor=lightcyan,
		label="300:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"300:CA" -> "301:IF"	 [cond="[]",
		lineno=None];
	"324:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a514a50>",
		fillcolor=springgreen,
		label="324:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"325:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a514bd0>",
		fillcolor=cadetblue,
		label="325:BS
Next_state = StateJam;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a514bd0>]",
		style=filled,
		typ=BlockingSubstitution];
	"324:IF" -> "325:BS"	 [cond="['FullDuplex', 'Collision']",
		label="(!FullDuplex && Collision)",
		lineno=324];
	"326:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a514a90>",
		fillcolor=springgreen,
		label="326:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"324:IF" -> "326:IF"	 [cond="['FullDuplex', 'Collision']",
		label="!((!FullDuplex && Collision))",
		lineno=324];
	"302:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"296:IF" -> "299:BS"	 [cond="['FullDuplex', 'Preamble_counter', 'FullDuplex', 'Collision', 'Preamble_counter']",
		label="!((FullDuplex && (Preamble_counter == 6) || !FullDuplex && !Collision && (Preamble_counter == 6)))",
		lineno=296];
	"297:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a57b890>",
		fillcolor=cadetblue,
		label="297:BS
Next_state = StateSFD;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a57b890>]",
		style=filled,
		typ=BlockingSubstitution];
	"296:IF" -> "297:BS"	 [cond="['FullDuplex', 'Preamble_counter', 'FullDuplex', 'Collision', 'Preamble_counter']",
		label="(FullDuplex && (Preamble_counter == 6) || !FullDuplex && !Collision && (Preamble_counter == 6))",
		lineno=296];
	"336:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"360:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"334:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"361:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f104a51ea50>",
		fillcolor=lightcyan,
		label="361:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"361:CA" -> "362:BS"	 [cond="[]",
		lineno=None];
	"267:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f104a51ea90>",
		fillcolor=lightcyan,
		label="267:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"267:CA" -> "268:IF"	 [cond="[]",
		lineno=None];
	"346:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a51eb10>",
		fillcolor=cadetblue,
		label="346:BS
Next_state = StateSwitchNext;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a51eb10>]",
		style=filled,
		typ=BlockingSubstitution];
	"346:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"304:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a58e150>",
		fillcolor=cadetblue,
		label="304:BS
Next_state = StateSendPauseFrame;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a58e150>]",
		style=filled,
		typ=BlockingSubstitution];
	"304:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"342:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f104a51ec90>",
		fillcolor=lightcyan,
		label="342:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"342:CA" -> "343:IF"	 [cond="[]",
		lineno=None];
	"325:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"283:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a51e690>",
		fillcolor=cadetblue,
		label="283:BS
Next_state = StatePause;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a51e690>]",
		style=filled,
		typ=BlockingSubstitution];
	"283:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"356:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"295:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"327:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584690>",
		fillcolor=cadetblue,
		label="327:BS
Next_state = StateFCS;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584690>]",
		style=filled,
		typ=BlockingSubstitution];
	"327:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"313:IF" -> "315:IF"	 [cond="['FullDuplex', 'Collision']",
		label="!((!FullDuplex && Collision))",
		lineno=313];
	"314:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a57b0d0>",
		fillcolor=cadetblue,
		label="314:BS
Next_state = StateJam;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a57b0d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"313:IF" -> "314:BS"	 [cond="['FullDuplex', 'Collision']",
		label="(!FullDuplex && Collision)",
		lineno=313];
	"303:IF" -> "304:BS"	 [cond="['pause_frame_send_en_dl1', 'xoff_gen', 'xon_gen']",
		label="(pause_frame_send_en_dl1 && (xoff_gen || xon_gen))",
		lineno=303];
	"306:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584fd0>",
		fillcolor=cadetblue,
		label="306:BS
Next_state = StateData;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a584fd0>]",
		style=filled,
		typ=BlockingSubstitution];
	"303:IF" -> "306:BS"	 [cond="['pause_frame_send_en_dl1', 'xoff_gen', 'xon_gen']",
		label="!((pause_frame_send_en_dl1 && (xoff_gen || xon_gen)))",
		lineno=303];
	"349:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f104a528090>",
		fillcolor=lightcyan,
		label="349:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"350:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a528150>",
		fillcolor=springgreen,
		label="350:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"349:CA" -> "350:IF"	 [cond="[]",
		lineno=None];
	"272:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f104a528350>",
		fillcolor=lightcyan,
		label="272:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"272:CA" -> "273:IF"	 [cond="[]",
		lineno=None];
	"292:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"323:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f104a5283d0>",
		fillcolor=lightcyan,
		label="323:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"323:CA" -> "324:IF"	 [cond="[]",
		lineno=None];
	"314:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"331:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a528710>",
		fillcolor=springgreen,
		label="331:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"331:IF" -> "332:BS"	 [cond="['RetryCnt', 'MaxRetry', 'JamCounter']",
		label="((RetryCnt <= MaxRetry) && (JamCounter == 16))",
		lineno=331];
	"331:IF" -> "333:IF"	 [cond="['RetryCnt', 'MaxRetry', 'JamCounter']",
		label="!(((RetryCnt <= MaxRetry) && (JamCounter == 16)))",
		lineno=331];
	"279:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f104a528550>",
		fillcolor=lightcyan,
		label="279:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"280:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a514e10>",
		fillcolor=springgreen,
		label="280:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"279:CA" -> "280:IF"	 [cond="[]",
		lineno=None];
	"284:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a514e90>",
		fillcolor=springgreen,
		label="284:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"287:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a514ed0>",
		fillcolor=cadetblue,
		label="287:BS
Next_state = Current_state;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a514ed0>]",
		style=filled,
		typ=BlockingSubstitution];
	"284:IF" -> "287:BS"	 [cond="['FullDuplex', 'Fifo_ra', 'FullDuplex', 'CRS', 'Fifo_ra', 'pause_frame_send_en_dl1', 'xoff_gen', 'xon_gen']",
		label="!((FullDuplex && Fifo_ra || !FullDuplex && !CRS && Fifo_ra || pause_frame_send_en_dl1 && (xoff_gen || xon_gen)))",
		lineno=284];
	"285:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a51e090>",
		fillcolor=cadetblue,
		label="285:BS
Next_state = StatePreamble;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a51e090>]",
		style=filled,
		typ=BlockingSubstitution];
	"284:IF" -> "285:BS"	 [cond="['FullDuplex', 'Fifo_ra', 'FullDuplex', 'CRS', 'Fifo_ra', 'pause_frame_send_en_dl1', 'xoff_gen', 'xon_gen']",
		label="(FullDuplex && Fifo_ra || !FullDuplex && !CRS && Fifo_ra || pause_frame_send_en_dl1 && (xoff_gen || xon_gen))",
		lineno=284];
	"287:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"330:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f104a528690>",
		fillcolor=lightcyan,
		label="330:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"330:CA" -> "331:IF"	 [cond="[]",
		lineno=None];
	"280:IF" -> "281:BS"	 [cond="['FullDuplex', 'CRS']",
		label="(!FullDuplex && CRS)",
		lineno=280];
	"282:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a514e50>",
		fillcolor=springgreen,
		label="282:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"280:IF" -> "282:IF"	 [cond="['FullDuplex', 'CRS']",
		label="!((!FullDuplex && CRS))",
		lineno=280];
	"265:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f104a528a90>",
		clk_sens=False,
		fillcolor=gold,
		label="265:AL",
		sens="['Current_state']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['CRS', 'IPLengthCounter', 'Random_time_meet', 'IFGset', 'pause_frame_send_en_dl1', 'RetryCnt', 'Current_state', 'Preamble_counter', '\
xon_gen', 'Collision', 'IFG_counter', 'FullDuplex', 'MaxRetry', 'Fifo_ra', 'JamCounter', 'pause_apply', 'xoff_gen', 'Fifo_eop', '\
Fifo_data_err_empty', 'pause_counter', 'CRC_end']"];
	"266:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7f104a528450>",
		fillcolor=linen,
		label="266:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"265:AL" -> "266:CS"	 [cond="[]",
		lineno=None];
	"285:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"275:IF" -> "278:BS"	 [cond="['FullDuplex', 'IFG_counter', 'IFGset', 'FullDuplex', 'CRS', 'IFG_counter', 'IFGset']",
		label="!((FullDuplex && (IFG_counter == IFGset - 4) || !FullDuplex && !CRS && (IFG_counter == IFGset - 4)))",
		lineno=275];
	"276:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a58ea10>",
		fillcolor=cadetblue,
		label="276:BS
Next_state = StateIdle;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a58ea10>]",
		style=filled,
		typ=BlockingSubstitution];
	"275:IF" -> "276:BS"	 [cond="['FullDuplex', 'IFG_counter', 'IFGset', 'FullDuplex', 'CRS', 'IFG_counter', 'IFGset']",
		label="(FullDuplex && (IFG_counter == IFGset - 4) || !FullDuplex && !CRS && (IFG_counter == IFGset - 4))",
		lineno=275];
	"317:IF" -> "318:BS"	 [cond="['Fifo_eop', 'IPLengthCounter']",
		label="(Fifo_eop && (IPLengthCounter >= 59))",
		lineno=317];
	"319:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f104a572a50>",
		fillcolor=springgreen,
		label="319:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"317:IF" -> "319:IF"	 [cond="['Fifo_eop', 'IPLengthCounter']",
		label="!((Fifo_eop && (IPLengthCounter >= 59)))",
		lineno=317];
	"269:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"341:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"345:IF" -> "348:BS"	 [cond="['CRC_end']",
		label="!(CRC_end)",
		lineno=345];
	"345:IF" -> "346:BS"	 [cond="['CRC_end']",
		label=CRC_end,
		lineno=345];
	"320:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a572bd0>",
		fillcolor=cadetblue,
		label="320:BS
Next_state = StatePAD;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a572bd0>]",
		style=filled,
		typ=BlockingSubstitution];
	"319:IF" -> "320:BS"	 [cond="['Fifo_eop']",
		label=Fifo_eop,
		lineno=319];
	"322:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a572a90>",
		fillcolor=cadetblue,
		label="322:BS
Next_state = StateData;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a572a90>]",
		style=filled,
		typ=BlockingSubstitution];
	"319:IF" -> "322:BS"	 [cond="['Fifo_eop']",
		label="!(Fifo_eop)",
		lineno=319];
	"306:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"271:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"288:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f104a5285d0>",
		fillcolor=lightcyan,
		label="288:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"288:CA" -> "289:IF"	 [cond="[]",
		lineno=None];
	"297:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"311:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a57b390>",
		fillcolor=cadetblue,
		label="311:BS
Next_state = Current_state;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a57b390>]",
		style=filled,
		typ=BlockingSubstitution];
	"308:IF" -> "311:BS"	 [cond="['IPLengthCounter']",
		label="!((IPLengthCounter == 17))",
		lineno=308];
	"309:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a57b510>",
		fillcolor=cadetblue,
		label="309:BS
Next_state = StatePAD;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a57b510>]",
		style=filled,
		typ=BlockingSubstitution];
	"308:IF" -> "309:BS"	 [cond="['IPLengthCounter']",
		label="(IPLengthCounter == 17)",
		lineno=308];
	"350:IF" -> "353:BS"	 [cond="['Fifo_eop']",
		label="!(Fifo_eop)",
		lineno=350];
	"351:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a528190>",
		fillcolor=cadetblue,
		label="351:BS
Next_state = StateSwitchNext;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f104a528190>]",
		style=filled,
		typ=BlockingSubstitution];
	"350:IF" -> "351:BS"	 [cond="['Fifo_eop']",
		label=Fifo_eop,
		lineno=350];
	"276:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"351:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"320:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"311:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"309:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"339:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"266:CS" -> "312:CA"	 [cond="['Current_state']",
		label=Current_state,
		lineno=266];
	"266:CS" -> "307:CA"	 [cond="['Current_state']",
		label=Current_state,
		lineno=266];
	"266:CS" -> "293:CA"	 [cond="['Current_state']",
		label=Current_state,
		lineno=266];
	"266:CS" -> "354:CA"	 [cond="['Current_state']",
		label=Current_state,
		lineno=266];
	"266:CS" -> "337:CA"	 [cond="['Current_state']",
		label=Current_state,
		lineno=266];
	"266:CS" -> "359:CA"	 [cond="['Current_state']",
		label=Current_state,
		lineno=266];
	"266:CS" -> "300:CA"	 [cond="['Current_state']",
		label=Current_state,
		lineno=266];
	"266:CS" -> "361:CA"	 [cond="['Current_state']",
		label=Current_state,
		lineno=266];
	"266:CS" -> "267:CA"	 [cond="['Current_state']",
		label=Current_state,
		lineno=266];
	"266:CS" -> "342:CA"	 [cond="['Current_state']",
		label=Current_state,
		lineno=266];
	"266:CS" -> "349:CA"	 [cond="['Current_state']",
		label=Current_state,
		lineno=266];
	"266:CS" -> "272:CA"	 [cond="['Current_state']",
		label=Current_state,
		lineno=266];
	"266:CS" -> "323:CA"	 [cond="['Current_state']",
		label=Current_state,
		lineno=266];
	"266:CS" -> "279:CA"	 [cond="['Current_state']",
		label=Current_state,
		lineno=266];
	"266:CS" -> "330:CA"	 [cond="['Current_state']",
		label=Current_state,
		lineno=266];
	"266:CS" -> "288:CA"	 [cond="['Current_state']",
		label=Current_state,
		lineno=266];
	"290:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"322:BS" -> "Leaf_265:AL"	 [cond="[]",
		lineno=None];
	"326:IF" -> "329:BS"	 [cond="['IPLengthCounter']",
		label="!((IPLengthCounter >= 59))",
		lineno=326];
	"326:IF" -> "327:BS"	 [cond="['IPLengthCounter']",
		label="(IPLengthCounter >= 59)",
		lineno=326];
	"282:IF" -> "283:BS"	 [cond="['pause_apply']",
		label=pause_apply,
		lineno=282];
	"282:IF" -> "284:IF"	 [cond="['pause_apply']",
		label="!(pause_apply)",
		lineno=282];
}
