strict digraph "compose( ,  )" {
	node [label="\N"];
	"529:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f27dd0da990>",
		fillcolor=turquoise,
		label="529:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"530:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f27dd0dac90>",
		fillcolor=springgreen,
		label="530:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"529:BL" -> "530:IF"	 [cond="[]",
		lineno=None];
	"533:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f27dd0dad10>",
		fillcolor=turquoise,
		label="533:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"534:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f27dd0bc050>",
		fillcolor=springgreen,
		label="534:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"533:BL" -> "534:IF"	 [cond="[]",
		lineno=None];
	"525:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f27dd0da650>",
		fillcolor=turquoise,
		label="525:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"526:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f27dd0da7d0>",
		fillcolor=springgreen,
		label="526:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"525:BL" -> "526:IF"	 [cond="[]",
		lineno=None];
	"537:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f27dd0bc250>",
		fillcolor=firebrick,
		label="537:NS
id_ok <= #Tp match_df_std;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f27dd0bc250>]",
		style=filled,
		typ=NonblockingSubstitution];
	"Leaf_524:AL"	 [def_var="['id_ok']",
		label="Leaf_524:AL"];
	"537:NS" -> "Leaf_524:AL"	 [cond="[]",
		lineno=None];
	"540:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f27dd0dacd0>",
		fillcolor=turquoise,
		label="540:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"541:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f27dd0bc550>",
		fillcolor=springgreen,
		label="541:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"540:BL" -> "541:IF"	 [cond="[]",
		lineno=None];
	"542:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f27dd0bc510>",
		fillcolor=firebrick,
		label="542:NS
id_ok <= #Tp match_sf_ext;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f27dd0bc510>]",
		style=filled,
		typ=NonblockingSubstitution];
	"541:IF" -> "542:NS"	 [cond="['ide']",
		label=ide,
		lineno=541];
	"544:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f27dd0bc750>",
		fillcolor=firebrick,
		label="544:NS
id_ok <= #Tp match_sf_std;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f27dd0bc750>]",
		style=filled,
		typ=NonblockingSubstitution];
	"541:IF" -> "544:NS"	 [cond="['ide']",
		label="!(ide)",
		lineno=541];
	"524:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f27dd0da690>",
		clk_sens=True,
		fillcolor=gold,
		label="524:AL",
		sens="['clk', 'rst']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['go_rx_inter', 'match_sf_ext', 'extended_mode', 'match_sf_std', 'acceptance_filter_mode', 'reset_mode', 'go_error_frame', 'match_\
df_ext', 'match_df_std', 'go_rx_crc_lim', 'rst', 'ide', 'match']"];
	"524:AL" -> "525:BL"	 [cond="[]",
		lineno=None];
	"551:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f27dd0bcbd0>",
		fillcolor=firebrick,
		label="551:NS
id_ok <= #Tp 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f27dd0bcbd0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"551:NS" -> "Leaf_524:AL"	 [cond="[]",
		lineno=None];
	"353:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f27dd0ae550>",
		def_var="['match']",
		fillcolor=deepskyblue,
		label="353:AS
match = ((id[3] == acceptance_code_0[0]) | acceptance_mask_0[0]) & ((id[4] == acceptance_code_0[1]) | acceptance_mask_0[1]) & ((\
id[5] == acceptance_code_0[2]) | acceptance_mask_0[2]) & ((id[6] == acceptance_code_0[3]) | acceptance_mask_0[3]) & ((id[7] == acceptance_\
code_0[4]) | acceptance_mask_0[4]) & ((id[8] == acceptance_code_0[5]) | acceptance_mask_0[5]) & ((id[9] == acceptance_code_0[6]) | \
acceptance_mask_0[6]) & ((id[10] == acceptance_code_0[7]) | acceptance_mask_0[7]);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_\
mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_\
0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0']"];
	"353:AS" -> "524:AL";
	"532:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f27dd0bc0d0>",
		fillcolor=springgreen,
		label="532:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"532:IF" -> "533:BL"	 [cond="['acceptance_filter_mode']",
		label="(~acceptance_filter_mode)",
		lineno=532];
	"532:IF" -> "540:BL"	 [cond="['acceptance_filter_mode']",
		label="!((~acceptance_filter_mode))",
		lineno=532];
	"527:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f27dd0da810>",
		fillcolor=firebrick,
		label="527:NS
id_ok <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f27dd0da810>]",
		style=filled,
		typ=NonblockingSubstitution];
	"527:NS" -> "Leaf_524:AL"	 [cond="[]",
		lineno=None];
	"482:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f27dd0c7a50>",
		def_var="['match_df_ext']",
		fillcolor=deepskyblue,
		label="482:AS
match_df_ext = ((id[21] == acceptance_code_0[0]) | acceptance_mask_0[0]) & ((id[22] == acceptance_code_0[1]) | acceptance_\
mask_0[1]) & ((id[23] == acceptance_code_0[2]) | acceptance_mask_0[2]) & ((id[24] == acceptance_code_0[3]) | acceptance_mask_0[3]) & ((\
id[25] == acceptance_code_0[4]) | acceptance_mask_0[4]) & ((id[26] == acceptance_code_0[5]) | acceptance_mask_0[5]) & ((id[27] == \
acceptance_code_0[6]) | acceptance_mask_0[6]) & ((id[28] == acceptance_code_0[7]) | acceptance_mask_0[7]) & ((id[13] == acceptance_\
code_1[0]) | acceptance_mask_1[0]) & ((id[14] == acceptance_code_1[1]) | acceptance_mask_1[1]) & ((id[15] == acceptance_code_1[2]) | \
acceptance_mask_1[2]) & ((id[16] == acceptance_code_1[3]) | acceptance_mask_1[3]) & ((id[17] == acceptance_code_1[4]) | acceptance_\
mask_1[4]) & ((id[18] == acceptance_code_1[5]) | acceptance_mask_1[5]) & ((id[19] == acceptance_code_1[6]) | acceptance_mask_1[6]) & ((\
id[20] == acceptance_code_1[7]) | acceptance_mask_1[7]) | ((id[21] == acceptance_code_2[0]) | acceptance_mask_2[0]) & ((id[22] == \
acceptance_code_2[1]) | acceptance_mask_2[1]) & ((id[23] == acceptance_code_2[2]) | acceptance_mask_2[2]) & ((id[24] == acceptance_\
code_2[3]) | acceptance_mask_2[3]) & ((id[25] == acceptance_code_2[4]) | acceptance_mask_2[4]) & ((id[26] == acceptance_code_2[5]) | \
acceptance_mask_2[5]) & ((id[27] == acceptance_code_2[6]) | acceptance_mask_2[6]) & ((id[28] == acceptance_code_2[7]) | acceptance_\
mask_2[7]) & ((id[13] == acceptance_code_3[0]) | acceptance_mask_3[0]) & ((id[14] == acceptance_code_3[1]) | acceptance_mask_3[1]) & ((\
id[15] == acceptance_code_3[2]) | acceptance_mask_3[2]) & ((id[16] == acceptance_code_3[3]) | acceptance_mask_3[3]) & ((id[17] == \
acceptance_code_3[4]) | acceptance_mask_3[4]) & ((id[18] == acceptance_code_3[5]) | acceptance_mask_3[5]) & ((id[19] == acceptance_\
code_3[6]) | acceptance_mask_3[6]) & ((id[20] == acceptance_code_3[7]) | acceptance_mask_3[7]);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_\
mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_\
0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', '\
acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_\
mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_\
1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', '\
acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_\
mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_\
2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', '\
acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_\
mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_\
3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3']"];
	"482:AS" -> "524:AL";
	"535:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f27dd0dafd0>",
		fillcolor=firebrick,
		label="535:NS
id_ok <= #Tp match_df_ext;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f27dd0dafd0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"535:NS" -> "Leaf_524:AL"	 [cond="[]",
		lineno=None];
	"439:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f27dd365650>",
		def_var="['match_df_std']",
		fillcolor=deepskyblue,
		label="439:AS
match_df_std = ((id[3] == acceptance_code_0[0]) | acceptance_mask_0[0]) & ((id[4] == acceptance_code_0[1]) | acceptance_mask_\
0[1]) & ((id[5] == acceptance_code_0[2]) | acceptance_mask_0[2]) & ((id[6] == acceptance_code_0[3]) | acceptance_mask_0[3]) & ((\
id[7] == acceptance_code_0[4]) | acceptance_mask_0[4]) & ((id[8] == acceptance_code_0[5]) | acceptance_mask_0[5]) & ((id[9] == acceptance_\
code_0[6]) | acceptance_mask_0[6]) & ((id[10] == acceptance_code_0[7]) | acceptance_mask_0[7]) & ((rtr1 == acceptance_code_1[4]) | \
acceptance_mask_1[4]) & ((id[0] == acceptance_code_1[5]) | acceptance_mask_1[5]) & ((id[1] == acceptance_code_1[6]) | acceptance_\
mask_1[6]) & ((id[2] == acceptance_code_1[7]) | acceptance_mask_1[7]) & ((data0[0] == acceptance_code_3[0]) | acceptance_mask_3[\
0] | no_byte0) & ((data0[1] == acceptance_code_3[1]) | acceptance_mask_3[1] | no_byte0) & ((data0[2] == acceptance_code_3[2]) | \
acceptance_mask_3[2] | no_byte0) & ((data0[3] == acceptance_code_3[3]) | acceptance_mask_3[3] | no_byte0) & ((data0[4] == acceptance_\
code_1[0]) | acceptance_mask_1[0] | no_byte0) & ((data0[5] == acceptance_code_1[1]) | acceptance_mask_1[1] | no_byte0) & ((data0[\
6] == acceptance_code_1[2]) | acceptance_mask_1[2] | no_byte0) & ((data0[7] == acceptance_code_1[3]) | acceptance_mask_1[3] | no_\
byte0) | ((id[3] == acceptance_code_2[0]) | acceptance_mask_2[0]) & ((id[4] == acceptance_code_2[1]) | acceptance_mask_2[1]) & ((\
id[5] == acceptance_code_2[2]) | acceptance_mask_2[2]) & ((id[6] == acceptance_code_2[3]) | acceptance_mask_2[3]) & ((id[7] == acceptance_\
code_2[4]) | acceptance_mask_2[4]) & ((id[8] == acceptance_code_2[5]) | acceptance_mask_2[5]) & ((id[9] == acceptance_code_2[6]) | \
acceptance_mask_2[6]) & ((id[10] == acceptance_code_2[7]) | acceptance_mask_2[7]) & ((rtr1 == acceptance_code_3[4]) | acceptance_\
mask_3[4]) & ((id[0] == acceptance_code_3[5]) | acceptance_mask_3[5]) & ((id[1] == acceptance_code_3[6]) | acceptance_mask_3[6]) & ((\
id[2] == acceptance_code_3[7]) | acceptance_mask_3[7]);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_\
mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_\
0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'rtr1', '\
acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_\
mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'data0', 'acceptance_code_3', 'acceptance_mask_3', 'no_byte0', 'data0', '\
acceptance_code_3', 'acceptance_mask_3', 'no_byte0', 'data0', 'acceptance_code_3', 'acceptance_mask_3', 'no_byte0', 'data0', 'acceptance_\
code_3', 'acceptance_mask_3', 'no_byte0', 'data0', 'acceptance_code_1', 'acceptance_mask_1', 'no_byte0', 'data0', 'acceptance_code_\
1', 'acceptance_mask_1', 'no_byte0', 'data0', 'acceptance_code_1', 'acceptance_mask_1', 'no_byte0', 'data0', 'acceptance_code_1', '\
acceptance_mask_1', 'no_byte0', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', '\
id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_\
mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_\
2', 'acceptance_mask_2', 'rtr1', 'acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3', 'id', '\
acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3']"];
	"439:AS" -> "524:AL";
	"531:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f27dd0dab10>",
		fillcolor=turquoise,
		label="531:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"531:BL" -> "532:IF"	 [cond="[]",
		lineno=None];
	"528:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f27dd0daad0>",
		fillcolor=springgreen,
		label="528:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"528:IF" -> "529:BL"	 [cond="['go_rx_crc_lim']",
		label=go_rx_crc_lim,
		lineno=528];
	"550:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f27dd0bc990>",
		fillcolor=springgreen,
		label="550:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"528:IF" -> "550:IF"	 [cond="['go_rx_crc_lim']",
		label="!(go_rx_crc_lim)",
		lineno=528];
	"526:IF" -> "527:NS"	 [cond="['rst']",
		label=rst,
		lineno=526];
	"526:IF" -> "528:IF"	 [cond="['rst']",
		label="!(rst)",
		lineno=526];
	"401:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f27dd359c90>",
		def_var="['match_sf_ext']",
		fillcolor=deepskyblue,
		label="401:AS
match_sf_ext = ((id[21] == acceptance_code_0[0]) | acceptance_mask_0[0]) & ((id[22] == acceptance_code_0[1]) | acceptance_\
mask_0[1]) & ((id[23] == acceptance_code_0[2]) | acceptance_mask_0[2]) & ((id[24] == acceptance_code_0[3]) | acceptance_mask_0[3]) & ((\
id[25] == acceptance_code_0[4]) | acceptance_mask_0[4]) & ((id[26] == acceptance_code_0[5]) | acceptance_mask_0[5]) & ((id[27] == \
acceptance_code_0[6]) | acceptance_mask_0[6]) & ((id[28] == acceptance_code_0[7]) | acceptance_mask_0[7]) & ((id[13] == acceptance_\
code_1[0]) | acceptance_mask_1[0]) & ((id[14] == acceptance_code_1[1]) | acceptance_mask_1[1]) & ((id[15] == acceptance_code_1[2]) | \
acceptance_mask_1[2]) & ((id[16] == acceptance_code_1[3]) | acceptance_mask_1[3]) & ((id[17] == acceptance_code_1[4]) | acceptance_\
mask_1[4]) & ((id[18] == acceptance_code_1[5]) | acceptance_mask_1[5]) & ((id[19] == acceptance_code_1[6]) | acceptance_mask_1[6]) & ((\
id[20] == acceptance_code_1[7]) | acceptance_mask_1[7]) & ((id[5] == acceptance_code_2[0]) | acceptance_mask_2[0]) & ((id[6] == \
acceptance_code_2[1]) | acceptance_mask_2[1]) & ((id[7] == acceptance_code_2[2]) | acceptance_mask_2[2]) & ((id[8] == acceptance_\
code_2[3]) | acceptance_mask_2[3]) & ((id[9] == acceptance_code_2[4]) | acceptance_mask_2[4]) & ((id[10] == acceptance_code_2[5]) | \
acceptance_mask_2[5]) & ((id[11] == acceptance_code_2[6]) | acceptance_mask_2[6]) & ((id[12] == acceptance_code_2[7]) | acceptance_\
mask_2[7]) & ((rtr2 == acceptance_code_3[2]) | acceptance_mask_3[2]) & ((id[0] == acceptance_code_3[3]) | acceptance_mask_3[3]) & ((\
id[1] == acceptance_code_3[4]) | acceptance_mask_3[4]) & ((id[2] == acceptance_code_3[5]) | acceptance_mask_3[5]) & ((id[3] == acceptance_\
code_3[6]) | acceptance_mask_3[6]) & ((id[4] == acceptance_code_3[7]) | acceptance_mask_3[7]);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_\
mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_\
0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', '\
acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_\
mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_\
1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', '\
acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_\
mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_\
2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'rtr2', '\
acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_\
mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_\
3', 'acceptance_mask_3']"];
	"401:AS" -> "524:AL";
	"542:NS" -> "Leaf_524:AL"	 [cond="[]",
		lineno=None];
	"548:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f27dd0bc7d0>",
		fillcolor=firebrick,
		label="548:NS
id_ok <= #Tp match;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f27dd0bc7d0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"548:NS" -> "Leaf_524:AL"	 [cond="[]",
		lineno=None];
	"534:IF" -> "537:NS"	 [cond="['ide']",
		label="!(ide)",
		lineno=534];
	"534:IF" -> "535:NS"	 [cond="['ide']",
		label=ide,
		lineno=534];
	"550:IF" -> "551:NS"	 [cond="['reset_mode', 'go_rx_inter', 'go_error_frame']",
		label="(reset_mode | go_rx_inter | go_error_frame)",
		lineno=550];
	"365:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f27dd48bd10>",
		def_var="['match_sf_std']",
		fillcolor=deepskyblue,
		label="365:AS
match_sf_std = ((id[3] == acceptance_code_0[0]) | acceptance_mask_0[0]) & ((id[4] == acceptance_code_0[1]) | acceptance_mask_\
0[1]) & ((id[5] == acceptance_code_0[2]) | acceptance_mask_0[2]) & ((id[6] == acceptance_code_0[3]) | acceptance_mask_0[3]) & ((\
id[7] == acceptance_code_0[4]) | acceptance_mask_0[4]) & ((id[8] == acceptance_code_0[5]) | acceptance_mask_0[5]) & ((id[9] == acceptance_\
code_0[6]) | acceptance_mask_0[6]) & ((id[10] == acceptance_code_0[7]) | acceptance_mask_0[7]) & ((rtr1 == acceptance_code_1[4]) | \
acceptance_mask_1[4]) & ((id[0] == acceptance_code_1[5]) | acceptance_mask_1[5]) & ((id[1] == acceptance_code_1[6]) | acceptance_\
mask_1[6]) & ((id[2] == acceptance_code_1[7]) | acceptance_mask_1[7]) & ((data0[0] == acceptance_code_2[0]) | acceptance_mask_2[\
0] | no_byte0) & ((data0[1] == acceptance_code_2[1]) | acceptance_mask_2[1] | no_byte0) & ((data0[2] == acceptance_code_2[2]) | \
acceptance_mask_2[2] | no_byte0) & ((data0[3] == acceptance_code_2[3]) | acceptance_mask_2[3] | no_byte0) & ((data0[4] == acceptance_\
code_2[4]) | acceptance_mask_2[4] | no_byte0) & ((data0[5] == acceptance_code_2[5]) | acceptance_mask_2[5] | no_byte0) & ((data0[\
6] == acceptance_code_2[6]) | acceptance_mask_2[6] | no_byte0) & ((data0[7] == acceptance_code_2[7]) | acceptance_mask_2[7] | no_\
byte0) & ((data1[0] == acceptance_code_3[0]) | acceptance_mask_3[0] | no_byte1) & ((data1[1] == acceptance_code_3[1]) | acceptance_\
mask_3[1] | no_byte1) & ((data1[2] == acceptance_code_3[2]) | acceptance_mask_3[2] | no_byte1) & ((data1[3] == acceptance_code_3[\
3]) | acceptance_mask_3[3] | no_byte1) & ((data1[4] == acceptance_code_3[4]) | acceptance_mask_3[4] | no_byte1) & ((data1[5] == \
acceptance_code_3[5]) | acceptance_mask_3[5] | no_byte1) & ((data1[6] == acceptance_code_3[6]) | acceptance_mask_3[6] | no_byte1) & ((\
data1[7] == acceptance_code_3[7]) | acceptance_mask_3[7] | no_byte1);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_\
mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_\
0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'rtr1', '\
acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_\
mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'data0', 'acceptance_code_2', 'acceptance_mask_2', 'no_byte0', 'data0', '\
acceptance_code_2', 'acceptance_mask_2', 'no_byte0', 'data0', 'acceptance_code_2', 'acceptance_mask_2', 'no_byte0', 'data0', 'acceptance_\
code_2', 'acceptance_mask_2', 'no_byte0', 'data0', 'acceptance_code_2', 'acceptance_mask_2', 'no_byte0', 'data0', 'acceptance_code_\
2', 'acceptance_mask_2', 'no_byte0', 'data0', 'acceptance_code_2', 'acceptance_mask_2', 'no_byte0', 'data0', 'acceptance_code_2', '\
acceptance_mask_2', 'no_byte0', 'data1', 'acceptance_code_3', 'acceptance_mask_3', 'no_byte1', 'data1', 'acceptance_code_3', 'acceptance_\
mask_3', 'no_byte1', 'data1', 'acceptance_code_3', 'acceptance_mask_3', 'no_byte1', 'data1', 'acceptance_code_3', 'acceptance_mask_\
3', 'no_byte1', 'data1', 'acceptance_code_3', 'acceptance_mask_3', 'no_byte1', 'data1', 'acceptance_code_3', 'acceptance_mask_3', '\
no_byte1', 'data1', 'acceptance_code_3', 'acceptance_mask_3', 'no_byte1', 'data1', 'acceptance_code_3', 'acceptance_mask_3', 'no_\
byte1']"];
	"365:AS" -> "524:AL";
	"530:IF" -> "531:BL"	 [cond="['extended_mode']",
		label=extended_mode,
		lineno=530];
	"530:IF" -> "548:NS"	 [cond="['extended_mode']",
		label="!(extended_mode)",
		lineno=530];
	"544:NS" -> "Leaf_524:AL"	 [cond="[]",
		lineno=None];
}
