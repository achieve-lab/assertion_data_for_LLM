strict digraph "" {
	node [label="\N"];
	"3501:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44f6b18310>",
		fillcolor=cadetblue,
		label="3501:BS
tx_next = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44f6b18310>]",
		style=filled,
		typ=BlockingSubstitution];
	"Leaf_3496:AL"	 [def_var="['tx_next']",
		label="Leaf_3496:AL"];
	"3501:BS" -> "Leaf_3496:AL"	 [cond="[]",
		lineno=None];
	"3507:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44f6b184d0>",
		fillcolor=turquoise,
		label="3507:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"3508:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44f6b18510>",
		fillcolor=springgreen,
		label="3508:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"3507:BL" -> "3508:IF"	 [cond="[]",
		lineno=None];
	"3500:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44f6b18850>",
		fillcolor=springgreen,
		label="3500:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"3500:IF" -> "3501:BS"	 [cond="['reset_mode', 'node_bus_off']",
		label="(reset_mode | node_bus_off)",
		lineno=3500];
	"3503:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44f6b18890>",
		fillcolor=turquoise,
		label="3503:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"3500:IF" -> "3503:BL"	 [cond="['reset_mode', 'node_bus_off']",
		label="!((reset_mode | node_bus_off))",
		lineno=3500];
	"3499:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44f6b24b50>",
		fillcolor=turquoise,
		label="3499:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"3499:BL" -> "3500:IF"	 [cond="[]",
		lineno=None];
	"3519:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44f6b24310>",
		fillcolor=cadetblue,
		label="3519:BS
tx_next = 1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44f6b24310>]",
		style=filled,
		typ=BlockingSubstitution];
	"3519:BS" -> "Leaf_3496:AL"	 [cond="[]",
		lineno=None];
	"3511:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44f6b18550>",
		fillcolor=cadetblue,
		label="3511:BS
tx_next = 1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44f6b18550>]",
		style=filled,
		typ=BlockingSubstitution];
	"3508:IF" -> "3511:BS"	 [cond="['node_error_passive']",
		label="!(node_error_passive)",
		lineno=3508];
	"3509:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44f6b18690>",
		fillcolor=cadetblue,
		label="3509:BS
tx_next = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44f6b18690>]",
		style=filled,
		typ=BlockingSubstitution];
	"3508:IF" -> "3509:BS"	 [cond="['node_error_passive']",
		label=node_error_passive,
		lineno=3508];
	"3511:BS" -> "Leaf_3496:AL"	 [cond="[]",
		lineno=None];
	"3518:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44f6b24190>",
		fillcolor=springgreen,
		label="3518:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"3518:IF" -> "3519:BS"	 [cond="['overload_cnt1']",
		label="(overload_cnt1 < 3'd6)",
		lineno=3518];
	"3521:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44f6b241d0>",
		fillcolor=cadetblue,
		label="3521:BS
tx_next = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44f6b241d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"3518:IF" -> "3521:BS"	 [cond="['overload_cnt1']",
		label="!((overload_cnt1 < 3'd6))",
		lineno=3518];
	"3525:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44f6b18990>",
		fillcolor=springgreen,
		label="3525:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"3528:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44f6b189d0>",
		fillcolor=cadetblue,
		label="3528:BS
tx_next = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44f6b189d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"3525:IF" -> "3528:BS"	 [cond="['send_ack']",
		label="!(send_ack)",
		lineno=3525];
	"3526:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44f6b18b10>",
		fillcolor=cadetblue,
		label="3526:BS
tx_next = 1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44f6b18b10>]",
		style=filled,
		typ=BlockingSubstitution];
	"3525:IF" -> "3526:BS"	 [cond="['send_ack']",
		label=send_ack,
		lineno=3525];
	"3521:BS" -> "Leaf_3496:AL"	 [cond="[]",
		lineno=None];
	"3517:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44f6b24150>",
		fillcolor=turquoise,
		label="3517:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"3517:BL" -> "3518:IF"	 [cond="[]",
		lineno=None];
	"3505:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44f6b24690>",
		fillcolor=turquoise,
		label="3505:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"3506:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44f6b246d0>",
		fillcolor=springgreen,
		label="3506:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"3505:BL" -> "3506:IF"	 [cond="[]",
		lineno=None];
	"3514:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44f6b24710>",
		fillcolor=cadetblue,
		label="3514:BS
tx_next = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44f6b24710>]",
		style=filled,
		typ=BlockingSubstitution];
	"3514:BS" -> "Leaf_3496:AL"	 [cond="[]",
		lineno=None];
	"3506:IF" -> "3507:BL"	 [cond="['error_cnt1']",
		label="(error_cnt1 < 3'd6)",
		lineno=3506];
	"3506:IF" -> "3514:BS"	 [cond="['error_cnt1']",
		label="!((error_cnt1 < 3'd6))",
		lineno=3506];
	"3528:BS" -> "Leaf_3496:AL"	 [cond="[]",
		lineno=None];
	"3496:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f44f6b24b90>",
		clk_sens=False,
		fillcolor=gold,
		label="3496:AL",
		sens="['reset_mode', 'node_bus_off', 'tx_state', 'go_tx', 'bit_de_stuff_tx', 'tx_bit', 'tx_q', 'send_ack', 'go_overload_frame', 'overload_\
frame', 'overload_cnt1', 'go_error_frame', 'error_frame', 'error_cnt1', 'node_error_passive']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['bit_de_stuff_tx', 'go_tx', 'error_cnt1', 'overload_cnt1', 'reset_mode', 'go_overload_frame', 'go_error_frame', 'node_bus_off', '\
node_error_passive', 'send_ack', 'tx_state', 'tx_bit', 'error_frame', 'overload_frame', 'tx_q']"];
	"3496:AL" -> "3499:BL"	 [cond="[]",
		lineno=None];
	"3516:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44f6b18910>",
		fillcolor=springgreen,
		label="3516:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"3516:IF" -> "3517:BL"	 [cond="['go_overload_frame', 'overload_frame']",
		label="(go_overload_frame | overload_frame)",
		lineno=3516];
	"3523:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44f6b18950>",
		fillcolor=springgreen,
		label="3523:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"3516:IF" -> "3523:IF"	 [cond="['go_overload_frame', 'overload_frame']",
		label="!((go_overload_frame | overload_frame))",
		lineno=3516];
	"3509:BS" -> "Leaf_3496:AL"	 [cond="[]",
		lineno=None];
	"3526:BS" -> "Leaf_3496:AL"	 [cond="[]",
		lineno=None];
	"3524:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44f6b18c90>",
		fillcolor=cadetblue,
		label="3524:BS
tx_next = ~bit_de_stuff_tx & tx_bit | bit_de_stuff_tx & ~tx_q;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44f6b18c90>]",
		style=filled,
		typ=BlockingSubstitution];
	"3524:BS" -> "Leaf_3496:AL"	 [cond="[]",
		lineno=None];
	"3504:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44f6b188d0>",
		fillcolor=springgreen,
		label="3504:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"3504:IF" -> "3505:BL"	 [cond="['go_error_frame', 'error_frame']",
		label="(go_error_frame | error_frame)",
		lineno=3504];
	"3504:IF" -> "3516:IF"	 [cond="['go_error_frame', 'error_frame']",
		label="!((go_error_frame | error_frame))",
		lineno=3504];
	"3523:IF" -> "3525:IF"	 [cond="['go_tx', 'tx_state']",
		label="!((go_tx | tx_state))",
		lineno=3523];
	"3523:IF" -> "3524:BS"	 [cond="['go_tx', 'tx_state']",
		label="(go_tx | tx_state)",
		lineno=3523];
	"3503:BL" -> "3504:IF"	 [cond="[]",
		lineno=None];
}
