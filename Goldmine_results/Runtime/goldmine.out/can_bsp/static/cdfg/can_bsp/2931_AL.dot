strict digraph "" {
	node [label="\N"];
	"Leaf_2931:AL"	 [def_var="['crc_in']",
		label="Leaf_2931:AL"];
	"2935:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44f6917d50>",
		fillcolor=springgreen,
		label="2935:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"2936:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44f6917d90>",
		fillcolor=firebrick,
		label="2936:NS
crc_in <= #Tp { crc_in[13:0], sampled_bit };",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44f6917d90>]",
		style=filled,
		typ=NonblockingSubstitution];
	"2935:IF" -> "2936:NS"	 [cond="['sample_point', 'rx_crc', 'bit_de_stuff']",
		label="(sample_point & rx_crc & ~bit_de_stuff)",
		lineno=2935];
	"2932:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44f69302d0>",
		fillcolor=turquoise,
		label="2932:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"2933:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44f6930310>",
		fillcolor=springgreen,
		label="2933:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"2932:BL" -> "2933:IF"	 [cond="[]",
		lineno=None];
	"2936:NS" -> "Leaf_2931:AL"	 [cond="[]",
		lineno=None];
	"2934:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44f69303d0>",
		fillcolor=firebrick,
		label="2934:NS
crc_in <= 15'h0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44f69303d0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"2934:NS" -> "Leaf_2931:AL"	 [cond="[]",
		lineno=None];
	"2931:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f44f69304d0>",
		clk_sens=True,
		fillcolor=gold,
		label="2931:AL",
		sens="['clk', 'rst']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['sample_point', 'sampled_bit', 'bit_de_stuff', 'rx_crc', 'rst', 'crc_in']"];
	"2931:AL" -> "2932:BL"	 [cond="[]",
		lineno=None];
	"2933:IF" -> "2935:IF"	 [cond="['rst']",
		label="!(rst)",
		lineno=2933];
	"2933:IF" -> "2934:NS"	 [cond="['rst']",
		label=rst,
		lineno=2933];
}
