strict digraph "" {
	node [label="\N"];
	"1758:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44f6bb5e50>",
		fillcolor=springgreen,
		label="1758:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1759:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44f6b6b450>",
		fillcolor=firebrick,
		label="1759:NS
info_cnt <= #Tp 7'h0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44f6b6b450>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1758:IF" -> "1759:NS"	 [cond="['reset_mode']",
		label=reset_mode,
		lineno=1758];
	"1760:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44f6bb5890>",
		fillcolor=springgreen,
		label="1760:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1758:IF" -> "1760:IF"	 [cond="['reset_mode']",
		label="!(reset_mode)",
		lineno=1758];
	"1762:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44f6bb5e10>",
		fillcolor=springgreen,
		label="1762:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1763:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44f6bb5850>",
		fillcolor=firebrick,
		label="1763:NS
info_cnt <= #Tp info_cnt - 1'b1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44f6bb5850>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1762:IF" -> "1763:NS"	 [cond="['release_buffer', 'info_empty']",
		label="(release_buffer & ~info_empty)",
		lineno=1762];
	"1764:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44f6bb5950>",
		fillcolor=springgreen,
		label="1764:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1762:IF" -> "1764:IF"	 [cond="['release_buffer', 'info_empty']",
		label="!((release_buffer & ~info_empty))",
		lineno=1762];
	"Leaf_1754:AL"	 [def_var="['info_cnt']",
		label="Leaf_1754:AL"];
	"1759:NS" -> "Leaf_1754:AL"	 [cond="[]",
		lineno=None];
	"1756:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44f6b6b650>",
		fillcolor=springgreen,
		label="1756:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1756:IF" -> "1758:IF"	 [cond="['rst']",
		label="!(rst)",
		lineno=1756];
	"1757:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44f6b6b690>",
		fillcolor=firebrick,
		label="1757:NS
info_cnt <= #Tp 7'h0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44f6b6b690>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1756:IF" -> "1757:NS"	 [cond="['rst']",
		label=rst,
		lineno=1756];
	"1755:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44f6b6b890>",
		fillcolor=turquoise,
		label="1755:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1755:BL" -> "1756:IF"	 [cond="[]",
		lineno=None];
	"1761:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44f6bb5cd0>",
		fillcolor=turquoise,
		label="1761:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1761:BL" -> "1762:IF"	 [cond="[]",
		lineno=None];
	"1763:NS" -> "Leaf_1754:AL"	 [cond="[]",
		lineno=None];
	"1754:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f44f6b6b8d0>",
		clk_sens=True,
		fillcolor=gold,
		label="1754:AL",
		sens="['clk', 'rst']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['info_empty', 'reset_mode', 'release_buffer', 'rst', 'info_full', 'write_length_info', 'info_cnt']"];
	"1754:AL" -> "1755:BL"	 [cond="[]",
		lineno=None];
	"1757:NS" -> "Leaf_1754:AL"	 [cond="[]",
		lineno=None];
	"1765:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44f6bb5d90>",
		fillcolor=firebrick,
		label="1765:NS
info_cnt <= #Tp info_cnt + 1'b1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44f6bb5d90>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1765:NS" -> "Leaf_1754:AL"	 [cond="[]",
		lineno=None];
	"1760:IF" -> "1761:BL"	 [cond="['write_length_info', 'release_buffer']",
		label="(write_length_info ^ release_buffer)",
		lineno=1760];
	"1764:IF" -> "1765:NS"	 [cond="['write_length_info', 'info_full']",
		label="(write_length_info & ~info_full)",
		lineno=1764];
}
