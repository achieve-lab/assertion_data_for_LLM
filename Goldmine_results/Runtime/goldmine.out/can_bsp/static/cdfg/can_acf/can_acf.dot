strict digraph "compose( ,  )" {
	node [label="\N"];
	"1029:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44d6369250>",
		fillcolor=turquoise,
		label="1029:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1030:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44d63697d0>",
		fillcolor=springgreen,
		label="1030:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1029:BL" -> "1030:IF"	 [cond="[]",
		lineno=None];
	"1023:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44d6389d50>",
		fillcolor=turquoise,
		label="1023:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1024:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44d6389ed0>",
		fillcolor=springgreen,
		label="1024:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1023:BL" -> "1024:IF"	 [cond="[]",
		lineno=None];
	"1031:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44d6369450>",
		fillcolor=turquoise,
		label="1031:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1032:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44d6369750>",
		fillcolor=springgreen,
		label="1032:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1031:BL" -> "1032:IF"	 [cond="[]",
		lineno=None];
	"863:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f44d62f1890>",
		def_var="['match_sf_std']",
		fillcolor=deepskyblue,
		label="863:AS
match_sf_std = ((id[3] == acceptance_code_0[0]) | acceptance_mask_0[0]) & ((id[4] == acceptance_code_0[1]) | acceptance_mask_\
0[1]) & ((id[5] == acceptance_code_0[2]) | acceptance_mask_0[2]) & ((id[6] == acceptance_code_0[3]) | acceptance_mask_0[3]) & ((\
id[7] == acceptance_code_0[4]) | acceptance_mask_0[4]) & ((id[8] == acceptance_code_0[5]) | acceptance_mask_0[5]) & ((id[9] == acceptance_\
code_0[6]) | acceptance_mask_0[6]) & ((id[10] == acceptance_code_0[7]) | acceptance_mask_0[7]) & ((rtr1 == acceptance_code_1[4]) | \
acceptance_mask_1[4]) & ((id[0] == acceptance_code_1[5]) | acceptance_mask_1[5]) & ((id[1] == acceptance_code_1[6]) | acceptance_\
mask_1[6]) & ((id[2] == acceptance_code_1[7]) | acceptance_mask_1[7]) & ((data0[0] == acceptance_code_2[0]) | acceptance_mask_2[\
0] | no_byte0) & ((data0[1] == acceptance_code_2[1]) | acceptance_mask_2[1] | no_byte0) & ((data0[2] == acceptance_code_2[2]) | \
acceptance_mask_2[2] | no_byte0) & ((data0[3] == acceptance_code_2[3]) | acceptance_mask_2[3] | no_byte0) & ((data0[4] == acceptance_\
code_2[4]) | acceptance_mask_2[4] | no_byte0) & ((data0[5] == acceptance_code_2[5]) | acceptance_mask_2[5] | no_byte0) & ((data0[\
6] == acceptance_code_2[6]) | acceptance_mask_2[6] | no_byte0) & ((data0[7] == acceptance_code_2[7]) | acceptance_mask_2[7] | no_\
byte0) & ((data1[0] == acceptance_code_3[0]) | acceptance_mask_3[0] | no_byte1) & ((data1[1] == acceptance_code_3[1]) | acceptance_\
mask_3[1] | no_byte1) & ((data1[2] == acceptance_code_3[2]) | acceptance_mask_3[2] | no_byte1) & ((data1[3] == acceptance_code_3[\
3]) | acceptance_mask_3[3] | no_byte1) & ((data1[4] == acceptance_code_3[4]) | acceptance_mask_3[4] | no_byte1) & ((data1[5] == \
acceptance_code_3[5]) | acceptance_mask_3[5] | no_byte1) & ((data1[6] == acceptance_code_3[6]) | acceptance_mask_3[6] | no_byte1) & ((\
data1[7] == acceptance_code_3[7]) | acceptance_mask_3[7] | no_byte1);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_\
mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_\
0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'rtr1', '\
acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_\
mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'data0', 'acceptance_code_2', 'acceptance_mask_2', 'no_byte0', 'data0', '\
acceptance_code_2', 'acceptance_mask_2', 'no_byte0', 'data0', 'acceptance_code_2', 'acceptance_mask_2', 'no_byte0', 'data0', 'acceptance_\
code_2', 'acceptance_mask_2', 'no_byte0', 'data0', 'acceptance_code_2', 'acceptance_mask_2', 'no_byte0', 'data0', 'acceptance_code_\
2', 'acceptance_mask_2', 'no_byte0', 'data0', 'acceptance_code_2', 'acceptance_mask_2', 'no_byte0', 'data0', 'acceptance_code_2', '\
acceptance_mask_2', 'no_byte0', 'data1', 'acceptance_code_3', 'acceptance_mask_3', 'no_byte1', 'data1', 'acceptance_code_3', 'acceptance_\
mask_3', 'no_byte1', 'data1', 'acceptance_code_3', 'acceptance_mask_3', 'no_byte1', 'data1', 'acceptance_code_3', 'acceptance_mask_\
3', 'no_byte1', 'data1', 'acceptance_code_3', 'acceptance_mask_3', 'no_byte1', 'data1', 'acceptance_code_3', 'acceptance_mask_3', '\
no_byte1', 'data1', 'acceptance_code_3', 'acceptance_mask_3', 'no_byte1', 'data1', 'acceptance_code_3', 'acceptance_mask_3', 'no_\
byte1']"];
	"1022:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f44d6389d90>",
		clk_sens=True,
		fillcolor=gold,
		label="1022:AL",
		sens="['clk', 'rst']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['reset_mode', 'match_sf_ext', 'extended_mode', 'match_sf_std', 'acceptance_filter_mode', 'go_rx_inter', 'go_error_frame', 'match_\
df_ext', 'match_df_std', 'go_rx_crc_lim', 'rst', 'ide', 'match']"];
	"863:AS" -> "1022:AL";
	"1046:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44d6369ed0>",
		fillcolor=firebrick,
		label="1046:NS
id_ok <= #Tp match;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44d6369ed0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"Leaf_1022:AL"	 [def_var="['id_ok']",
		label="Leaf_1022:AL"];
	"1046:NS" -> "Leaf_1022:AL"	 [cond="[]",
		lineno=None];
	"1048:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44d5e6e0d0>",
		fillcolor=springgreen,
		label="1048:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1049:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44d5e6e310>",
		fillcolor=firebrick,
		label="1049:NS
id_ok <= #Tp 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44d5e6e310>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1048:IF" -> "1049:NS"	 [cond="['reset_mode', 'go_rx_inter', 'go_error_frame']",
		label="(reset_mode | go_rx_inter | go_error_frame)",
		lineno=1048];
	"1022:AL" -> "1023:BL"	 [cond="[]",
		lineno=None];
	"1033:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44d6369710>",
		fillcolor=firebrick,
		label="1033:NS
id_ok <= #Tp match_df_ext;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44d6369710>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1032:IF" -> "1033:NS"	 [cond="['ide']",
		label=ide,
		lineno=1032];
	"1035:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44d6369950>",
		fillcolor=firebrick,
		label="1035:NS
id_ok <= #Tp match_df_std;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44d6369950>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1032:IF" -> "1035:NS"	 [cond="['ide']",
		label="!(ide)",
		lineno=1032];
	"937:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f44d637ad50>",
		def_var="['match_df_std']",
		fillcolor=deepskyblue,
		label="937:AS
match_df_std = ((id[3] == acceptance_code_0[0]) | acceptance_mask_0[0]) & ((id[4] == acceptance_code_0[1]) | acceptance_mask_\
0[1]) & ((id[5] == acceptance_code_0[2]) | acceptance_mask_0[2]) & ((id[6] == acceptance_code_0[3]) | acceptance_mask_0[3]) & ((\
id[7] == acceptance_code_0[4]) | acceptance_mask_0[4]) & ((id[8] == acceptance_code_0[5]) | acceptance_mask_0[5]) & ((id[9] == acceptance_\
code_0[6]) | acceptance_mask_0[6]) & ((id[10] == acceptance_code_0[7]) | acceptance_mask_0[7]) & ((rtr1 == acceptance_code_1[4]) | \
acceptance_mask_1[4]) & ((id[0] == acceptance_code_1[5]) | acceptance_mask_1[5]) & ((id[1] == acceptance_code_1[6]) | acceptance_\
mask_1[6]) & ((id[2] == acceptance_code_1[7]) | acceptance_mask_1[7]) & ((data0[0] == acceptance_code_3[0]) | acceptance_mask_3[\
0] | no_byte0) & ((data0[1] == acceptance_code_3[1]) | acceptance_mask_3[1] | no_byte0) & ((data0[2] == acceptance_code_3[2]) | \
acceptance_mask_3[2] | no_byte0) & ((data0[3] == acceptance_code_3[3]) | acceptance_mask_3[3] | no_byte0) & ((data0[4] == acceptance_\
code_1[0]) | acceptance_mask_1[0] | no_byte0) & ((data0[5] == acceptance_code_1[1]) | acceptance_mask_1[1] | no_byte0) & ((data0[\
6] == acceptance_code_1[2]) | acceptance_mask_1[2] | no_byte0) & ((data0[7] == acceptance_code_1[3]) | acceptance_mask_1[3] | no_\
byte0) | ((id[3] == acceptance_code_2[0]) | acceptance_mask_2[0]) & ((id[4] == acceptance_code_2[1]) | acceptance_mask_2[1]) & ((\
id[5] == acceptance_code_2[2]) | acceptance_mask_2[2]) & ((id[6] == acceptance_code_2[3]) | acceptance_mask_2[3]) & ((id[7] == acceptance_\
code_2[4]) | acceptance_mask_2[4]) & ((id[8] == acceptance_code_2[5]) | acceptance_mask_2[5]) & ((id[9] == acceptance_code_2[6]) | \
acceptance_mask_2[6]) & ((id[10] == acceptance_code_2[7]) | acceptance_mask_2[7]) & ((rtr1 == acceptance_code_3[4]) | acceptance_\
mask_3[4]) & ((id[0] == acceptance_code_3[5]) | acceptance_mask_3[5]) & ((id[1] == acceptance_code_3[6]) | acceptance_mask_3[6]) & ((\
id[2] == acceptance_code_3[7]) | acceptance_mask_3[7]);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_\
mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_\
0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'rtr1', '\
acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_\
mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'data0', 'acceptance_code_3', 'acceptance_mask_3', 'no_byte0', 'data0', '\
acceptance_code_3', 'acceptance_mask_3', 'no_byte0', 'data0', 'acceptance_code_3', 'acceptance_mask_3', 'no_byte0', 'data0', 'acceptance_\
code_3', 'acceptance_mask_3', 'no_byte0', 'data0', 'acceptance_code_1', 'acceptance_mask_1', 'no_byte0', 'data0', 'acceptance_code_\
1', 'acceptance_mask_1', 'no_byte0', 'data0', 'acceptance_code_1', 'acceptance_mask_1', 'no_byte0', 'data0', 'acceptance_code_1', '\
acceptance_mask_1', 'no_byte0', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', '\
id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_\
mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_\
2', 'acceptance_mask_2', 'rtr1', 'acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3', 'id', '\
acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3']"];
	"937:AS" -> "1022:AL";
	"1033:NS" -> "Leaf_1022:AL"	 [cond="[]",
		lineno=None];
	"980:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f44d6367190>",
		def_var="['match_df_ext']",
		fillcolor=deepskyblue,
		label="980:AS
match_df_ext = ((id[21] == acceptance_code_0[0]) | acceptance_mask_0[0]) & ((id[22] == acceptance_code_0[1]) | acceptance_\
mask_0[1]) & ((id[23] == acceptance_code_0[2]) | acceptance_mask_0[2]) & ((id[24] == acceptance_code_0[3]) | acceptance_mask_0[3]) & ((\
id[25] == acceptance_code_0[4]) | acceptance_mask_0[4]) & ((id[26] == acceptance_code_0[5]) | acceptance_mask_0[5]) & ((id[27] == \
acceptance_code_0[6]) | acceptance_mask_0[6]) & ((id[28] == acceptance_code_0[7]) | acceptance_mask_0[7]) & ((id[13] == acceptance_\
code_1[0]) | acceptance_mask_1[0]) & ((id[14] == acceptance_code_1[1]) | acceptance_mask_1[1]) & ((id[15] == acceptance_code_1[2]) | \
acceptance_mask_1[2]) & ((id[16] == acceptance_code_1[3]) | acceptance_mask_1[3]) & ((id[17] == acceptance_code_1[4]) | acceptance_\
mask_1[4]) & ((id[18] == acceptance_code_1[5]) | acceptance_mask_1[5]) & ((id[19] == acceptance_code_1[6]) | acceptance_mask_1[6]) & ((\
id[20] == acceptance_code_1[7]) | acceptance_mask_1[7]) | ((id[21] == acceptance_code_2[0]) | acceptance_mask_2[0]) & ((id[22] == \
acceptance_code_2[1]) | acceptance_mask_2[1]) & ((id[23] == acceptance_code_2[2]) | acceptance_mask_2[2]) & ((id[24] == acceptance_\
code_2[3]) | acceptance_mask_2[3]) & ((id[25] == acceptance_code_2[4]) | acceptance_mask_2[4]) & ((id[26] == acceptance_code_2[5]) | \
acceptance_mask_2[5]) & ((id[27] == acceptance_code_2[6]) | acceptance_mask_2[6]) & ((id[28] == acceptance_code_2[7]) | acceptance_\
mask_2[7]) & ((id[13] == acceptance_code_3[0]) | acceptance_mask_3[0]) & ((id[14] == acceptance_code_3[1]) | acceptance_mask_3[1]) & ((\
id[15] == acceptance_code_3[2]) | acceptance_mask_3[2]) & ((id[16] == acceptance_code_3[3]) | acceptance_mask_3[3]) & ((id[17] == \
acceptance_code_3[4]) | acceptance_mask_3[4]) & ((id[18] == acceptance_code_3[5]) | acceptance_mask_3[5]) & ((id[19] == acceptance_\
code_3[6]) | acceptance_mask_3[6]) & ((id[20] == acceptance_code_3[7]) | acceptance_mask_3[7]);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_\
mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_\
0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', '\
acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_\
mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_\
1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', '\
acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_\
mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_\
2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', '\
acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_\
mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_\
3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3']"];
	"980:AS" -> "1022:AL";
	"1028:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44d63699d0>",
		fillcolor=springgreen,
		label="1028:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1028:IF" -> "1029:BL"	 [cond="['extended_mode']",
		label=extended_mode,
		lineno=1028];
	"1028:IF" -> "1046:NS"	 [cond="['extended_mode']",
		label="!(extended_mode)",
		lineno=1028];
	"1040:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44d6369c10>",
		fillcolor=firebrick,
		label="1040:NS
id_ok <= #Tp match_sf_ext;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44d6369c10>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1040:NS" -> "Leaf_1022:AL"	 [cond="[]",
		lineno=None];
	"1027:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44d63690d0>",
		fillcolor=turquoise,
		label="1027:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1027:BL" -> "1028:IF"	 [cond="[]",
		lineno=None];
	"1042:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44d6369e50>",
		fillcolor=firebrick,
		label="1042:NS
id_ok <= #Tp match_sf_std;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44d6369e50>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1042:NS" -> "Leaf_1022:AL"	 [cond="[]",
		lineno=None];
	"899:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f44d65fbfd0>",
		def_var="['match_sf_ext']",
		fillcolor=deepskyblue,
		label="899:AS
match_sf_ext = ((id[21] == acceptance_code_0[0]) | acceptance_mask_0[0]) & ((id[22] == acceptance_code_0[1]) | acceptance_\
mask_0[1]) & ((id[23] == acceptance_code_0[2]) | acceptance_mask_0[2]) & ((id[24] == acceptance_code_0[3]) | acceptance_mask_0[3]) & ((\
id[25] == acceptance_code_0[4]) | acceptance_mask_0[4]) & ((id[26] == acceptance_code_0[5]) | acceptance_mask_0[5]) & ((id[27] == \
acceptance_code_0[6]) | acceptance_mask_0[6]) & ((id[28] == acceptance_code_0[7]) | acceptance_mask_0[7]) & ((id[13] == acceptance_\
code_1[0]) | acceptance_mask_1[0]) & ((id[14] == acceptance_code_1[1]) | acceptance_mask_1[1]) & ((id[15] == acceptance_code_1[2]) | \
acceptance_mask_1[2]) & ((id[16] == acceptance_code_1[3]) | acceptance_mask_1[3]) & ((id[17] == acceptance_code_1[4]) | acceptance_\
mask_1[4]) & ((id[18] == acceptance_code_1[5]) | acceptance_mask_1[5]) & ((id[19] == acceptance_code_1[6]) | acceptance_mask_1[6]) & ((\
id[20] == acceptance_code_1[7]) | acceptance_mask_1[7]) & ((id[5] == acceptance_code_2[0]) | acceptance_mask_2[0]) & ((id[6] == \
acceptance_code_2[1]) | acceptance_mask_2[1]) & ((id[7] == acceptance_code_2[2]) | acceptance_mask_2[2]) & ((id[8] == acceptance_\
code_2[3]) | acceptance_mask_2[3]) & ((id[9] == acceptance_code_2[4]) | acceptance_mask_2[4]) & ((id[10] == acceptance_code_2[5]) | \
acceptance_mask_2[5]) & ((id[11] == acceptance_code_2[6]) | acceptance_mask_2[6]) & ((id[12] == acceptance_code_2[7]) | acceptance_\
mask_2[7]) & ((rtr2 == acceptance_code_3[2]) | acceptance_mask_3[2]) & ((id[0] == acceptance_code_3[3]) | acceptance_mask_3[3]) & ((\
id[1] == acceptance_code_3[4]) | acceptance_mask_3[4]) & ((id[2] == acceptance_code_3[5]) | acceptance_mask_3[5]) & ((id[3] == acceptance_\
code_3[6]) | acceptance_mask_3[6]) & ((id[4] == acceptance_code_3[7]) | acceptance_mask_3[7]);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_\
mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_\
0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', '\
acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_\
mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_\
1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', 'acceptance_code_1', 'acceptance_mask_1', 'id', '\
acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_\
mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_\
2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'id', 'acceptance_code_2', 'acceptance_mask_2', 'rtr2', '\
acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_\
mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_3', 'acceptance_mask_3', 'id', 'acceptance_code_\
3', 'acceptance_mask_3']"];
	"899:AS" -> "1022:AL";
	"1026:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44d6369fd0>",
		fillcolor=springgreen,
		label="1026:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1024:IF" -> "1026:IF"	 [cond="['rst']",
		label="!(rst)",
		lineno=1024];
	"1025:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44d6389f10>",
		fillcolor=firebrick,
		label="1025:NS
id_ok <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f44d6389f10>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1024:IF" -> "1025:NS"	 [cond="['rst']",
		label=rst,
		lineno=1024];
	"1049:NS" -> "Leaf_1022:AL"	 [cond="[]",
		lineno=None];
	"1035:NS" -> "Leaf_1022:AL"	 [cond="[]",
		lineno=None];
	"1030:IF" -> "1031:BL"	 [cond="['acceptance_filter_mode']",
		label="(~acceptance_filter_mode)",
		lineno=1030];
	"1038:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44d6369410>",
		fillcolor=turquoise,
		label="1038:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1030:IF" -> "1038:BL"	 [cond="['acceptance_filter_mode']",
		label="!((~acceptance_filter_mode))",
		lineno=1030];
	"851:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f44d672cc50>",
		def_var="['match']",
		fillcolor=deepskyblue,
		label="851:AS
match = ((id[3] == acceptance_code_0[0]) | acceptance_mask_0[0]) & ((id[4] == acceptance_code_0[1]) | acceptance_mask_0[1]) & ((\
id[5] == acceptance_code_0[2]) | acceptance_mask_0[2]) & ((id[6] == acceptance_code_0[3]) | acceptance_mask_0[3]) & ((id[7] == acceptance_\
code_0[4]) | acceptance_mask_0[4]) & ((id[8] == acceptance_code_0[5]) | acceptance_mask_0[5]) & ((id[9] == acceptance_code_0[6]) | \
acceptance_mask_0[6]) & ((id[10] == acceptance_code_0[7]) | acceptance_mask_0[7]);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_\
mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_\
0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0', 'id', 'acceptance_code_0', 'acceptance_mask_0']"];
	"851:AS" -> "1022:AL";
	"1026:IF" -> "1048:IF"	 [cond="['go_rx_crc_lim']",
		label="!(go_rx_crc_lim)",
		lineno=1026];
	"1026:IF" -> "1027:BL"	 [cond="['go_rx_crc_lim']",
		label=go_rx_crc_lim,
		lineno=1026];
	"1025:NS" -> "Leaf_1022:AL"	 [cond="[]",
		lineno=None];
	"1039:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44d6369c50>",
		fillcolor=springgreen,
		label="1039:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1039:IF" -> "1040:NS"	 [cond="['ide']",
		label=ide,
		lineno=1039];
	"1039:IF" -> "1042:NS"	 [cond="['ide']",
		label="!(ide)",
		lineno=1039];
	"1038:BL" -> "1039:IF"	 [cond="[]",
		lineno=None];
}
