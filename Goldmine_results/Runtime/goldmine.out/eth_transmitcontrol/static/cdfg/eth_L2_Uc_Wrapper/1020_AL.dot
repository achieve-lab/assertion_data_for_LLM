strict digraph "" {
	node [label="\N"];
	"1028:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f83b382fc50>",
		fillcolor=lightcyan,
		label="1028:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1028:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f83b382f1d0>",
		fillcolor=turquoise,
		label="1028:BL
TxData_wrapped_out[7:0] <= DMAC[47:40];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f83b382ff90>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f8391e56190>]",
		style=filled,
		typ=Block];
	"1028:CA" -> "1028:BL"	 [cond="[]",
		lineno=None];
	"1029:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f83b37b5490>",
		fillcolor=turquoise,
		label="1029:BL
TxData_wrapped_out[7:0] <= DMAC[39:32];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f8391e566d0>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f83b37b5310>]",
		style=filled,
		typ=Block];
	"Leaf_1020:AL"	 [def_var="['write_fifo', 'read_fifo', 'ByteCnt', 'PreNib15State', 'TxData_wrapped_out']",
		label="Leaf_1020:AL"];
	"1029:BL" -> "Leaf_1020:AL"	 [cond="[]",
		lineno=None];
	"1023:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f83b37b5450>",
		fillcolor=turquoise,
		label="1023:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1024:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7f83b37b54d0>",
		fillcolor=linen,
		label="1024:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"1023:BL" -> "1024:CS"	 [cond="[]",
		lineno=None];
	"1040:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f83b37d58d0>",
		fillcolor=lightcyan,
		label="1040:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1040:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f83b37d5910>",
		fillcolor=turquoise,
		label="1040:BL
read_fifo <= 1;
TxData_wrapped_out <= TxData_wrapped_out_wire;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f83b37d5950>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f83b37d5a10>]",
		style=filled,
		typ=Block];
	"1040:CA" -> "1040:BL"	 [cond="[]",
		lineno=None];
	"1030:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f83b37b5690>",
		fillcolor=turquoise,
		label="1030:BL
TxData_wrapped_out[7:0] <= DMAC[31:24];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f83b37b56d0>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f83b37b59d0>]",
		style=filled,
		typ=Block];
	"1030:BL" -> "Leaf_1020:AL"	 [cond="[]",
		lineno=None];
	"1031:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f83b37b5b50>",
		fillcolor=turquoise,
		label="1031:BL
TxData_wrapped_out[7:0] <= DMAC[23:16];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f83b37b5bd0>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f83b37b5ed0>]",
		style=filled,
		typ=Block];
	"1031:BL" -> "Leaf_1020:AL"	 [cond="[]",
		lineno=None];
	"1046:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f83b37e0190>",
		fillcolor=turquoise,
		label="1046:BL
ByteCnt <= 0;
read_fifo <= 0;
TxData_wrapped_out <= 8'h0;
PreNib15State <= 9'h0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f83b37d5bd0>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f83b37d5d10>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f83b37d5e50>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7f83b37d5fd0>]",
		style=filled,
		typ=Block];
	"1046:BL" -> "Leaf_1020:AL"	 [cond="[]",
		lineno=None];
	"1022:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f83b37e01d0>",
		fillcolor=springgreen,
		label="1022:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1022:IF" -> "1023:BL"	 [cond="['StateCount', 'StateLeftinQ', 'TxStartFrmIn']",
		label="(StateCount | StateLeftinQ | TxStartFrmIn)",
		lineno=1022];
	"1022:IF" -> "1046:BL"	 [cond="['StateCount', 'StateLeftinQ', 'TxStartFrmIn']",
		label="!((StateCount | StateLeftinQ | TxStartFrmIn))",
		lineno=1022];
	"1037:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f83b37cc990>",
		fillcolor=lightcyan,
		label="1037:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1037:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f83b37cca10>",
		fillcolor=turquoise,
		label="1037:BL
TxData_wrapped_out[7:0] <= MAC[23:16];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f83b37cca50>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f83b37ccd50>]",
		style=filled,
		typ=Block];
	"1037:CA" -> "1037:BL"	 [cond="[]",
		lineno=None];
	"1036:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f83b37cc510>",
		fillcolor=turquoise,
		label="1036:BL
TxData_wrapped_out[7:0] <= MAC[31:24];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f83b37cc550>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f83b37cc850>]",
		style=filled,
		typ=Block];
	"1036:BL" -> "Leaf_1020:AL"	 [cond="[]",
		lineno=None];
	"1039:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f83b37d53d0>",
		fillcolor=lightcyan,
		label="1039:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1039:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f83b37d5450>",
		fillcolor=turquoise,
		label="1039:BL
TxData_wrapped_out[7:0] <= MAC[7:0];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f83b37d5490>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f83b37d5790>]",
		style=filled,
		typ=Block];
	"1039:CA" -> "1039:BL"	 [cond="[]",
		lineno=None];
	"1024:CS" -> "1028:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1024];
	"1024:CS" -> "1040:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1024];
	"1024:CS" -> "1037:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1024];
	"1024:CS" -> "1039:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1024];
	"1038:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f83b37cce90>",
		fillcolor=lightcyan,
		label="1038:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1024:CS" -> "1038:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1024];
	"1032:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f83b37c6050>",
		fillcolor=lightcyan,
		label="1032:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1024:CS" -> "1032:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1024];
	"1031:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f83b37b5b10>",
		fillcolor=lightcyan,
		label="1031:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1024:CS" -> "1031:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1024];
	"1029:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f83b37b5590>",
		fillcolor=lightcyan,
		label="1029:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1024:CS" -> "1029:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1024];
	"1030:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f83b37b5650>",
		fillcolor=lightcyan,
		label="1030:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1024:CS" -> "1030:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1024];
	"1036:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f83b37cc490>",
		fillcolor=lightcyan,
		label="1036:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1024:CS" -> "1036:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1024];
	"1035:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f83b37c6f50>",
		fillcolor=lightcyan,
		label="1035:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1024:CS" -> "1035:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1024];
	"1033:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f83b37c6550>",
		fillcolor=lightcyan,
		label="1033:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1024:CS" -> "1033:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1024];
	"1034:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f83b37c6a50>",
		fillcolor=lightcyan,
		label="1034:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1024:CS" -> "1034:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1024];
	"1035:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f83b37c6fd0>",
		fillcolor=turquoise,
		label="1035:BL
TxData_wrapped_out[7:0] <= MAC[39:32];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f83b37cc050>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f83b37cc350>]",
		style=filled,
		typ=Block];
	"1035:BL" -> "Leaf_1020:AL"	 [cond="[]",
		lineno=None];
	"1058:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f83b37e07d0>",
		fillcolor=turquoise,
		label="1058:BL
ByteCnt = ByteCnt + 1;
write_fifo <= 1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f83b37e0490>, <pyverilog.vparser.ast.NonblockingSubstitution object at \
0x7f83b37e0690>]",
		style=filled,
		typ=Block];
	"1058:BL" -> "Leaf_1020:AL"	 [cond="[]",
		lineno=None];
	"1033:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f83b37c65d0>",
		fillcolor=turquoise,
		label="1033:BL
TxData_wrapped_out[7:0] <= DMAC[7:0];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f83b37c6610>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f83b37c6910>]",
		style=filled,
		typ=Block];
	"1033:BL" -> "Leaf_1020:AL"	 [cond="[]",
		lineno=None];
	"1038:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f83b37ccf10>",
		fillcolor=turquoise,
		label="1038:BL
TxData_wrapped_out[7:0] <= MAC[15:8];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f83b37ccf50>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f83b37d5290>]",
		style=filled,
		typ=Block];
	"1038:CA" -> "1038:BL"	 [cond="[]",
		lineno=None];
	"1053:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f83b37e0810>",
		fillcolor=springgreen,
		label="1053:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1054:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f83b37e0850>",
		fillcolor=turquoise,
		label="1054:BL
PreNib15State <= PreNib15State + 1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f83b37e0890>]",
		style=filled,
		typ=Block];
	"1053:IF" -> "1054:BL"	 [cond="['StateCount']",
		label=StateCount,
		lineno=1053];
	"1054:BL" -> "Leaf_1020:AL"	 [cond="[]",
		lineno=None];
	"1034:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f83b37c6ad0>",
		fillcolor=turquoise,
		label="1034:BL
TxData_wrapped_out[7:0] <= MAC[47:40];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f83b37c6b10>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f83b37c6e10>]",
		style=filled,
		typ=Block];
	"1034:BL" -> "Leaf_1020:AL"	 [cond="[]",
		lineno=None];
	"1032:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f83b37c60d0>",
		fillcolor=turquoise,
		label="1032:BL
TxData_wrapped_out[7:0] <= DMAC[15:8];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f83b37c6110>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f83b37c6410>]",
		style=filled,
		typ=Block];
	"1032:CA" -> "1032:BL"	 [cond="[]",
		lineno=None];
	"1031:CA" -> "1031:BL"	 [cond="[]",
		lineno=None];
	"1040:BL" -> "Leaf_1020:AL"	 [cond="[]",
		lineno=None];
	"1028:BL" -> "Leaf_1020:AL"	 [cond="[]",
		lineno=None];
	"1029:CA" -> "1029:BL"	 [cond="[]",
		lineno=None];
	"1030:CA" -> "1030:BL"	 [cond="[]",
		lineno=None];
	"1057:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f83b37e0b90>",
		fillcolor=springgreen,
		label="1057:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1057:IF" -> "1058:BL"	 [cond="['StateCount', 'PreNib15State']",
		label="(StateCount & (PreNib15State >= 8))",
		lineno=1057];
	"1062:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f83b37e0bd0>",
		fillcolor=turquoise,
		label="1062:BL
write_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f83b37e0c10>]",
		style=filled,
		typ=Block];
	"1057:IF" -> "1062:BL"	 [cond="['StateCount', 'PreNib15State']",
		label="!((StateCount & (PreNib15State >= 8)))",
		lineno=1057];
	"1020:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f83b37e0f10>",
		clk_sens=False,
		fillcolor=gold,
		label="1020:AL",
		sens="['Divided_2_clk']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['DMAC', 'StateLeftinQ', 'StateCount', 'TxStartFrmIn', 'TxData_wrapped_out_wire', 'PreNib15State', 'MAC', 'ByteCnt']"];
	"1021:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f83b37e90d0>",
		fillcolor=turquoise,
		label="1021:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1020:AL" -> "1021:BL"	 [cond="[]",
		lineno=None];
	"1039:BL" -> "Leaf_1020:AL"	 [cond="[]",
		lineno=None];
	"1037:BL" -> "Leaf_1020:AL"	 [cond="[]",
		lineno=None];
	"1036:CA" -> "1036:BL"	 [cond="[]",
		lineno=None];
	"1035:CA" -> "1035:BL"	 [cond="[]",
		lineno=None];
	"1033:CA" -> "1033:BL"	 [cond="[]",
		lineno=None];
	"1021:BL" -> "1022:IF"	 [cond="[]",
		lineno=None];
	"1021:BL" -> "1053:IF"	 [cond="[]",
		lineno=None];
	"1021:BL" -> "1057:IF"	 [cond="[]",
		lineno=None];
	"1032:BL" -> "Leaf_1020:AL"	 [cond="[]",
		lineno=None];
	"1034:CA" -> "1034:BL"	 [cond="[]",
		lineno=None];
	"1062:BL" -> "Leaf_1020:AL"	 [cond="[]",
		lineno=None];
	"1038:BL" -> "Leaf_1020:AL"	 [cond="[]",
		lineno=None];
}
