strict digraph "" {
	node [label="\N"];
	"117:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f314122c710>",
		fillcolor=springgreen,
		label="117:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"118:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f314122c910>",
		fillcolor=turquoise,
		label="118:BL
ca_state_reg <= ca_state_new;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f314122c950>]",
		style=filled,
		typ=Block];
	"117:IF" -> "118:BL"	 [cond="['ca_state_we']",
		label=ca_state_we,
		lineno=117];
	"Leaf_100:AL"	 [def_var="['ca_state_reg', 'update_rule_reg']",
		label="Leaf_100:AL"];
	"118:BL" -> "Leaf_100:AL"	 [cond="[]",
		lineno=None];
	"113:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f314122ccd0>",
		fillcolor=turquoise,
		label="113:BL
update_rule_reg <= update_rule;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f314122cb50>]",
		style=filled,
		typ=Block];
	"113:BL" -> "Leaf_100:AL"	 [cond="[]",
		lineno=None];
	"103:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f31411c1090>",
		fillcolor=turquoise,
		label="103:BL
update_rule_reg <= DEFAULT_RULE;
ca_state_reg <= 32'b00000000000000000000000000000000;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f314122cd10>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f314122ced0>]",
		style=filled,
		typ=Block];
	"103:BL" -> "Leaf_100:AL"	 [cond="[]",
		lineno=None];
	"112:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f31411c10d0>",
		fillcolor=springgreen,
		label="112:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"112:IF" -> "113:BL"	 [cond="['load_update_rule']",
		label=load_update_rule,
		lineno=112];
	"101:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f31411c1190>",
		fillcolor=turquoise,
		label="101:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"102:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f31411c11d0>",
		fillcolor=springgreen,
		label="102:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"101:BL" -> "102:IF"	 [cond="[]",
		lineno=None];
	"102:IF" -> "103:BL"	 [cond="['reset_n']",
		label="(!reset_n)",
		lineno=102];
	"109:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f31411c1210>",
		fillcolor=turquoise,
		label="109:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"102:IF" -> "109:BL"	 [cond="['reset_n']",
		label="!((!reset_n))",
		lineno=102];
	"100:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f31411c12d0>",
		clk_sens=True,
		fillcolor=gold,
		label="100:AL",
		sens="['clk']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['reset_n', 'ca_state_we', 'load_update_rule', 'ca_state_new', 'update_rule']"];
	"100:AL" -> "101:BL"	 [cond="[]",
		lineno=None];
	"109:BL" -> "117:IF"	 [cond="[]",
		lineno=None];
	"109:BL" -> "112:IF"	 [cond="[]",
		lineno=None];
}
