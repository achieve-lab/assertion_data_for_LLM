strict digraph "" {
	node [label="\N"];
	"1094:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb430332590>",
		fillcolor=springgreen,
		label="1094:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1097:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb43032c690>",
		fillcolor=springgreen,
		label="1097:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1094:IF" -> "1097:IF"	 [cond="['RxCheckEn', 'ByteCntEq4']",
		label="!((RxCheckEn & ByteCntEq4))",
		lineno=1094];
	"1095:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43032a7d0>",
		fillcolor=firebrick,
		label="1095:NS
UnicastOK <= (RxData[7:0] == MAC[31:24]) & UnicastOK;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43032a7d0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1094:IF" -> "1095:NS"	 [cond="['RxCheckEn', 'ByteCntEq4']",
		label="(RxCheckEn & ByteCntEq4)",
		lineno=1094];
	"1101:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430335d50>",
		fillcolor=firebrick,
		label="1101:NS
UnicastOK <= (RxData[7:0] == MAC[15:8]) & UnicastOK;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430335d50>]",
		style=filled,
		typ=NonblockingSubstitution];
	"Leaf_1083:AL"	 [def_var="['UnicastOK']",
		label="Leaf_1083:AL"];
	"1101:NS" -> "Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"1104:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43032ca50>",
		fillcolor=firebrick,
		label="1104:NS
UnicastOK <= (RxData[7:0] == MAC[7:0]) & UnicastOK;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43032ca50>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1104:NS" -> "Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"1103:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb43032c910>",
		fillcolor=springgreen,
		label="1103:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1103:IF" -> "1104:NS"	 [cond="['RxCheckEn', 'ByteCntEq7']",
		label="(RxCheckEn & ByteCntEq7)",
		lineno=1103];
	"1106:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb43032c410>",
		fillcolor=springgreen,
		label="1106:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1103:IF" -> "1106:IF"	 [cond="['RxCheckEn', 'ByteCntEq7']",
		label="!((RxCheckEn & ByteCntEq7))",
		lineno=1103];
	"1083:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb43032ac50>",
		clk_sens=True,
		fillcolor=gold,
		label="1083:AL",
		sens="['MRxClk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'RxCheckEn', 'RxData', 'MAC', 'RxAbort', 'RxEndFrm', 'ByteCntEq5', 'ByteCntEq4', 'ByteCntEq7', 'ByteCntEq6', 'UnicastOK', '\
ByteCntEq3', 'ByteCntEq2']"];
	"1084:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb43032add0>",
		fillcolor=turquoise,
		label="1084:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1083:AL" -> "1084:BL"	 [cond="[]",
		lineno=None];
	"1085:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb43032ae10>",
		fillcolor=springgreen,
		label="1085:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1084:BL" -> "1085:IF"	 [cond="[]",
		lineno=None];
	"1086:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb4302bb7d0>",
		fillcolor=firebrick,
		label="1086:NS
UnicastOK <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb4302bb7d0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1086:NS" -> "Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"1088:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb43032ae90>",
		fillcolor=springgreen,
		label="1088:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1091:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb43032aed0>",
		fillcolor=springgreen,
		label="1091:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1088:IF" -> "1091:IF"	 [cond="['RxCheckEn', 'ByteCntEq2']",
		label="!((RxCheckEn & ByteCntEq2))",
		lineno=1088];
	"1089:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb4302bb3d0>",
		fillcolor=firebrick,
		label="1089:NS
UnicastOK <= RxData[7:0] == MAC[47:40];",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb4302bb3d0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1088:IF" -> "1089:NS"	 [cond="['RxCheckEn', 'ByteCntEq2']",
		label="(RxCheckEn & ByteCntEq2)",
		lineno=1088];
	"1091:IF" -> "1094:IF"	 [cond="['RxCheckEn', 'ByteCntEq3']",
		label="!((RxCheckEn & ByteCntEq3))",
		lineno=1091];
	"1092:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43032af10>",
		fillcolor=firebrick,
		label="1092:NS
UnicastOK <= (RxData[7:0] == MAC[39:32]) & UnicastOK;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43032af10>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1091:IF" -> "1092:NS"	 [cond="['RxCheckEn', 'ByteCntEq3']",
		label="(RxCheckEn & ByteCntEq3)",
		lineno=1091];
	"1098:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43032a310>",
		fillcolor=firebrick,
		label="1098:NS
UnicastOK <= (RxData[7:0] == MAC[23:16]) & UnicastOK;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43032a310>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1098:NS" -> "Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"1097:IF" -> "1098:NS"	 [cond="['RxCheckEn', 'ByteCntEq5']",
		label="(RxCheckEn & ByteCntEq5)",
		lineno=1097];
	"1100:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb43032c050>",
		fillcolor=springgreen,
		label="1100:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1097:IF" -> "1100:IF"	 [cond="['RxCheckEn', 'ByteCntEq5']",
		label="!((RxCheckEn & ByteCntEq5))",
		lineno=1097];
	"1107:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43032cf10>",
		fillcolor=firebrick,
		label="1107:NS
UnicastOK <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43032cf10>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1106:IF" -> "1107:NS"	 [cond="['RxEndFrm', 'RxAbort']",
		label="(RxEndFrm | RxAbort)",
		lineno=1106];
	"1089:NS" -> "Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"1107:NS" -> "Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"1092:NS" -> "Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"1100:IF" -> "1101:NS"	 [cond="['RxCheckEn', 'ByteCntEq6']",
		label="(RxCheckEn & ByteCntEq6)",
		lineno=1100];
	"1100:IF" -> "1103:IF"	 [cond="['RxCheckEn', 'ByteCntEq6']",
		label="!((RxCheckEn & ByteCntEq6))",
		lineno=1100];
	"1085:IF" -> "1086:NS"	 [cond="['Reset']",
		label=Reset,
		lineno=1085];
	"1085:IF" -> "1088:IF"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=1085];
	"1095:NS" -> "Leaf_1083:AL"	 [cond="[]",
		lineno=None];
}
