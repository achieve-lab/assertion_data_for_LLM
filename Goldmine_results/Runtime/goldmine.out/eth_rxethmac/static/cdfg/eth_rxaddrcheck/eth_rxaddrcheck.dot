strict digraph "compose( ,  )" {
	node [label="\N"];
	"1094:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40ebb3050>",
		fillcolor=springgreen,
		label="1094:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1095:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40ebb3190>",
		fillcolor=firebrick,
		label="1095:NS
UnicastOK <= (RxData[7:0] == MAC[31:24]) & UnicastOK;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40ebb3190>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1094:IF" -> "1095:NS"	 [cond="['RxCheckEn', 'ByteCntEq4']",
		label="(RxCheckEn & ByteCntEq4)",
		lineno=1094];
	"1097:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40ebb35d0>",
		fillcolor=springgreen,
		label="1097:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1094:IF" -> "1097:IF"	 [cond="['RxCheckEn', 'ByteCntEq4']",
		label="!((RxCheckEn & ByteCntEq4))",
		lineno=1094];
	"1037:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f07cf50>",
		def_var="['RxAddressInvalid']",
		fillcolor=deepskyblue,
		label="1037:AS
RxAddressInvalid = ~(UnicastOK | BroadcastOK | MulticastOK | r_Pro);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['UnicastOK', 'BroadcastOK', 'MulticastOK', 'r_Pro']"];
	"1046:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb40f09b510>",
		clk_sens=True,
		fillcolor=gold,
		label="1046:AL",
		sens="['MRxClk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'ByteCntEq7', 'RxAddressInvalid', 'RxCheckEn']"];
	"1037:AS" -> "1046:AL";
	"1117:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fb40eb9fd90>",
		fillcolor=cadetblue,
		label="1117:BS
ByteHash = IntHash[23:16];",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fb40eb9fd90>]",
		style=filled,
		typ=BlockingSubstitution];
	"Leaf_1112:AL"	 [def_var="['ByteHash']",
		label="Leaf_1112:AL"];
	"1117:BS" -> "Leaf_1112:AL"	 [cond="[]",
		lineno=None];
	"Leaf_1058:AL"	 [def_var="['AddressMiss']",
		label="Leaf_1058:AL"];
	"1065:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f094690>",
		fillcolor=firebrick,
		label="1065:NS
AddressMiss <= ~(UnicastOK | BroadcastOK | MulticastOK | PassAll & ControlFrmAddressOK);",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f094690>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1065:NS" -> "Leaf_1058:AL"	 [cond="[]",
		lineno=None];
	"1063:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f094110>",
		fillcolor=firebrick,
		label="1063:NS
AddressMiss <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f094110>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1063:NS" -> "Leaf_1058:AL"	 [cond="[]",
		lineno=None];
	"1116:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fb40eb9fb10>",
		fillcolor=cadetblue,
		label="1116:BS
ByteHash = IntHash[15:8];",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fb40eb9fb10>]",
		style=filled,
		typ=BlockingSubstitution];
	"1116:BS" -> "Leaf_1112:AL"	 [cond="[]",
		lineno=None];
	"1064:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f0942d0>",
		fillcolor=springgreen,
		label="1064:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1064:IF" -> "1065:NS"	 [cond="['ByteCntEq7', 'RxCheckEn']",
		label="(ByteCntEq7 & RxCheckEn)",
		lineno=1064];
	"1075:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f094bd0>",
		fillcolor=firebrick,
		label="1075:NS
MulticastOK <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f094bd0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"Leaf_1070:AL"	 [def_var="['MulticastOK']",
		label="Leaf_1070:AL"];
	"1075:NS" -> "Leaf_1070:AL"	 [cond="[]",
		lineno=None];
	"1091:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40eb91a90>",
		fillcolor=springgreen,
		label="1091:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1091:IF" -> "1094:IF"	 [cond="['RxCheckEn', 'ByteCntEq3']",
		label="!((RxCheckEn & ByteCntEq3))",
		lineno=1091];
	"1092:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb91bd0>",
		fillcolor=firebrick,
		label="1092:NS
UnicastOK <= (RxData[7:0] == MAC[39:32]) & UnicastOK;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb91bd0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1091:IF" -> "1092:NS"	 [cond="['RxCheckEn', 'ByteCntEq3']",
		label="(RxCheckEn & ByteCntEq3)",
		lineno=1091];
	"1070:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb40f094710>",
		clk_sens=True,
		fillcolor=gold,
		label="1070:AL",
		sens="['MRxClk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'RxAbort', 'CrcHashGood', 'Multicast', 'RxEndFrm', 'HashBit']"];
	"1071:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40f094750>",
		fillcolor=turquoise,
		label="1071:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1070:AL" -> "1071:BL"	 [cond="[]",
		lineno=None];
	"1115:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fb40eb9f690>",
		fillcolor=lightcyan,
		label="1115:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1115:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fb40eb9f810>",
		fillcolor=cadetblue,
		label="1115:BS
ByteHash = IntHash[7:0];",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fb40eb9f810>]",
		style=filled,
		typ=BlockingSubstitution];
	"1115:CA" -> "1115:BS"	 [cond="[]",
		lineno=None];
	"1107:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb9f550>",
		fillcolor=firebrick,
		label="1107:NS
UnicastOK <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb9f550>]",
		style=filled,
		typ=NonblockingSubstitution];
	"Leaf_1083:AL"	 [def_var="['UnicastOK']",
		label="Leaf_1083:AL"];
	"1107:NS" -> "Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"1118:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fb40eba5090>",
		fillcolor=cadetblue,
		label="1118:BS
ByteHash = IntHash[31:24];",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fb40eba5090>]",
		style=filled,
		typ=BlockingSubstitution];
	"1118:BS" -> "Leaf_1112:AL"	 [cond="[]",
		lineno=None];
	"1048:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f09b650>",
		fillcolor=springgreen,
		label="1048:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1049:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09b690>",
		fillcolor=firebrick,
		label="1049:NS
RxAbort <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09b690>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1048:IF" -> "1049:NS"	 [cond="['Reset']",
		label=Reset,
		lineno=1048];
	"1050:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f09ba10>",
		fillcolor=springgreen,
		label="1050:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1048:IF" -> "1050:IF"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=1048];
	"1061:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09be50>",
		fillcolor=firebrick,
		label="1061:NS
AddressMiss <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09be50>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1061:NS" -> "Leaf_1058:AL"	 [cond="[]",
		lineno=None];
	"1072:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f094890>",
		fillcolor=springgreen,
		label="1072:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1071:BL" -> "1072:IF"	 [cond="[]",
		lineno=None];
	"1059:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40f09bd10>",
		fillcolor=turquoise,
		label="1059:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1060:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f09be10>",
		fillcolor=springgreen,
		label="1060:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1059:BL" -> "1060:IF"	 [cond="[]",
		lineno=None];
	"1047:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40f09b550>",
		fillcolor=turquoise,
		label="1047:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1046:AL" -> "1047:BL"	 [cond="[]",
		lineno=None];
	"1110:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40ebb3210>",
		def_var="['IntHash']",
		fillcolor=deepskyblue,
		label="1110:AS
IntHash = (CrcHash[5])? HASH1 : HASH0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['CrcHash', 'HASH1', 'HASH0']"];
	"1112:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb40eb9f2d0>",
		clk_sens=False,
		fillcolor=gold,
		label="1112:AL",
		sens="['CrcHash', 'IntHash']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['IntHash', 'CrcHash']"];
	"1110:AS" -> "1112:AL";
	"1115:BS" -> "Leaf_1112:AL"	 [cond="[]",
		lineno=None];
	"1122:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40eba5390>",
		def_var="['HashBit']",
		fillcolor=deepskyblue,
		label="1122:AS
HashBit = ByteHash[CrcHash[2:0]];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ByteHash', 'CrcHash']"];
	"Leaf_1112:AL" -> "1122:AS";
	"1086:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb91150>",
		fillcolor=firebrick,
		label="1086:NS
UnicastOK <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb91150>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1086:NS" -> "Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"1118:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fb40eb9fed0>",
		fillcolor=lightcyan,
		label="1118:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1118:CA" -> "1118:BS"	 [cond="[]",
		lineno=None];
	"1098:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40ebb3710>",
		fillcolor=firebrick,
		label="1098:NS
UnicastOK <= (RxData[7:0] == MAC[23:16]) & UnicastOK;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40ebb3710>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1098:NS" -> "Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"Leaf_1070:AL" -> "1037:AS";
	"1058:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb40f09bcd0>",
		clk_sens=True,
		fillcolor=gold,
		label="1058:AL",
		sens="['MRxClk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'MulticastOK', 'PassAll', 'ControlFrmAddressOK', 'RxCheckEn', 'BroadcastOK', 'ByteCntEq7', 'UnicastOK', 'ByteCntEq0']"];
	"Leaf_1070:AL" -> "1058:AL";
	"1047:BL" -> "1048:IF"	 [cond="[]",
		lineno=None];
	"1092:NS" -> "Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"1060:IF" -> "1061:NS"	 [cond="['Reset']",
		label=Reset,
		lineno=1060];
	"1062:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f0940d0>",
		fillcolor=springgreen,
		label="1062:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1060:IF" -> "1062:IF"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=1060];
	"1053:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09bbd0>",
		fillcolor=firebrick,
		label="1053:NS
RxAbort <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09bbd0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"Leaf_1046:AL"	 [def_var="['RxAbort']",
		label="Leaf_1046:AL"];
	"1053:NS" -> "Leaf_1046:AL"	 [cond="[]",
		lineno=None];
	"1039:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f09b150>",
		def_var="['BroadcastOK']",
		fillcolor=deepskyblue,
		label="1039:AS
BroadcastOK = Broadcast & ~r_Bro;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Broadcast', 'r_Bro']"];
	"1039:AS" -> "1037:AS";
	"1039:AS" -> "1058:AL";
	"1104:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb9f250>",
		fillcolor=firebrick,
		label="1104:NS
UnicastOK <= (RxData[7:0] == MAC[7:0]) & UnicastOK;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb9f250>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1104:NS" -> "Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"1051:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09ba50>",
		fillcolor=firebrick,
		label="1051:NS
RxAbort <= 1'b1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09ba50>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1051:NS" -> "Leaf_1046:AL"	 [cond="[]",
		lineno=None];
	"1088:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40eb91650>",
		fillcolor=springgreen,
		label="1088:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1088:IF" -> "1091:IF"	 [cond="['RxCheckEn', 'ByteCntEq2']",
		label="!((RxCheckEn & ByteCntEq2))",
		lineno=1088];
	"1089:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb91610>",
		fillcolor=firebrick,
		label="1089:NS
UnicastOK <= RxData[7:0] == MAC[47:40];",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb91610>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1088:IF" -> "1089:NS"	 [cond="['RxCheckEn', 'ByteCntEq2']",
		label="(RxCheckEn & ByteCntEq2)",
		lineno=1088];
	"1074:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f094b90>",
		fillcolor=springgreen,
		label="1074:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1074:IF" -> "1075:NS"	 [cond="['RxEndFrm', 'RxAbort']",
		label="(RxEndFrm | RxAbort)",
		lineno=1074];
	"1076:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f094d90>",
		fillcolor=springgreen,
		label="1076:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1074:IF" -> "1076:IF"	 [cond="['RxEndFrm', 'RxAbort']",
		label="!((RxEndFrm | RxAbort))",
		lineno=1074];
	"1049:NS" -> "Leaf_1046:AL"	 [cond="[]",
		lineno=None];
	"1113:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40eb9f5d0>",
		fillcolor=turquoise,
		label="1113:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1114:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7fb40eb9fe10>",
		fillcolor=linen,
		label="1114:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"1113:BL" -> "1114:CS"	 [cond="[]",
		lineno=None];
	"1085:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40eb91190>",
		fillcolor=springgreen,
		label="1085:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1085:IF" -> "1086:NS"	 [cond="['Reset']",
		label=Reset,
		lineno=1085];
	"1085:IF" -> "1088:IF"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=1085];
	"1103:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40eb9f110>",
		fillcolor=springgreen,
		label="1103:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1103:IF" -> "1104:NS"	 [cond="['RxCheckEn', 'ByteCntEq7']",
		label="(RxCheckEn & ByteCntEq7)",
		lineno=1103];
	"1106:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40eb9f410>",
		fillcolor=springgreen,
		label="1106:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1103:IF" -> "1106:IF"	 [cond="['RxCheckEn', 'ByteCntEq7']",
		label="!((RxCheckEn & ByteCntEq7))",
		lineno=1103];
	"Leaf_1083:AL" -> "1037:AS";
	"1083:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb40f094f90>",
		clk_sens=True,
		fillcolor=gold,
		label="1083:AL",
		sens="['MRxClk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'RxCheckEn', 'RxData', 'MAC', 'RxAbort', 'RxEndFrm', 'ByteCntEq5', 'ByteCntEq4', 'ByteCntEq7', 'ByteCntEq6', 'UnicastOK', '\
ByteCntEq3', 'ByteCntEq2']"];
	"Leaf_1083:AL" -> "1083:AL";
	"Leaf_1083:AL" -> "1058:AL";
	"1101:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40ebb3c90>",
		fillcolor=firebrick,
		label="1101:NS
UnicastOK <= (RxData[7:0] == MAC[15:8]) & UnicastOK;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40ebb3c90>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1101:NS" -> "Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"1100:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40ebb3b50>",
		fillcolor=springgreen,
		label="1100:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1100:IF" -> "1103:IF"	 [cond="['RxCheckEn', 'ByteCntEq6']",
		label="!((RxCheckEn & ByteCntEq6))",
		lineno=1100];
	"1100:IF" -> "1101:NS"	 [cond="['RxCheckEn', 'ByteCntEq6']",
		label="(RxCheckEn & ByteCntEq6)",
		lineno=1100];
	"1095:NS" -> "Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"1072:IF" -> "1074:IF"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=1072];
	"1073:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f0948d0>",
		fillcolor=firebrick,
		label="1073:NS
MulticastOK <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f0948d0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1072:IF" -> "1073:NS"	 [cond="['Reset']",
		label=Reset,
		lineno=1072];
	"1089:NS" -> "Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"1073:NS" -> "Leaf_1070:AL"	 [cond="[]",
		lineno=None];
	"1116:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fb40eb9f990>",
		fillcolor=lightcyan,
		label="1116:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1116:CA" -> "1116:BS"	 [cond="[]",
		lineno=None];
	"1112:AL" -> "1113:BL"	 [cond="[]",
		lineno=None];
	"1062:IF" -> "1063:NS"	 [cond="['ByteCntEq0']",
		label=ByteCntEq0,
		lineno=1062];
	"1062:IF" -> "1064:IF"	 [cond="['ByteCntEq0']",
		label="!(ByteCntEq0)",
		lineno=1062];
	"1084:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40f094fd0>",
		fillcolor=turquoise,
		label="1084:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1083:AL" -> "1084:BL"	 [cond="[]",
		lineno=None];
	"1122:AS" -> "1070:AL";
	"1097:IF" -> "1098:NS"	 [cond="['RxCheckEn', 'ByteCntEq5']",
		label="(RxCheckEn & ByteCntEq5)",
		lineno=1097];
	"1097:IF" -> "1100:IF"	 [cond="['RxCheckEn', 'ByteCntEq5']",
		label="!((RxCheckEn & ByteCntEq5))",
		lineno=1097];
	"1117:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fb40eb9fc10>",
		fillcolor=lightcyan,
		label="1117:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1117:CA" -> "1117:BS"	 [cond="[]",
		lineno=None];
	"1077:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f094ed0>",
		fillcolor=firebrick,
		label="1077:NS
MulticastOK <= HashBit;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f094ed0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1076:IF" -> "1077:NS"	 [cond="['CrcHashGood', 'Multicast']",
		label="(CrcHashGood & Multicast)",
		lineno=1076];
	"1058:AL" -> "1059:BL"	 [cond="[]",
		lineno=None];
	"1050:IF" -> "1053:NS"	 [cond="['RxAddressInvalid', 'ByteCntEq7', 'RxCheckEn']",
		label="!((RxAddressInvalid & ByteCntEq7 & RxCheckEn))",
		lineno=1050];
	"1050:IF" -> "1051:NS"	 [cond="['RxAddressInvalid', 'ByteCntEq7', 'RxCheckEn']",
		label="(RxAddressInvalid & ByteCntEq7 & RxCheckEn)",
		lineno=1050];
	"1084:BL" -> "1085:IF"	 [cond="[]",
		lineno=None];
	"1041:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f09b2d0>",
		def_var="['RxCheckEn']",
		fillcolor=deepskyblue,
		label="1041:AS
RxCheckEn = |StateData;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['StateData']"];
	"1041:AS" -> "1046:AL";
	"1041:AS" -> "1083:AL";
	"1041:AS" -> "1058:AL";
	"1106:IF" -> "1107:NS"	 [cond="['RxEndFrm', 'RxAbort']",
		label="(RxEndFrm | RxAbort)",
		lineno=1106];
	"Leaf_1046:AL" -> "1070:AL";
	"Leaf_1046:AL" -> "1083:AL";
	"1114:CS" -> "1115:CA"	 [cond="['CrcHash']",
		label="CrcHash[4:3]",
		lineno=1114];
	"1114:CS" -> "1118:CA"	 [cond="['CrcHash']",
		label="CrcHash[4:3]",
		lineno=1114];
	"1114:CS" -> "1116:CA"	 [cond="['CrcHash']",
		label="CrcHash[4:3]",
		lineno=1114];
	"1114:CS" -> "1117:CA"	 [cond="['CrcHash']",
		label="CrcHash[4:3]",
		lineno=1114];
	"1077:NS" -> "Leaf_1070:AL"	 [cond="[]",
		lineno=None];
}
