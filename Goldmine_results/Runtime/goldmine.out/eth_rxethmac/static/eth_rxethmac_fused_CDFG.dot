strict digraph "compose( ,  )" {
	node [label="\N"];
	"crcrx.318:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f446110>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.318:AS
CrcNext[11] = Enable & (Data[3] ^ Data[1] ^ Data[0] ^ Crc[28] ^ Crc[29] ^ Crc[31]) ^ Crc[7];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Data', 'Data', 'Crc', 'Crc', 'Crc', 'Crc']"];
	"crcrx.341:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb40effabd0>",
		clk_sens=False,
		fillcolor=gold,
		label="crcrx.341:AL",
		sens="['Clk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Initialize', 'Reset', 'CrcNext']"];
	"crcrx.318:AS" -> "crcrx.341:AL";
	"rxstatem1.583:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f326c50>",
		fillcolor=springgreen,
		label="rxstatem1.583:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxstatem1.584:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f326d90>",
		fillcolor=firebrick,
		label="rxstatem1.584:NS
StateData0 <= 1'b1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f326d90>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxstatem1.583:IF" -> "rxstatem1.584:NS"	 [cond="['StartData0']",
		label=StartData0,
		lineno=583];
	"crcrx.331:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f0198d0>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.331:AS
CrcNext[24] = Enable & (Data[2] ^ Data[1] ^ Crc[30] ^ Crc[29]) ^ Crc[20];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Data', 'Crc', 'Crc', 'Crc']"];
	"crcrx.331:AS" -> "crcrx.341:AL";
	"rxaddrcheck1.1046:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb40f09b510>",
		clk_sens=True,
		fillcolor=gold,
		label="rxaddrcheck1.1046:AL",
		sens="['MRxClk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'ByteCntEq7', 'RxAddressInvalid', 'RxCheckEn']"];
	"rxaddrcheck1.1047:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40f09b550>",
		fillcolor=turquoise,
		label="rxaddrcheck1.1047:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"rxaddrcheck1.1046:AL" -> "rxaddrcheck1.1047:BL"	 [cond="[]",
		lineno=None];
	"rxcounters1.850:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f07a7d0>",
		fillcolor=springgreen,
		label="rxcounters1.850:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxcounters1.851:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f07a790>",
		fillcolor=firebrick,
		label="rxcounters1.851:NS
DlyCrcCnt[3:0] <= 4'h0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f07a790>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxcounters1.850:IF" -> "rxcounters1.851:NS"	 [cond="['DlyCrcCnt']",
		label="(DlyCrcCnt[3:0] == 4'h9)",
		lineno=850];
	"rxcounters1.853:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f07ab90>",
		fillcolor=springgreen,
		label="rxcounters1.853:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxcounters1.850:IF" -> "rxcounters1.853:IF"	 [cond="['DlyCrcCnt']",
		label="!((DlyCrcCnt[3:0] == 4'h9))",
		lineno=850];
	"1421:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb43061c0d0>",
		fillcolor=turquoise,
		label="1421:BL
RxValid_d <= GenerateRxValid;
RxValid <= RxValid_d;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43061c110>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fb43061c250>]",
		style=filled,
		typ=Block];
	"Leaf_1413:AL"	 [def_var="['RxValid', 'RxValid_d']",
		label="Leaf_1413:AL"];
	"1421:BL" -> "Leaf_1413:AL"	 [cond="[]",
		lineno=None];
	"crcrx.342:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40effac10>",
		fillcolor=turquoise,
		label="crcrx.342:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"crcrx.343:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40effadd0>",
		fillcolor=springgreen,
		label="crcrx.343:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"crcrx.342:BL" -> "crcrx.343:IF"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.Leaf_1046:AL"	 [def_var="['RxAbort']",
		label="rxaddrcheck1.Leaf_1046:AL"];
	"rxaddrcheck1.1083:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb40f094f90>",
		clk_sens=True,
		fillcolor=gold,
		label="rxaddrcheck1.1083:AL",
		sens="['MRxClk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'RxCheckEn', 'RxData', 'MAC', 'RxAbort', 'RxEndFrm', 'ByteCntEq5', 'ByteCntEq4', 'ByteCntEq7', 'ByteCntEq6', 'UnicastOK', '\
ByteCntEq3', 'ByteCntEq2']"];
	"rxaddrcheck1.Leaf_1046:AL" -> "rxaddrcheck1.1083:AL";
	"1397:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb430611d10>",
		clk_sens=True,
		fillcolor=gold,
		label="1397:AL",
		sens="['MRxClk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'RxAbort', 'RxEndFrm', 'LatchedByte', 'ByteCntEq1', 'StateData']"];
	"rxaddrcheck1.Leaf_1046:AL" -> "1397:AL";
	"rxaddrcheck1.1070:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb40f094710>",
		clk_sens=True,
		fillcolor=gold,
		label="rxaddrcheck1.1070:AL",
		sens="['MRxClk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'RxAbort', 'CrcHashGood', 'Multicast', 'RxEndFrm', 'HashBit']"];
	"rxaddrcheck1.Leaf_1046:AL" -> "rxaddrcheck1.1070:AL";
	"1379:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb43060cdd0>",
		clk_sens=True,
		fillcolor=gold,
		label="1379:AL",
		sens="['MRxClk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'ByteCntSmall7', 'RxAbort', 'RxEndFrm', 'LatchedByte', 'ByteCntEq1', 'StateData']"];
	"rxaddrcheck1.Leaf_1046:AL" -> "1379:AL";
	"rxaddrcheck1.1060:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f09be10>",
		fillcolor=springgreen,
		label="rxaddrcheck1.1060:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxaddrcheck1.1061:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09be50>",
		fillcolor=firebrick,
		label="rxaddrcheck1.1061:NS
AddressMiss <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09be50>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxaddrcheck1.1060:IF" -> "rxaddrcheck1.1061:NS"	 [cond="['Reset']",
		label=Reset,
		lineno=1060];
	"rxaddrcheck1.1062:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f0940d0>",
		fillcolor=springgreen,
		label="rxaddrcheck1.1062:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxaddrcheck1.1060:IF" -> "rxaddrcheck1.1062:IF"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=1060];
	"rxcounters1.782:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f0a4650>",
		def_var="['ResetByteCounter']",
		fillcolor=deepskyblue,
		label="rxcounters1.782:AS
ResetByteCounter = MRxDV & (StateSFD & MRxDEqD | StateData[0] & ByteCntMaxFrame);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['MRxDV', 'StateSFD', 'MRxDEqD', 'StateData', 'ByteCntMaxFrame']"];
	"rxcounters1.784:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f0a4fd0>",
		def_var="['IncrementByteCounter']",
		fillcolor=deepskyblue,
		label="rxcounters1.784:AS
IncrementByteCounter = ~ResetByteCounter & MRxDV & (StatePreamble | StateSFD | StateIdle & ~Transmitting | StateData[\
1] & ~ByteCntMax & ~(DlyCrcEn & |DlyCrcCnt));",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ResetByteCounter', 'MRxDV', 'StatePreamble', 'StateSFD', 'StateIdle', 'Transmitting', 'StateData', 'ByteCntMax', 'DlyCrcEn', '\
DlyCrcCnt']"];
	"rxcounters1.782:AS" -> "rxcounters1.784:AS";
	"rxcounters1.790:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb40f0b4150>",
		clk_sens=True,
		fillcolor=gold,
		label="rxcounters1.790:AL",
		sens="['MRxClk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'ResetByteCounter', 'ByteCnt', 'IncrementByteCounter']"];
	"rxcounters1.782:AS" -> "rxcounters1.790:AL";
	"rxcounters1.817:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f0872d0>",
		def_var="['ByteCntMax']",
		fillcolor=deepskyblue,
		label="rxcounters1.817:AS
ByteCntMax = ByteCnt == 16'hffff;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ByteCnt']"];
	"rxcounters1.817:AS" -> "rxcounters1.784:AS";
	"checkSumcalc.1517:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb430634750>",
		fillcolor=springgreen,
		label="checkSumcalc.1517:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"checkSumcalc.1518:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430634710>",
		fillcolor=firebrick,
		label="checkSumcalc.1518:NS
StartCalc[0] <= RxData[7:0] == 8'h8;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430634710>]",
		style=filled,
		typ=NonblockingSubstitution];
	"checkSumcalc.1517:IF" -> "checkSumcalc.1518:NS"	 [cond="['ByteCnt']",
		label="(ByteCnt[15:0] == 16'h15)",
		lineno=1517];
	"checkSumcalc.1520:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb43063a350>",
		fillcolor=springgreen,
		label="checkSumcalc.1520:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"checkSumcalc.1517:IF" -> "checkSumcalc.1520:IF"	 [cond="['ByteCnt']",
		label="!((ByteCnt[15:0] == 16'h15))",
		lineno=1517];
	"crcrx.308:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f742a10>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.308:AS
CrcNext[1] = Enable & (Data[1] ^ Data[0] ^ Crc[28] ^ Crc[29]);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Data', 'Crc', 'Crc']"];
	"crcrx.308:AS" -> "crcrx.341:AL";
	"crcrx.341:AL" -> "crcrx.342:BL"	 [cond="[]",
		lineno=None];
	"rxstatem1.529:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f331650>",
		def_var="['StartIdle']",
		fillcolor=deepskyblue,
		label="rxstatem1.529:AS
StartIdle = ~MRxDV & (StateDrop | StatePreamble | StateSFD | |StateData);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['MRxDV', 'StateDrop', 'StatePreamble', 'StateSFD', 'StateData']"];
	"rxstatem1.543:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb40f321bd0>",
		clk_sens=True,
		fillcolor=gold,
		label="rxstatem1.543:AL",
		sens="['MRxClk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'StartSFD', 'StartPreamble', 'StartDrop', 'StartIdle', 'StartData0', 'StartData1']"];
	"rxstatem1.529:AS" -> "rxstatem1.543:AL";
	"1413:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb430617bd0>",
		clk_sens=True,
		fillcolor=gold,
		label="1413:AL",
		sens="['MRxClk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'RxValid_d', 'GenerateRxValid']"];
	"Leaf_1413:AL" -> "1413:AL";
	"1405:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb4306175d0>",
		fillcolor=springgreen,
		label="1405:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1406:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430617710>",
		fillcolor=firebrick,
		label="1406:NS
Multicast <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430617710>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1405:IF" -> "1406:NS"	 [cond="['RxAbort', 'RxEndFrm']",
		label="(RxAbort | RxEndFrm)",
		lineno=1405];
	"rxcounters1.856:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f07af90>",
		fillcolor=springgreen,
		label="rxcounters1.856:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxcounters1.857:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f0aa190>",
		fillcolor=firebrick,
		label="rxcounters1.857:NS
DlyCrcCnt[3:0] <= DlyCrcCnt[3:0] + 4'd1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f0aa190>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxcounters1.856:IF" -> "rxcounters1.857:NS"	 [cond="['DlyCrcEn', 'DlyCrcCnt']",
		label="(DlyCrcEn & |DlyCrcCnt[3:0])",
		lineno=856];
	"rxaddrcheck1.1116:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fb40eb9f990>",
		fillcolor=lightcyan,
		label="rxaddrcheck1.1116:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"rxaddrcheck1.1116:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fb40eb9fb10>",
		fillcolor=cadetblue,
		label="rxaddrcheck1.1116:BS
ByteHash = IntHash[15:8];",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fb40eb9fb10>]",
		style=filled,
		typ=BlockingSubstitution];
	"rxaddrcheck1.1116:CA" -> "rxaddrcheck1.1116:BS"	 [cond="[]",
		lineno=None];
	"rxcounters1.821:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f087850>",
		def_var="['ResetIFGCounter']",
		fillcolor=deepskyblue,
		label="rxcounters1.821:AS
ResetIFGCounter = StateSFD & MRxDV & MRxDEqD | StateDrop;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['StateSFD', 'MRxDV', 'MRxDEqD', 'StateDrop']"];
	"rxcounters1.823:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f087dd0>",
		def_var="['IncrementIFGCounter']",
		fillcolor=deepskyblue,
		label="rxcounters1.823:AS
IncrementIFGCounter = ~ResetIFGCounter & (StateDrop | StateIdle | StatePreamble | StateSFD) & ~IFGCounterEq24;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ResetIFGCounter', 'StateDrop', 'StateIdle', 'StatePreamble', 'StateSFD', 'IFGCounterEq24']"];
	"rxcounters1.821:AS" -> "rxcounters1.823:AS";
	"rxcounters1.825:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb40f09d150>",
		clk_sens=True,
		fillcolor=gold,
		label="rxcounters1.825:AL",
		sens="['MRxClk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'ResetIFGCounter', 'IncrementIFGCounter', 'IFGCounter']"];
	"rxcounters1.821:AS" -> "rxcounters1.825:AL";
	"rxaddrcheck1.1095:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40ebb3190>",
		fillcolor=firebrick,
		label="rxaddrcheck1.1095:NS
UnicastOK <= (RxData[7:0] == MAC[31:24]) & UnicastOK;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40ebb3190>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxaddrcheck1.Leaf_1083:AL"	 [def_var="['UnicastOK']",
		label="rxaddrcheck1.Leaf_1083:AL"];
	"rxaddrcheck1.1095:NS" -> "rxaddrcheck1.Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1117:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fb40eb9fc10>",
		fillcolor=lightcyan,
		label="rxaddrcheck1.1117:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"rxaddrcheck1.1117:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fb40eb9fd90>",
		fillcolor=cadetblue,
		label="rxaddrcheck1.1117:BS
ByteHash = IntHash[23:16];",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fb40eb9fd90>]",
		style=filled,
		typ=BlockingSubstitution];
	"rxaddrcheck1.1117:CA" -> "rxaddrcheck1.1117:BS"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1106:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40eb9f410>",
		fillcolor=springgreen,
		label="rxaddrcheck1.1106:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxaddrcheck1.1107:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb9f550>",
		fillcolor=firebrick,
		label="rxaddrcheck1.1107:NS
UnicastOK <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb9f550>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxaddrcheck1.1106:IF" -> "rxaddrcheck1.1107:NS"	 [cond="['RxEndFrm', 'RxAbort']",
		label="(RxEndFrm | RxAbort)",
		lineno=1106];
	"rxaddrcheck1.Leaf_1112:AL"	 [def_var="['ByteHash']",
		label="rxaddrcheck1.Leaf_1112:AL"];
	"rxaddrcheck1.1116:BS" -> "rxaddrcheck1.Leaf_1112:AL"	 [cond="[]",
		lineno=None];
	"rxstatem1.555:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40f326e10>",
		fillcolor=turquoise,
		label="rxstatem1.555:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"rxstatem1.580:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f326b50>",
		fillcolor=springgreen,
		label="rxstatem1.580:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxstatem1.555:BL" -> "rxstatem1.580:IF"	 [cond="[]",
		lineno=None];
	"rxstatem1.586:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f326fd0>",
		fillcolor=springgreen,
		label="rxstatem1.586:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxstatem1.555:BL" -> "rxstatem1.586:IF"	 [cond="[]",
		lineno=None];
	"rxstatem1.574:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f3266d0>",
		fillcolor=springgreen,
		label="rxstatem1.574:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxstatem1.555:BL" -> "rxstatem1.574:IF"	 [cond="[]",
		lineno=None];
	"rxstatem1.562:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f32bc10>",
		fillcolor=springgreen,
		label="rxstatem1.562:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxstatem1.555:BL" -> "rxstatem1.562:IF"	 [cond="[]",
		lineno=None];
	"rxstatem1.556:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f32b890>",
		fillcolor=springgreen,
		label="rxstatem1.556:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxstatem1.555:BL" -> "rxstatem1.556:IF"	 [cond="[]",
		lineno=None];
	"rxstatem1.568:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f326110>",
		fillcolor=springgreen,
		label="rxstatem1.568:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxstatem1.555:BL" -> "rxstatem1.568:IF"	 [cond="[]",
		lineno=None];
	"rxcounters1.Leaf_844:AL"	 [def_var="['DlyCrcCnt']",
		label="rxcounters1.Leaf_844:AL"];
	"rxcounters1.851:NS" -> "rxcounters1.Leaf_844:AL"	 [cond="[]",
		lineno=None];
	"1334:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb4306014d0>",
		clk_sens=True,
		fillcolor=gold,
		label="1334:AL",
		sens="['MRxClk']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['ByteCntEq6', 'StateData']"];
	"1335:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb430601650>",
		fillcolor=turquoise,
		label="1335:BL
CrcHashGood <= StateData[0] & ByteCntEq6;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430601690>]",
		style=filled,
		typ=Block];
	"1334:AL" -> "1335:BL"	 [cond="[]",
		lineno=None];
	"rxstatem1.533:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f331d90>",
		def_var="['StartSFD']",
		fillcolor=deepskyblue,
		label="rxstatem1.533:AS
StartSFD = MRxDV & MRxDEq5 & (StateIdle & ~Transmitting | StatePreamble);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['MRxDV', 'MRxDEq5', 'StateIdle', 'Transmitting', 'StatePreamble']"];
	"rxstatem1.533:AS" -> "rxstatem1.543:AL";
	"checkSumcalc.1529:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb43063a910>",
		fillcolor=turquoise,
		label="checkSumcalc.1529:BL
StartCalc[1] <= (ByteCnt[15:0] > 16'h17) & StartCalc[0];",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43063ac90>]",
		style=filled,
		typ=Block];
	"checkSumcalc.Leaf_1509:AL"	 [def_var="['CSready', 'CheckSum', 'StartCalc', 'Sum']",
		label="checkSumcalc.Leaf_1509:AL"];
	"checkSumcalc.1529:BL" -> "checkSumcalc.Leaf_1509:AL"	 [cond="[]",
		lineno=None];
	"rxstatem1.537:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f321410>",
		def_var="['StartData1']",
		fillcolor=deepskyblue,
		label="rxstatem1.537:AS
StartData1 = MRxDV & StateData0 & ~ByteCntMaxFrame;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['MRxDV', 'StateData0', 'ByteCntMaxFrame']"];
	"rxstatem1.537:AS" -> "rxstatem1.543:AL";
	"crcrx.317:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f444810>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.317:AS
CrcNext[10] = Enable & (Data[3] ^ Data[2] ^ Data[0] ^ Crc[28] ^ Crc[30] ^ Crc[31]) ^ Crc[6];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Data', 'Data', 'Crc', 'Crc', 'Crc', 'Crc']"];
	"crcrx.317:AS" -> "crcrx.341:AL";
	"rxaddrcheck1.1118:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fb40eba5090>",
		fillcolor=cadetblue,
		label="rxaddrcheck1.1118:BS
ByteHash = IntHash[31:24];",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fb40eba5090>]",
		style=filled,
		typ=BlockingSubstitution];
	"rxaddrcheck1.1118:BS" -> "rxaddrcheck1.Leaf_1112:AL"	 [cond="[]",
		lineno=None];
	"1208:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40eb86310>",
		def_var="['MRxDEqD']",
		fillcolor=deepskyblue,
		label="1208:AS
MRxDEqD = MRxD == 4'hd;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['MRxD']"];
	"1208:AS" -> "rxcounters1.782:AS";
	"1208:AS" -> "rxcounters1.821:AS";
	"rxstatem1.535:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f321150>",
		def_var="['StartData0']",
		fillcolor=deepskyblue,
		label="rxstatem1.535:AS
StartData0 = MRxDV & (StateSFD & MRxDEqD & IFGCounterEq24 | StateData1);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['MRxDV', 'StateSFD', 'MRxDEqD', 'IFGCounterEq24', 'StateData1']"];
	"1208:AS" -> "rxstatem1.535:AS";
	"rxstatem1.539:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f321990>",
		def_var="['StartDrop']",
		fillcolor=deepskyblue,
		label="rxstatem1.539:AS
StartDrop = MRxDV & (StateIdle & Transmitting | StateSFD & ~IFGCounterEq24 & MRxDEqD | StateData0 & ByteCntMaxFrame);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['MRxDV', 'StateIdle', 'Transmitting', 'StateSFD', 'IFGCounterEq24', 'MRxDEqD', 'StateData0', 'ByteCntMaxFrame']"];
	"1208:AS" -> "rxstatem1.539:AS";
	"rxcounters1.808:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f0a7250>",
		def_var="['ByteCntEq1']",
		fillcolor=deepskyblue,
		label="rxcounters1.808:AS
ByteCntEq1 = ByteCnt == 16'd1;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ByteCnt']"];
	"1428:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb43061c690>",
		def_var="['GenerateRxStartFrm']",
		fillcolor=deepskyblue,
		label="1428:AS
GenerateRxStartFrm = StateData[0] & (ByteCntEq1 & ~DlyCrcEn | (DlyCrcCnt == 4'h3) & DlyCrcEn);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['StateData', 'ByteCntEq1', 'DlyCrcEn', 'DlyCrcCnt', 'DlyCrcEn']"];
	"rxcounters1.808:AS" -> "1428:AS";
	"rxcounters1.808:AS" -> "1397:AL";
	"rxcounters1.808:AS" -> "1379:AL";
	"rxaddrcheck1.1091:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40eb91a90>",
		fillcolor=springgreen,
		label="rxaddrcheck1.1091:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxaddrcheck1.1094:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40ebb3050>",
		fillcolor=springgreen,
		label="rxaddrcheck1.1094:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxaddrcheck1.1091:IF" -> "rxaddrcheck1.1094:IF"	 [cond="['RxCheckEn', 'ByteCntEq3']",
		label="!((RxCheckEn & ByteCntEq3))",
		lineno=1091];
	"rxaddrcheck1.1092:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb91bd0>",
		fillcolor=firebrick,
		label="rxaddrcheck1.1092:NS
UnicastOK <= (RxData[7:0] == MAC[39:32]) & UnicastOK;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb91bd0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxaddrcheck1.1091:IF" -> "rxaddrcheck1.1092:NS"	 [cond="['RxCheckEn', 'ByteCntEq3']",
		label="(RxCheckEn & ByteCntEq3)",
		lineno=1091];
	"rxstatem1.577:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f3267d0>",
		fillcolor=springgreen,
		label="rxstatem1.577:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxstatem1.578:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f326910>",
		fillcolor=firebrick,
		label="rxstatem1.578:NS
StateSFD <= 1'b1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f326910>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxstatem1.577:IF" -> "rxstatem1.578:NS"	 [cond="['StartSFD']",
		label=StartSFD,
		lineno=577];
	"rxcounters1.830:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40f09d450>",
		fillcolor=turquoise,
		label="rxcounters1.830:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"rxcounters1.831:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f09d790>",
		fillcolor=springgreen,
		label="rxcounters1.831:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxcounters1.830:BL" -> "rxcounters1.831:IF"	 [cond="[]",
		lineno=None];
	"checkSumcalc.1543:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb4305bf690>",
		clk_sens=False,
		fillcolor=gold,
		label="checkSumcalc.1543:AL",
		sens="['Divided_4_clk']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['RxData', 'prev_latched_Rx1', 'StartCalc', 'Sum']"];
	"checkSumcalc.1544:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb4305bf710>",
		fillcolor=turquoise,
		label="checkSumcalc.1544:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"checkSumcalc.1543:AL" -> "checkSumcalc.1544:BL"	 [cond="[]",
		lineno=None];
	"1209:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40eb864d0>",
		def_var="['MRxDEq5']",
		fillcolor=deepskyblue,
		label="1209:AS
MRxDEq5 = MRxD == 4'h5;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['MRxD']"];
	"1209:AS" -> "rxstatem1.533:AS";
	"rxstatem1.531:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f331950>",
		def_var="['StartPreamble']",
		fillcolor=deepskyblue,
		label="rxstatem1.531:AS
StartPreamble = MRxDV & ~MRxDEq5 & (StateIdle & ~Transmitting);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['MRxDV', 'MRxDEq5', 'StateIdle', 'Transmitting']"];
	"1209:AS" -> "rxstatem1.531:AS";
	"1402:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb430611fd0>",
		fillcolor=turquoise,
		label="1402:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1403:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb4306173d0>",
		fillcolor=springgreen,
		label="1403:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1402:BL" -> "1403:IF"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1053:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09bbd0>",
		fillcolor=firebrick,
		label="rxaddrcheck1.1053:NS
RxAbort <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09bbd0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxaddrcheck1.1053:NS" -> "rxaddrcheck1.Leaf_1046:AL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1085:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40eb91190>",
		fillcolor=springgreen,
		label="rxaddrcheck1.1085:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxaddrcheck1.1086:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb91150>",
		fillcolor=firebrick,
		label="rxaddrcheck1.1086:NS
UnicastOK <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb91150>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxaddrcheck1.1085:IF" -> "rxaddrcheck1.1086:NS"	 [cond="['Reset']",
		label=Reset,
		lineno=1085];
	"rxaddrcheck1.1088:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40eb91650>",
		fillcolor=springgreen,
		label="rxaddrcheck1.1088:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxaddrcheck1.1085:IF" -> "rxaddrcheck1.1088:IF"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=1085];
	"1364:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb43060c650>",
		fillcolor=springgreen,
		label="1364:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1366:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43060c690>",
		fillcolor=firebrick,
		label="1366:NS
RxData_d[7:0] <= LatchedByte[7:0] & { 8{ |StateData } };",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43060c690>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1364:IF" -> "1366:NS"	 [cond="['GenerateRxValid']",
		label=GenerateRxValid,
		lineno=1364];
	"1368:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb43060c990>",
		fillcolor=springgreen,
		label="1368:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1364:IF" -> "1368:IF"	 [cond="['GenerateRxValid']",
		label="!(GenerateRxValid)",
		lineno=1364];
	"Leaf_1349:AL"	 [def_var="['LatchedByte', 'RxData', 'RxData_d', 'DelayData']",
		label="Leaf_1349:AL"];
	"Leaf_1349:AL" -> "checkSumcalc.1543:AL";
	"1349:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb4306072d0>",
		clk_sens=True,
		fillcolor=gold,
		label="1349:AL",
		sens="['MRxClk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'RxData_d', 'DelayData', 'GenerateRxValid', 'MRxD', 'LatchedByte', 'StateData']"];
	"Leaf_1349:AL" -> "1349:AL";
	"Leaf_1349:AL" -> "rxaddrcheck1.1083:AL";
	"Leaf_1349:AL" -> "1397:AL";
	"checkSumcalc.1494:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb43062aa90>",
		clk_sens=True,
		fillcolor=gold,
		label="checkSumcalc.1494:AL",
		sens="['MRxClk']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['RxData', 'Divided_2_clk', 'prev_latched_Rx', 'ByteCnt', 'MRxClk']"];
	"Leaf_1349:AL" -> "checkSumcalc.1494:AL";
	"Leaf_1349:AL" -> "1379:AL";
	"checkSumcalc.1509:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb43062fdd0>",
		clk_sens=False,
		fillcolor=gold,
		label="checkSumcalc.1509:AL",
		sens="['Divided_2_clk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'RxData', 'StartCalc', 'ByteCnt', 'Sum']"];
	"Leaf_1349:AL" -> "checkSumcalc.1509:AL";
	"rxaddrcheck1.1051:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09ba50>",
		fillcolor=firebrick,
		label="rxaddrcheck1.1051:NS
RxAbort <= 1'b1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09ba50>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxaddrcheck1.1051:NS" -> "rxaddrcheck1.Leaf_1046:AL"	 [cond="[]",
		lineno=None];
	"rxstatem1.572:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f3263d0>",
		fillcolor=firebrick,
		label="rxstatem1.572:NS
StatePreamble <= 1'b1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f3263d0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxstatem1.Leaf_543:AL"	 [def_var="['StateSFD', 'StateIdle', 'StateDrop', 'StatePreamble', 'StateData1', 'StateData0']",
		label="rxstatem1.Leaf_543:AL"];
	"rxstatem1.572:NS" -> "rxstatem1.Leaf_543:AL"	 [cond="[]",
		lineno=None];
	"rxstatem1.575:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f326690>",
		fillcolor=firebrick,
		label="rxstatem1.575:NS
StateSFD <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f326690>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxstatem1.575:NS" -> "rxstatem1.Leaf_543:AL"	 [cond="[]",
		lineno=None];
	"1345:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb4306070d0>",
		fillcolor=firebrick,
		label="1345:NS
CrcHash[5:0] <= Crc[31:26];",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb4306070d0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"Leaf_1339:AL"	 [def_var="['CrcHash']",
		label="Leaf_1339:AL"];
	"1345:NS" -> "Leaf_1339:AL"	 [cond="[]",
		lineno=None];
	"checkSumcalc.1511:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb430634190>",
		fillcolor=springgreen,
		label="checkSumcalc.1511:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"checkSumcalc.1511:IF" -> "checkSumcalc.1517:IF"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=1511];
	"checkSumcalc.1512:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb430634050>",
		fillcolor=turquoise,
		label="checkSumcalc.1512:BL
CheckSum[15:0] <= 16'd0;
CSready <= 1'd0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430634090>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fb4306341d0>]",
		style=filled,
		typ=Block];
	"checkSumcalc.1511:IF" -> "checkSumcalc.1512:BL"	 [cond="['Reset']",
		label=Reset,
		lineno=1511];
	"rxstatem1.589:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f323110>",
		fillcolor=springgreen,
		label="rxstatem1.589:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxstatem1.590:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f323250>",
		fillcolor=firebrick,
		label="rxstatem1.590:NS
StateData1 <= 1'b1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f323250>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxstatem1.589:IF" -> "rxstatem1.590:NS"	 [cond="['StartData1']",
		label=StartData1,
		lineno=589];
	"1399:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb430611f50>",
		fillcolor=springgreen,
		label="1399:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1399:IF" -> "1402:BL"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=1399];
	"1400:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430611f10>",
		fillcolor=firebrick,
		label="1400:NS
Multicast <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430611f10>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1399:IF" -> "1400:NS"	 [cond="['Reset']",
		label=Reset,
		lineno=1399];
	"checkSumcalc.Leaf_1509:AL" -> "checkSumcalc.1543:AL";
	"checkSumcalc.Leaf_1509:AL" -> "checkSumcalc.1509:AL";
	"checkSumcalc.1535:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb43063ae90>",
		fillcolor=springgreen,
		label="checkSumcalc.1535:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"checkSumcalc.1536:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb4305bf250>",
		fillcolor=turquoise,
		label="checkSumcalc.1536:BL
CSready <= 1'b1;
CheckSum[15:0] <= ~(Sum[15:0] + Sum[31:16]);",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb4305bf090>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fb4305bf590>]",
		style=filled,
		typ=Block];
	"checkSumcalc.1535:IF" -> "checkSumcalc.1536:BL"	 [cond="['ByteCnt']",
		label="(ByteCnt[15:0] - 16'h17 == 16'd20)",
		lineno=1535];
	"1359:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb43060c9d0>",
		fillcolor=turquoise,
		label="1359:BL
LatchedByte[7:0] <= { MRxD[3:0], LatchedByte[7:4] };
DelayData <= StateData[0];
RxData[7:0] <= RxData_d[7:0];",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430607f90>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fb43060c110>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43060cb50>]",
		style=filled,
		typ=Block];
	"1359:BL" -> "1364:IF"	 [cond="[]",
		lineno=None];
	"rxcounters1.841:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f09dd10>",
		def_var="['IFGCounterEq24']",
		fillcolor=deepskyblue,
		label="rxcounters1.841:AS
IFGCounterEq24 = (IFGCounter[4:0] == 5'h18) | r_IFG;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['IFGCounter', 'r_IFG']"];
	"rxcounters1.841:AS" -> "rxcounters1.823:AS";
	"rxcounters1.841:AS" -> "rxstatem1.535:AS";
	"rxcounters1.841:AS" -> "rxstatem1.539:AS";
	"rxcounters1.814:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f0a7cd0>",
		def_var="['ByteCntEq7']",
		fillcolor=deepskyblue,
		label="rxcounters1.814:AS
ByteCntEq7 = ByteCnt == 16'd7;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ByteCnt']"];
	"rxcounters1.814:AS" -> "rxaddrcheck1.1046:AL";
	"rxcounters1.814:AS" -> "rxaddrcheck1.1083:AL";
	"rxaddrcheck1.1058:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb40f09bcd0>",
		clk_sens=True,
		fillcolor=gold,
		label="rxaddrcheck1.1058:AL",
		sens="['MRxClk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'MulticastOK', 'PassAll', 'ControlFrmAddressOK', 'RxCheckEn', 'BroadcastOK', 'ByteCntEq7', 'UnicastOK', 'ByteCntEq0']"];
	"rxcounters1.814:AS" -> "rxaddrcheck1.1058:AL";
	"Leaf_1334:AL"	 [def_var="['CrcHashGood']",
		label="Leaf_1334:AL"];
	"1335:BL" -> "Leaf_1334:AL"	 [cond="[]",
		lineno=None];
	"rxcounters1.834:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f09da50>",
		fillcolor=springgreen,
		label="rxcounters1.834:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxcounters1.835:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09dc10>",
		fillcolor=firebrick,
		label="rxcounters1.835:NS
IFGCounter[4:0] <= IFGCounter[4:0] + 5'd1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09dc10>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxcounters1.834:IF" -> "rxcounters1.835:NS"	 [cond="['IncrementIFGCounter']",
		label=IncrementIFGCounter,
		lineno=834];
	"1385:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb430611590>",
		fillcolor=springgreen,
		label="1385:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1388:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb430611a90>",
		fillcolor=springgreen,
		label="1388:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1385:IF" -> "1388:IF"	 [cond="['StateData', 'LatchedByte', 'ByteCntSmall7']",
		label="!((StateData[0] & ~(&LatchedByte[7:0]) & ByteCntSmall7))",
		lineno=1385];
	"1386:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430611550>",
		fillcolor=firebrick,
		label="1386:NS
Broadcast <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430611550>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1385:IF" -> "1386:NS"	 [cond="['StateData', 'LatchedByte', 'ByteCntSmall7']",
		label="(StateData[0] & ~(&LatchedByte[7:0]) & ByteCntSmall7)",
		lineno=1385];
	"crcrx.327:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f44f410>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.327:AS
CrcNext[20] = Crc[16];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Crc']"];
	"crcrx.327:AS" -> "crcrx.341:AL";
	"crcrx.328:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f44f650>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.328:AS
CrcNext[21] = Crc[17];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Crc']"];
	"crcrx.328:AS" -> "crcrx.341:AL";
	"1414:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb430617c10>",
		fillcolor=turquoise,
		label="1414:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1415:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb430617e90>",
		fillcolor=springgreen,
		label="1415:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1414:BL" -> "1415:IF"	 [cond="[]",
		lineno=None];
	"Leaf_1397:AL"	 [def_var="['Multicast']",
		label="Leaf_1397:AL"];
	"1406:NS" -> "Leaf_1397:AL"	 [cond="[]",
		lineno=None];
	"rxstatem1.545:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f32b410>",
		fillcolor=springgreen,
		label="rxstatem1.545:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxstatem1.545:IF" -> "rxstatem1.555:BL"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=545];
	"rxstatem1.546:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40f32b2d0>",
		fillcolor=turquoise,
		label="rxstatem1.546:BL
StateIdle <= 1'b0;
StateDrop <= 1'b1;
StatePreamble <= 1'b0;
StateSFD <= 1'b0;
StateData0 <= 1'b0;
StateData1 <= \
1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f321d90>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fb40f321ed0>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f32b090>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7fb40f32b1d0>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f32b310>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7fb40f32b450>]",
		style=filled,
		typ=Block];
	"rxstatem1.545:IF" -> "rxstatem1.546:BL"	 [cond="['Reset']",
		label=Reset,
		lineno=545];
	"1352:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb430607a10>",
		fillcolor=turquoise,
		label="1352:BL
RxData_d[7:0] <= 8'h0;
DelayData <= 1'b0;
LatchedByte[7:0] <= 8'h0;
RxData[7:0] <= 8'h0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430607550>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fb430607690>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430607890>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7fb430607a90>]",
		style=filled,
		typ=Block];
	"1352:BL" -> "Leaf_1349:AL"	 [cond="[]",
		lineno=None];
	"crcrx.346:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f035050>",
		fillcolor=springgreen,
		label="crcrx.346:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"crcrx.349:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f035210>",
		fillcolor=firebrick,
		label="crcrx.349:NS
Crc <= CrcNext;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f035210>]",
		style=filled,
		typ=NonblockingSubstitution];
	"crcrx.346:IF" -> "crcrx.349:NS"	 [cond="['Initialize']",
		label="!(Initialize)",
		lineno=346];
	"crcrx.347:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f035090>",
		fillcolor=firebrick,
		label="crcrx.347:NS
Crc <= 32'hffffffff;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f035090>]",
		style=filled,
		typ=NonblockingSubstitution];
	"crcrx.346:IF" -> "crcrx.347:NS"	 [cond="['Initialize']",
		label=Initialize,
		lineno=346];
	"1398:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb430611bd0>",
		fillcolor=turquoise,
		label="1398:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1398:BL" -> "1399:IF"	 [cond="[]",
		lineno=None];
	"checkSumcalc.1505:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb43062f7d0>",
		clk_sens=False,
		fillcolor=gold,
		label="checkSumcalc.1505:AL",
		sens="['Divided_2_clk']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Divided_4_clk', 'Divided_2_clk']"];
	"checkSumcalc.1506:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43062fb10>",
		fillcolor=firebrick,
		label="checkSumcalc.1506:NS
Divided_4_clk <= Divided_4_clk ^ Divided_2_clk;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43062fb10>]",
		style=filled,
		typ=NonblockingSubstitution];
	"checkSumcalc.1505:AL" -> "checkSumcalc.1506:NS"	 [cond="[]",
		lineno=None];
	"crcrx.307:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f479150>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.307:AS
CrcNext[0] = Enable & (Data[0] ^ Crc[28]);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Crc']"];
	"crcrx.307:AS" -> "crcrx.341:AL";
	"checkSumcalc.1546:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb4305bfd50>",
		fillcolor=firebrick,
		label="checkSumcalc.1546:NS
Sum[31:0] <= Sum[31:0] + { prev_latched_Rx1[7:0], RxData[7:0] };",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb4305bfd50>]",
		style=filled,
		typ=NonblockingSubstitution];
	"checkSumcalc.Leaf_1543:AL"	 [def_var="['Sum']",
		label="checkSumcalc.Leaf_1543:AL"];
	"checkSumcalc.1546:NS" -> "checkSumcalc.Leaf_1543:AL"	 [cond="[]",
		lineno=None];
	"rxcounters1.827:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f09d3d0>",
		fillcolor=springgreen,
		label="rxcounters1.827:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxcounters1.827:IF" -> "rxcounters1.830:BL"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=827];
	"rxcounters1.828:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09d390>",
		fillcolor=firebrick,
		label="rxcounters1.828:NS
IFGCounter[4:0] <= 5'h0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09d390>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxcounters1.827:IF" -> "rxcounters1.828:NS"	 [cond="['Reset']",
		label=Reset,
		lineno=827];
	"1350:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb430607290>",
		fillcolor=turquoise,
		label="1350:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1349:AL" -> "1350:BL"	 [cond="[]",
		lineno=None];
	"1404:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430617410>",
		fillcolor=firebrick,
		label="1404:NS
Multicast <= 1'b1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430617410>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1404:NS" -> "Leaf_1397:AL"	 [cond="[]",
		lineno=None];
	"1391:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb430611c10>",
		fillcolor=springgreen,
		label="1391:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1392:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430611d50>",
		fillcolor=firebrick,
		label="1392:NS
Broadcast <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430611d50>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1391:IF" -> "1392:NS"	 [cond="['RxAbort', 'RxEndFrm']",
		label="(RxAbort | RxEndFrm)",
		lineno=1391];
	"Leaf_1452:AL"	 [def_var="['RxEndFrm_d', 'RxEndFrm']",
		label="Leaf_1452:AL"];
	"1452:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb430621a10>",
		clk_sens=True,
		fillcolor=gold,
		label="1452:AL",
		sens="['MRxClk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'RxEndFrm_d', 'GenerateRxEndFrm', 'DribbleRxEndFrm']"];
	"Leaf_1452:AL" -> "1452:AL";
	"Leaf_1452:AL" -> "rxaddrcheck1.1083:AL";
	"Leaf_1452:AL" -> "1397:AL";
	"Leaf_1452:AL" -> "rxaddrcheck1.1070:AL";
	"Leaf_1452:AL" -> "1379:AL";
	"checkSumcalc.1545:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb4305bf8d0>",
		fillcolor=springgreen,
		label="checkSumcalc.1545:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"checkSumcalc.1544:BL" -> "checkSumcalc.1545:IF"	 [cond="[]",
		lineno=None];
	"crcrx.352:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f035390>",
		def_var="['CrcError']",
		fillcolor=deepskyblue,
		label="crcrx.352:AS
CrcError = Crc[31:0] != 32'hc704dd7b;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Crc']"];
	"rxaddrcheck1.1072:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f094890>",
		fillcolor=springgreen,
		label="rxaddrcheck1.1072:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxaddrcheck1.1074:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f094b90>",
		fillcolor=springgreen,
		label="rxaddrcheck1.1074:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxaddrcheck1.1072:IF" -> "rxaddrcheck1.1074:IF"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=1072];
	"rxaddrcheck1.1073:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f0948d0>",
		fillcolor=firebrick,
		label="rxaddrcheck1.1073:NS
MulticastOK <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f0948d0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxaddrcheck1.1072:IF" -> "rxaddrcheck1.1073:NS"	 [cond="['Reset']",
		label=Reset,
		lineno=1072];
	"1400:NS" -> "Leaf_1397:AL"	 [cond="[]",
		lineno=None];
	"1344:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb430601f90>",
		fillcolor=springgreen,
		label="1344:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1344:IF" -> "1345:NS"	 [cond="['StateData', 'ByteCntEq6']",
		label="(StateData[0] & ByteCntEq6)",
		lineno=1344];
	"checkSumcalc.1528:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb43063ae50>",
		fillcolor=springgreen,
		label="checkSumcalc.1528:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"checkSumcalc.1528:IF" -> "checkSumcalc.1529:BL"	 [cond="['ByteCnt', 'ByteCnt']",
		label="((ByteCnt[15:0] >= 16'h17) & (ByteCnt[15:0] < 16'h17 + 16'd20))",
		lineno=1528];
	"checkSumcalc.1533:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43063aed0>",
		fillcolor=firebrick,
		label="checkSumcalc.1533:NS
StartCalc[1:0] <= 2'h0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43063aed0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"checkSumcalc.1528:IF" -> "checkSumcalc.1533:NS"	 [cond="['ByteCnt', 'ByteCnt']",
		label="!(((ByteCnt[15:0] >= 16'h17) & (ByteCnt[15:0] < 16'h17 + 16'd20)))",
		lineno=1528];
	"rxaddrcheck1.1097:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40ebb35d0>",
		fillcolor=springgreen,
		label="rxaddrcheck1.1097:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxaddrcheck1.1100:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40ebb3b50>",
		fillcolor=springgreen,
		label="rxaddrcheck1.1100:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxaddrcheck1.1097:IF" -> "rxaddrcheck1.1100:IF"	 [cond="['RxCheckEn', 'ByteCntEq5']",
		label="!((RxCheckEn & ByteCntEq5))",
		lineno=1097];
	"rxaddrcheck1.1098:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40ebb3710>",
		fillcolor=firebrick,
		label="rxaddrcheck1.1098:NS
UnicastOK <= (RxData[7:0] == MAC[23:16]) & UnicastOK;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40ebb3710>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxaddrcheck1.1097:IF" -> "rxaddrcheck1.1098:NS"	 [cond="['RxCheckEn', 'ByteCntEq5']",
		label="(RxCheckEn & ByteCntEq5)",
		lineno=1097];
	"rxcounters1.809:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f0a7410>",
		def_var="['ByteCntEq2']",
		fillcolor=deepskyblue,
		label="rxcounters1.809:AS
ByteCntEq2 = ByteCnt == 16'd2;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ByteCnt']"];
	"rxcounters1.809:AS" -> "rxaddrcheck1.1083:AL";
	"1432:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb43061c910>",
		clk_sens=True,
		fillcolor=gold,
		label="1432:AL",
		sens="['MRxClk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'GenerateRxStartFrm', 'RxStartFrm_d']"];
	"1428:AS" -> "1432:AL";
	"1389:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430611a50>",
		fillcolor=firebrick,
		label="1389:NS
Broadcast <= 1'b1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430611a50>]",
		style=filled,
		typ=NonblockingSubstitution];
	"Leaf_1379:AL"	 [def_var="['Broadcast']",
		label="Leaf_1379:AL"];
	"1389:NS" -> "Leaf_1379:AL"	 [cond="[]",
		lineno=None];
	"1435:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb43061cad0>",
		fillcolor=turquoise,
		label="1435:BL
RxStartFrm_d <= 1'b0;
RxStartFrm <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43061cb10>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fb43061cc50>]",
		style=filled,
		typ=Block];
	"Leaf_1432:AL"	 [def_var="['RxStartFrm', 'RxStartFrm_d']",
		label="Leaf_1432:AL"];
	"1435:BL" -> "Leaf_1432:AL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.Leaf_1083:AL" -> "rxaddrcheck1.1083:AL";
	"rxaddrcheck1.Leaf_1083:AL" -> "rxaddrcheck1.1058:AL";
	"rxaddrcheck1.1037:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f07cf50>",
		def_var="['RxAddressInvalid']",
		fillcolor=deepskyblue,
		label="rxaddrcheck1.1037:AS
RxAddressInvalid = ~(UnicastOK | BroadcastOK | MulticastOK | r_Pro);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['UnicastOK', 'BroadcastOK', 'MulticastOK', 'r_Pro']"];
	"rxaddrcheck1.Leaf_1083:AL" -> "rxaddrcheck1.1037:AS";
	"rxaddrcheck1.1041:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f09b2d0>",
		def_var="['RxCheckEn']",
		fillcolor=deepskyblue,
		label="rxaddrcheck1.1041:AS
RxCheckEn = |StateData;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['StateData']"];
	"rxaddrcheck1.1041:AS" -> "rxaddrcheck1.1046:AL";
	"rxaddrcheck1.1041:AS" -> "rxaddrcheck1.1083:AL";
	"rxaddrcheck1.1041:AS" -> "rxaddrcheck1.1058:AL";
	"rxcounters1.846:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f07a310>",
		fillcolor=springgreen,
		label="rxcounters1.846:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxcounters1.847:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f07a2d0>",
		fillcolor=firebrick,
		label="rxcounters1.847:NS
DlyCrcCnt[3:0] <= 4'h0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f07a2d0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxcounters1.846:IF" -> "rxcounters1.847:NS"	 [cond="['Reset']",
		label=Reset,
		lineno=846];
	"rxcounters1.849:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40f07a390>",
		fillcolor=turquoise,
		label="rxcounters1.849:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"rxcounters1.846:IF" -> "rxcounters1.849:BL"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=846];
	"rxcounters1.813:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f0a7b10>",
		def_var="['ByteCntEq6']",
		fillcolor=deepskyblue,
		label="rxcounters1.813:AS
ByteCntEq6 = ByteCnt == 16'd6;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ByteCnt']"];
	"rxcounters1.813:AS" -> "1334:AL";
	"1339:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb4306018d0>",
		clk_sens=True,
		fillcolor=gold,
		label="1339:AL",
		sens="['MRxClk']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'StateIdle', 'ByteCntEq6', 'StateData', 'Crc']"];
	"rxcounters1.813:AS" -> "1339:AL";
	"rxcounters1.816:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f087110>",
		def_var="['ByteCntSmall7']",
		fillcolor=deepskyblue,
		label="rxcounters1.816:AS
ByteCntSmall7 = ByteCnt < 16'd7;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ByteCnt']"];
	"rxcounters1.816:AS" -> "1379:AL";
	"rxstatem1.546:BL" -> "rxstatem1.Leaf_543:AL"	 [cond="[]",
		lineno=None];
	"crcrx.332:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f019f90>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.332:AS
CrcNext[25] = Enable & (Data[3] ^ Data[2] ^ Crc[31] ^ Crc[30]) ^ Crc[21];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Data', 'Crc', 'Crc', 'Crc']"];
	"crcrx.332:AS" -> "crcrx.341:AL";
	"checkSumcalc.1533:NS" -> "checkSumcalc.Leaf_1509:AL"	 [cond="[]",
		lineno=None];
	"rxstatem1.580:IF" -> "rxstatem1.583:IF"	 [cond="['StartIdle', 'StartData1', 'StartDrop']",
		label="!((StartIdle | StartData1 | StartDrop))",
		lineno=580];
	"rxstatem1.581:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f326b10>",
		fillcolor=firebrick,
		label="rxstatem1.581:NS
StateData0 <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f326b10>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxstatem1.580:IF" -> "rxstatem1.581:NS"	 [cond="['StartIdle', 'StartData1', 'StartDrop']",
		label="(StartIdle | StartData1 | StartDrop)",
		lineno=580];
	"rxaddrcheck1.1071:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40f094750>",
		fillcolor=turquoise,
		label="rxaddrcheck1.1071:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"rxaddrcheck1.1071:BL" -> "rxaddrcheck1.1072:IF"	 [cond="[]",
		lineno=None];
	"rxstatem1.586:IF" -> "rxstatem1.589:IF"	 [cond="['StartIdle', 'StartData0', 'StartDrop']",
		label="!((StartIdle | StartData0 | StartDrop))",
		lineno=586];
	"rxstatem1.587:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f326f90>",
		fillcolor=firebrick,
		label="rxstatem1.587:NS
StateData1 <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f326f90>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxstatem1.586:IF" -> "rxstatem1.587:NS"	 [cond="['StartIdle', 'StartData0', 'StartDrop']",
		label="(StartIdle | StartData0 | StartDrop)",
		lineno=586];
	"crcrx.334:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f01ab50>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.334:AS
CrcNext[27] = Enable & (Data[1] ^ Crc[29]) ^ Crc[23];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Crc', 'Crc']"];
	"crcrx.334:AS" -> "crcrx.341:AL";
	"rxcounters1.844:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb40f07a090>",
		clk_sens=True,
		fillcolor=gold,
		label="rxcounters1.844:AL",
		sens="['MRxClk', 'Reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['Reset', 'DlyCrcEn', 'StateSFD', 'DlyCrcCnt']"];
	"rxcounters1.845:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40f07a050>",
		fillcolor=turquoise,
		label="rxcounters1.845:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"rxcounters1.844:AL" -> "rxcounters1.845:BL"	 [cond="[]",
		lineno=None];
	"rxstatem1.566:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f32be50>",
		fillcolor=firebrick,
		label="rxstatem1.566:NS
StateDrop <= 1'b1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f32be50>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxstatem1.566:NS" -> "rxstatem1.Leaf_543:AL"	 [cond="[]",
		lineno=None];
	"crcrx.312:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f070f90>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.312:AS
CrcNext[5] = Enable & (Data[3] ^ Data[1] ^ Data[0] ^ Crc[28] ^ Crc[29] ^ Crc[31]) ^ Crc[1];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Data', 'Data', 'Crc', 'Crc', 'Crc', 'Crc']"];
	"crcrx.312:AS" -> "crcrx.341:AL";
	"rxcounters1.815:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f0a7ed0>",
		def_var="['ByteCntGreat2']",
		fillcolor=deepskyblue,
		label="rxcounters1.815:AS
ByteCntGreat2 = ByteCnt > 16'd2;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ByteCnt']"];
	"1449:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb4306216d0>",
		def_var="['DribbleRxEndFrm']",
		fillcolor=deepskyblue,
		label="1449:AS
DribbleRxEndFrm = StateData[1] & ~MRxDV & ByteCntGreat2;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['StateData', 'MRxDV', 'ByteCntGreat2']"];
	"rxcounters1.815:AS" -> "1449:AS";
	"1447:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb430621450>",
		def_var="['GenerateRxEndFrm']",
		fillcolor=deepskyblue,
		label="1447:AS
GenerateRxEndFrm = StateData[0] & (~MRxDV & ByteCntGreat2 | ByteCntMaxFrame);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['StateData', 'MRxDV', 'ByteCntGreat2', 'ByteCntMaxFrame']"];
	"rxcounters1.815:AS" -> "1447:AS";
	"rxaddrcheck1.1115:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fb40eb9f810>",
		fillcolor=cadetblue,
		label="rxaddrcheck1.1115:BS
ByteHash = IntHash[7:0];",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fb40eb9f810>]",
		style=filled,
		typ=BlockingSubstitution];
	"rxaddrcheck1.1115:BS" -> "rxaddrcheck1.Leaf_1112:AL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1086:NS" -> "rxaddrcheck1.Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"checkSumcalc.Leaf_1494:AL"	 [def_var="['prev_latched_Rx1', 'Divided_2_clk', 'prev_latched_Rx']",
		label="checkSumcalc.Leaf_1494:AL"];
	"checkSumcalc.Leaf_1494:AL" -> "checkSumcalc.1543:AL";
	"checkSumcalc.Leaf_1494:AL" -> "checkSumcalc.1505:AL";
	"checkSumcalc.Leaf_1494:AL" -> "checkSumcalc.1494:AL";
	"1308:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb4305fc810>",
		def_var="['Data_Crc']",
		fillcolor=deepskyblue,
		label="1308:AS
Data_Crc[2] = MRxD[1];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['MRxD']"];
	"1308:AS" -> "crcrx.318:AS";
	"1308:AS" -> "crcrx.331:AS";
	"1308:AS" -> "crcrx.308:AS";
	"1308:AS" -> "crcrx.317:AS";
	"1308:AS" -> "crcrx.307:AS";
	"1308:AS" -> "crcrx.332:AS";
	"1308:AS" -> "crcrx.334:AS";
	"1308:AS" -> "crcrx.312:AS";
	"crcrx.324:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f44b810>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.324:AS
CrcNext[17] = Enable & (Data[1] ^ Crc[29]) ^ Crc[13];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.324:AS";
	"crcrx.326:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f44f1d0>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.326:AS
CrcNext[19] = Enable & (Data[3] ^ Crc[31]) ^ Crc[15];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.326:AS";
	"crcrx.323:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f44b350>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.323:AS
CrcNext[16] = Enable & (Data[0] ^ Crc[28]) ^ Crc[12];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.323:AS";
	"crcrx.311:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f0706d0>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.311:AS
CrcNext[4] = Enable & (Data[3] ^ Data[2] ^ Data[0] ^ Crc[28] ^ Crc[30] ^ Crc[31]) ^ Crc[0];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Data', 'Data', 'Crc', 'Crc', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.311:AS";
	"crcrx.329:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f44fb10>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.329:AS
CrcNext[22] = Enable & (Data[0] ^ Crc[28]) ^ Crc[18];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.329:AS";
	"crcrx.335:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40effa050>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.335:AS
CrcNext[28] = Enable & (Data[2] ^ Crc[30]) ^ Crc[24];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.335:AS";
	"crcrx.325:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f44bcd0>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.325:AS
CrcNext[18] = Enable & (Data[2] ^ Crc[30]) ^ Crc[14];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.325:AS";
	"crcrx.321:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f449990>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.321:AS
CrcNext[14] = Enable & (Data[3] ^ Data[2] ^ Crc[30] ^ Crc[31]) ^ Crc[10];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Data', 'Crc', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.321:AS";
	"crcrx.309:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f06e550>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.309:AS
CrcNext[2] = Enable & (Data[2] ^ Data[1] ^ Data[0] ^ Crc[28] ^ Crc[29] ^ Crc[30]);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Data', 'Data', 'Crc', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.309:AS";
	"crcrx.313:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f073690>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.313:AS
CrcNext[6] = Enable & (Data[2] ^ Data[1] ^ Crc[29] ^ Crc[30]) ^ Crc[2];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Data', 'Crc', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.313:AS";
	"crcrx.316:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f452f10>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.316:AS
CrcNext[9] = Enable & (Data[2] ^ Data[1] ^ Crc[29] ^ Crc[30]) ^ Crc[5];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Data', 'Crc', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.316:AS";
	"crcrx.319:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f4469d0>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.319:AS
CrcNext[12] = Enable & (Data[2] ^ Data[1] ^ Data[0] ^ Crc[28] ^ Crc[29] ^ Crc[30]) ^ Crc[8];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Data', 'Data', 'Crc', 'Crc', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.319:AS";
	"crcrx.330:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f019210>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.330:AS
CrcNext[23] = Enable & (Data[1] ^ Data[0] ^ Crc[29] ^ Crc[28]) ^ Crc[19];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Data', 'Crc', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.330:AS";
	"crcrx.336:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40effa510>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.336:AS
CrcNext[29] = Enable & (Data[3] ^ Crc[31]) ^ Crc[25];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.336:AS";
	"crcrx.322:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f449e50>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.322:AS
CrcNext[15] = Enable & (Data[3] ^ Crc[31]) ^ Crc[11];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.322:AS";
	"crcrx.315:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f452850>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.315:AS
CrcNext[8] = Enable & (Data[3] ^ Data[1] ^ Data[0] ^ Crc[28] ^ Crc[29] ^ Crc[31]) ^ Crc[4];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Data', 'Data', 'Crc', 'Crc', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.315:AS";
	"crcrx.310:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f06ed10>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.310:AS
CrcNext[3] = Enable & (Data[3] ^ Data[2] ^ Data[1] ^ Crc[29] ^ Crc[30] ^ Crc[31]);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Data', 'Data', 'Crc', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.310:AS";
	"crcrx.314:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f073f50>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.314:AS
CrcNext[7] = Enable & (Data[3] ^ Data[2] ^ Data[0] ^ Crc[28] ^ Crc[30] ^ Crc[31]) ^ Crc[3];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Data', 'Data', 'Crc', 'Crc', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.314:AS";
	"crcrx.320:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f4492d0>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.320:AS
CrcNext[13] = Enable & (Data[3] ^ Data[2] ^ Data[1] ^ Crc[29] ^ Crc[30] ^ Crc[31]) ^ Crc[9];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Data', 'Data', 'Crc', 'Crc', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.320:AS";
	"crcrx.333:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f01a690>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.333:AS
CrcNext[26] = Enable & (Data[3] ^ Data[0] ^ Crc[31] ^ Crc[28]) ^ Crc[22];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Enable', 'Data', 'Data', 'Crc', 'Crc', 'Crc']"];
	"1308:AS" -> "crcrx.333:AS";
	"rxstatem1.594:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f323310>",
		def_var="['StateData']",
		fillcolor=deepskyblue,
		label="rxstatem1.594:AS
StateData[1:0] = { StateData1, StateData0 };",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['StateData1', 'StateData0']"];
	"rxstatem1.594:AS" -> "rxstatem1.529:AS";
	"rxstatem1.594:AS" -> "1334:AL";
	"rxstatem1.594:AS" -> "1349:AL";
	"rxstatem1.594:AS" -> "1428:AS";
	"rxstatem1.594:AS" -> "1397:AL";
	"1411:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb430617950>",
		def_var="['GenerateRxValid']",
		fillcolor=deepskyblue,
		label="1411:AS
GenerateRxValid = StateData[0] & (~ByteCntEq0 | (DlyCrcCnt >= 4'h3));",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['StateData', 'ByteCntEq0', 'DlyCrcCnt']"];
	"rxstatem1.594:AS" -> "1411:AS";
	"rxstatem1.594:AS" -> "1379:AL";
	"1302:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40eba7c10>",
		def_var="['Enable_Crc']",
		fillcolor=deepskyblue,
		label="1302:AS
Enable_Crc = MRxDV & (|StateData & ~ByteCntMaxFrame);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['MRxDV', 'StateData', 'ByteCntMaxFrame']"];
	"rxstatem1.594:AS" -> "1302:AS";
	"rxstatem1.594:AS" -> "1339:AL";
	"rxstatem1.594:AS" -> "1449:AS";
	"rxstatem1.594:AS" -> "1447:AS";
	"rxaddrcheck1.1104:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb9f250>",
		fillcolor=firebrick,
		label="rxaddrcheck1.1104:NS
UnicastOK <= (RxData[7:0] == MAC[7:0]) & UnicastOK;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb9f250>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxaddrcheck1.1104:NS" -> "rxaddrcheck1.Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"crcrx.324:AS" -> "crcrx.341:AL";
	"rxcounters1.793:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f0b4390>",
		fillcolor=firebrick,
		label="rxcounters1.793:NS
ByteCnt[15:0] <= 16'd0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f0b4390>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxcounters1.Leaf_790:AL"	 [def_var="['ByteCnt']",
		label="rxcounters1.Leaf_790:AL"];
	"rxcounters1.793:NS" -> "rxcounters1.Leaf_790:AL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1076:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f094d90>",
		fillcolor=springgreen,
		label="rxaddrcheck1.1076:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxaddrcheck1.1074:IF" -> "rxaddrcheck1.1076:IF"	 [cond="['RxEndFrm', 'RxAbort']",
		label="!((RxEndFrm | RxAbort))",
		lineno=1074];
	"rxaddrcheck1.1075:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f094bd0>",
		fillcolor=firebrick,
		label="rxaddrcheck1.1075:NS
MulticastOK <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f094bd0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxaddrcheck1.1074:IF" -> "rxaddrcheck1.1075:NS"	 [cond="['RxEndFrm', 'RxAbort']",
		label="(RxEndFrm | RxAbort)",
		lineno=1074];
	"rxaddrcheck1.1049:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09b690>",
		fillcolor=firebrick,
		label="rxaddrcheck1.1049:NS
RxAbort <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09b690>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxaddrcheck1.1049:NS" -> "rxaddrcheck1.Leaf_1046:AL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.Leaf_1070:AL"	 [def_var="['MulticastOK']",
		label="rxaddrcheck1.Leaf_1070:AL"];
	"rxaddrcheck1.1073:NS" -> "rxaddrcheck1.Leaf_1070:AL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1101:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40ebb3c90>",
		fillcolor=firebrick,
		label="rxaddrcheck1.1101:NS
UnicastOK <= (RxData[7:0] == MAC[15:8]) & UnicastOK;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40ebb3c90>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxaddrcheck1.1101:NS" -> "rxaddrcheck1.Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"1453:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb430621a50>",
		fillcolor=turquoise,
		label="1453:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1452:AL" -> "1453:BL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1077:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f094ed0>",
		fillcolor=firebrick,
		label="rxaddrcheck1.1077:NS
MulticastOK <= HashBit;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f094ed0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxaddrcheck1.1076:IF" -> "rxaddrcheck1.1077:NS"	 [cond="['CrcHashGood', 'Multicast']",
		label="(CrcHashGood & Multicast)",
		lineno=1076];
	"rxaddrcheck1.1084:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40f094fd0>",
		fillcolor=turquoise,
		label="rxaddrcheck1.1084:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"rxaddrcheck1.1083:AL" -> "rxaddrcheck1.1084:BL"	 [cond="[]",
		lineno=None];
	"rxstatem1.557:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f32b850>",
		fillcolor=firebrick,
		label="rxstatem1.557:NS
StateIdle <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f32b850>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxstatem1.557:NS" -> "rxstatem1.Leaf_543:AL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1122:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40eba5390>",
		def_var="['HashBit']",
		fillcolor=deepskyblue,
		label="rxaddrcheck1.1122:AS
HashBit = ByteHash[CrcHash[2:0]];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ByteHash', 'CrcHash']"];
	"Leaf_1339:AL" -> "rxaddrcheck1.1122:AS";
	"rxaddrcheck1.1112:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fb40eb9f2d0>",
		clk_sens=False,
		fillcolor=gold,
		label="rxaddrcheck1.1112:AL",
		sens="['CrcHash', 'IntHash']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['IntHash', 'CrcHash']"];
	"Leaf_1339:AL" -> "rxaddrcheck1.1112:AL";
	"rxaddrcheck1.1110:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40ebb3210>",
		def_var="['IntHash']",
		fillcolor=deepskyblue,
		label="rxaddrcheck1.1110:AS
IntHash = (CrcHash[5])? HASH1 : HASH0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['CrcHash', 'HASH1', 'HASH0']"];
	"Leaf_1339:AL" -> "rxaddrcheck1.1110:AS";
	"rxstatem1.569:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f3260d0>",
		fillcolor=firebrick,
		label="rxstatem1.569:NS
StatePreamble <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f3260d0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxstatem1.569:NS" -> "rxstatem1.Leaf_543:AL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.Leaf_1112:AL" -> "rxaddrcheck1.1122:AS";
	"1454:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb430621cd0>",
		fillcolor=springgreen,
		label="1454:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1453:BL" -> "1454:IF"	 [cond="[]",
		lineno=None];
	"1397:AL" -> "1398:BL"	 [cond="[]",
		lineno=None];
	"rxcounters1.823:AS" -> "rxcounters1.825:AL";
	"1380:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb43060cd90>",
		fillcolor=turquoise,
		label="1380:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1381:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb43060cf90>",
		fillcolor=springgreen,
		label="1381:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1380:BL" -> "1381:IF"	 [cond="[]",
		lineno=None];
	"1303:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb4305fc150>",
		def_var="['Initialize_Crc']",
		fillcolor=deepskyblue,
		label="1303:AS
Initialize_Crc = StateSFD | DlyCrcEn & |DlyCrcCnt[3:0] & (DlyCrcCnt[3:0] < 4'h9);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['StateSFD', 'DlyCrcEn', 'DlyCrcCnt', 'DlyCrcCnt']"];
	"1303:AS" -> "crcrx.341:AL";
	"crcrx.326:AS" -> "crcrx.341:AL";
	"checkSumcalc.1545:IF" -> "checkSumcalc.1546:NS"	 [cond="['StartCalc']",
		label="(&StartCalc)",
		lineno=1545];
	"1392:NS" -> "Leaf_1379:AL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1107:NS" -> "rxaddrcheck1.Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"crcrx.343:IF" -> "crcrx.346:IF"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=343];
	"crcrx.344:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40effad90>",
		fillcolor=firebrick,
		label="crcrx.344:NS
Crc <= 32'hffffffff;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40effad90>]",
		style=filled,
		typ=NonblockingSubstitution];
	"crcrx.343:IF" -> "crcrx.344:NS"	 [cond="['Reset']",
		label=Reset,
		lineno=343];
	"rxaddrcheck1.1039:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f09b150>",
		def_var="['BroadcastOK']",
		fillcolor=deepskyblue,
		label="rxaddrcheck1.1039:AS
BroadcastOK = Broadcast & ~r_Bro;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Broadcast', 'r_Bro']"];
	"rxaddrcheck1.1039:AS" -> "rxaddrcheck1.1058:AL";
	"rxaddrcheck1.1039:AS" -> "rxaddrcheck1.1037:AS";
	"crcrx.Leaf_341:AL"	 [def_var="['Crc']",
		label="crcrx.Leaf_341:AL"];
	"crcrx.Leaf_341:AL" -> "crcrx.318:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.331:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.308:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.317:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.327:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.328:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.307:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.352:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.332:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.334:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.312:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.324:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.326:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.323:AS";
	"crcrx.338:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40effa990>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.338:AS
CrcNext[31] = Crc[27];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Crc']"];
	"crcrx.Leaf_341:AL" -> "crcrx.338:AS";
	"crcrx.337:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40effa750>",
		def_var="['CrcNext']",
		fillcolor=deepskyblue,
		label="crcrx.337:AS
CrcNext[30] = Crc[26];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Crc']"];
	"crcrx.Leaf_341:AL" -> "crcrx.337:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.311:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.329:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.335:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.325:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.321:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.309:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.313:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.316:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.319:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.330:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.336:AS";
	"crcrx.Leaf_341:AL" -> "1339:AL";
	"crcrx.Leaf_341:AL" -> "crcrx.322:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.315:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.310:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.314:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.320:AS";
	"crcrx.Leaf_341:AL" -> "crcrx.333:AS";
	"checkSumcalc.1518:NS" -> "checkSumcalc.Leaf_1509:AL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1070:AL" -> "rxaddrcheck1.1071:BL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1059:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40f09bd10>",
		fillcolor=turquoise,
		label="rxaddrcheck1.1059:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"rxaddrcheck1.1059:BL" -> "rxaddrcheck1.1060:IF"	 [cond="[]",
		lineno=None];
	"rxstatem1.590:NS" -> "rxstatem1.Leaf_543:AL"	 [cond="[]",
		lineno=None];
	"rxcounters1.797:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f0b4750>",
		fillcolor=firebrick,
		label="rxcounters1.797:NS
ByteCnt[15:0] <= 16'd0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f0b4750>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxcounters1.797:NS" -> "rxcounters1.Leaf_790:AL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.Leaf_1058:AL"	 [def_var="['AddressMiss']",
		label="rxaddrcheck1.Leaf_1058:AL"];
	"rxaddrcheck1.1061:NS" -> "rxaddrcheck1.Leaf_1058:AL"	 [cond="[]",
		lineno=None];
	"1366:NS" -> "Leaf_1349:AL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1113:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40eb9f5d0>",
		fillcolor=turquoise,
		label="rxaddrcheck1.1113:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"rxaddrcheck1.1114:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7fb40eb9fe10>",
		fillcolor=linen,
		label="rxaddrcheck1.1114:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"rxaddrcheck1.1113:BL" -> "rxaddrcheck1.1114:CS"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1058:AL" -> "rxaddrcheck1.1059:BL"	 [cond="[]",
		lineno=None];
	"crcrx.323:AS" -> "crcrx.341:AL";
	"rxaddrcheck1.1103:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40eb9f110>",
		fillcolor=springgreen,
		label="rxaddrcheck1.1103:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxaddrcheck1.1103:IF" -> "rxaddrcheck1.1106:IF"	 [cond="['RxCheckEn', 'ByteCntEq7']",
		label="!((RxCheckEn & ByteCntEq7))",
		lineno=1103];
	"rxaddrcheck1.1103:IF" -> "rxaddrcheck1.1104:NS"	 [cond="['RxCheckEn', 'ByteCntEq7']",
		label="(RxCheckEn & ByteCntEq7)",
		lineno=1103];
	"rxstatem1.544:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40f321c10>",
		fillcolor=turquoise,
		label="rxstatem1.544:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"rxstatem1.543:AL" -> "rxstatem1.544:BL"	 [cond="[]",
		lineno=None];
	"rxcounters1.847:NS" -> "rxcounters1.Leaf_844:AL"	 [cond="[]",
		lineno=None];
	"rxstatem1.Leaf_543:AL" -> "rxstatem1.529:AS";
	"rxstatem1.Leaf_543:AL" -> "rxcounters1.821:AS";
	"rxstatem1.Leaf_543:AL" -> "rxstatem1.533:AS";
	"rxstatem1.Leaf_543:AL" -> "rxstatem1.537:AS";
	"rxstatem1.Leaf_543:AL" -> "rxstatem1.594:AS";
	"rxstatem1.Leaf_543:AL" -> "rxcounters1.823:AS";
	"rxstatem1.Leaf_543:AL" -> "1303:AS";
	"rxstatem1.Leaf_543:AL" -> "rxcounters1.784:AS";
	"rxstatem1.Leaf_543:AL" -> "rxstatem1.535:AS";
	"rxstatem1.Leaf_543:AL" -> "1339:AL";
	"rxstatem1.Leaf_543:AL" -> "rxstatem1.531:AS";
	"rxstatem1.Leaf_543:AL" -> "rxstatem1.539:AS";
	"rxstatem1.584:NS" -> "rxstatem1.Leaf_543:AL"	 [cond="[]",
		lineno=None];
	"rxstatem1.559:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f32b990>",
		fillcolor=springgreen,
		label="rxstatem1.559:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxstatem1.560:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f32bad0>",
		fillcolor=firebrick,
		label="rxstatem1.560:NS
StateIdle <= 1'b1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f32bad0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxstatem1.559:IF" -> "rxstatem1.560:NS"	 [cond="['StartIdle']",
		label=StartIdle,
		lineno=559];
	"1340:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb430601910>",
		fillcolor=turquoise,
		label="1340:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1341:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb430601c10>",
		fillcolor=springgreen,
		label="1341:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1340:BL" -> "1341:IF"	 [cond="[]",
		lineno=None];
	"rxstatem1.574:IF" -> "rxstatem1.577:IF"	 [cond="['StartPreamble', 'StartIdle', 'StartData0', 'StartDrop']",
		label="!((StartPreamble | StartIdle | StartData0 | StartDrop))",
		lineno=574];
	"rxstatem1.574:IF" -> "rxstatem1.575:NS"	 [cond="['StartPreamble', 'StartIdle', 'StartData0', 'StartDrop']",
		label="(StartPreamble | StartIdle | StartData0 | StartDrop)",
		lineno=574];
	"rxcounters1.812:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f0a7950>",
		def_var="['ByteCntEq5']",
		fillcolor=deepskyblue,
		label="rxcounters1.812:AS
ByteCntEq5 = ByteCnt == 16'd5;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ByteCnt']"];
	"rxcounters1.812:AS" -> "rxaddrcheck1.1083:AL";
	"crcrx.338:AS" -> "crcrx.341:AL";
	"rxstatem1.563:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f32bbd0>",
		fillcolor=firebrick,
		label="rxstatem1.563:NS
StateDrop <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f32bbd0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxstatem1.562:IF" -> "rxstatem1.563:NS"	 [cond="['StartIdle']",
		label=StartIdle,
		lineno=562];
	"rxstatem1.565:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f32bd10>",
		fillcolor=springgreen,
		label="rxstatem1.565:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxstatem1.562:IF" -> "rxstatem1.565:IF"	 [cond="['StartIdle']",
		label="!(StartIdle)",
		lineno=562];
	"rxcounters1.845:BL" -> "rxcounters1.846:IF"	 [cond="[]",
		lineno=None];
	"crcrx.337:AS" -> "crcrx.341:AL";
	"rxcounters1.784:AS" -> "rxcounters1.790:AL";
	"checkSumcalc.1497:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb43062f090>",
		fillcolor=springgreen,
		label="checkSumcalc.1497:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"checkSumcalc.1498:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb43062f650>",
		fillcolor=turquoise,
		label="checkSumcalc.1498:BL
prev_latched_Rx[7:0] <= RxData[7:0];
prev_latched_Rx1[7:0] <= prev_latched_Rx[7:0];",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43062f410>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fb43062f790>]",
		style=filled,
		typ=Block];
	"checkSumcalc.1497:IF" -> "checkSumcalc.1498:BL"	 [cond="['ByteCnt', 'ByteCnt']",
		label="((ByteCnt[15:0] >= 16'h17) & (ByteCnt[15:0] < 16'h17 + 16'd20))",
		lineno=1497];
	"1434:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb43061cc10>",
		fillcolor=springgreen,
		label="1434:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1434:IF" -> "1435:BL"	 [cond="['Reset']",
		label=Reset,
		lineno=1434];
	"1440:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb43061ce50>",
		fillcolor=turquoise,
		label="1440:BL
RxStartFrm_d <= GenerateRxStartFrm;
RxStartFrm <= RxStartFrm_d;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43061ce90>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fb430621050>]",
		style=filled,
		typ=Block];
	"1434:IF" -> "1440:BL"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=1434];
	"crcrx.311:AS" -> "crcrx.341:AL";
	"rxaddrcheck1.1050:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f09ba10>",
		fillcolor=springgreen,
		label="rxaddrcheck1.1050:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxaddrcheck1.1050:IF" -> "rxaddrcheck1.1053:NS"	 [cond="['RxAddressInvalid', 'ByteCntEq7', 'RxCheckEn']",
		label="!((RxAddressInvalid & ByteCntEq7 & RxCheckEn))",
		lineno=1050];
	"rxaddrcheck1.1050:IF" -> "rxaddrcheck1.1051:NS"	 [cond="['RxAddressInvalid', 'ByteCntEq7', 'RxCheckEn']",
		label="(RxAddressInvalid & ByteCntEq7 & RxCheckEn)",
		lineno=1050];
	"1371:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43060ca10>",
		fillcolor=firebrick,
		label="1371:NS
RxData_d[7:0] <= 8'h0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43060ca10>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1368:IF" -> "1371:NS"	 [cond="['DelayData']",
		label="(~DelayData)",
		lineno=1368];
	"rxaddrcheck1.1100:IF" -> "rxaddrcheck1.1101:NS"	 [cond="['RxCheckEn', 'ByteCntEq6']",
		label="(RxCheckEn & ByteCntEq6)",
		lineno=1100];
	"rxaddrcheck1.1100:IF" -> "rxaddrcheck1.1103:IF"	 [cond="['RxCheckEn', 'ByteCntEq6']",
		label="!((RxCheckEn & ByteCntEq6))",
		lineno=1100];
	"1455:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb430621b90>",
		fillcolor=turquoise,
		label="1455:BL
RxEndFrm_d <= 1'b0;
RxEndFrm <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430621bd0>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fb430621d10>]",
		style=filled,
		typ=Block];
	"1455:BL" -> "Leaf_1452:AL"	 [cond="[]",
		lineno=None];
	"crcrx.329:AS" -> "crcrx.341:AL";
	"rxaddrcheck1.1037:AS" -> "rxaddrcheck1.1046:AL";
	"Leaf_1334:AL" -> "rxaddrcheck1.1070:AL";
	"rxaddrcheck1.1063:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f094110>",
		fillcolor=firebrick,
		label="rxaddrcheck1.1063:NS
AddressMiss <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f094110>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxaddrcheck1.1063:NS" -> "rxaddrcheck1.Leaf_1058:AL"	 [cond="[]",
		lineno=None];
	"1388:IF" -> "1391:IF"	 [cond="['StateData', 'LatchedByte', 'ByteCntEq1']",
		label="!((StateData[0] & &LatchedByte[7:0] & ByteCntEq1))",
		lineno=1388];
	"1388:IF" -> "1389:NS"	 [cond="['StateData', 'LatchedByte', 'ByteCntEq1']",
		label="(StateData[0] & &LatchedByte[7:0] & ByteCntEq1)",
		lineno=1388];
	"rxcounters1.831:IF" -> "rxcounters1.834:IF"	 [cond="['ResetIFGCounter']",
		label="!(ResetIFGCounter)",
		lineno=831];
	"rxcounters1.832:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09d750>",
		fillcolor=firebrick,
		label="rxcounters1.832:NS
IFGCounter[4:0] <= 5'h0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f09d750>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxcounters1.831:IF" -> "rxcounters1.832:NS"	 [cond="['ResetIFGCounter']",
		label=ResetIFGCounter,
		lineno=831];
	"1415:IF" -> "1421:BL"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=1415];
	"1416:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb430617d50>",
		fillcolor=turquoise,
		label="1416:BL
RxValid_d <= 1'b0;
RxValid <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430617d90>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fb430617ed0>]",
		style=filled,
		typ=Block];
	"1415:IF" -> "1416:BL"	 [cond="['Reset']",
		label=Reset,
		lineno=1415];
	"1413:AL" -> "1414:BL"	 [cond="[]",
		lineno=None];
	"1440:BL" -> "Leaf_1432:AL"	 [cond="[]",
		lineno=None];
	"rxstatem1.587:NS" -> "rxstatem1.Leaf_543:AL"	 [cond="[]",
		lineno=None];
	"checkSumcalc.1495:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb43062acd0>",
		fillcolor=turquoise,
		label="checkSumcalc.1495:BL
Divided_2_clk <= MRxClk ^ Divided_2_clk;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43062ac50>]",
		style=filled,
		typ=Block];
	"checkSumcalc.1495:BL" -> "checkSumcalc.1497:IF"	 [cond="[]",
		lineno=None];
	"crcrx.335:AS" -> "crcrx.341:AL";
	"1411:AS" -> "1349:AL";
	"1411:AS" -> "1413:AL";
	"1351:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb430607a50>",
		fillcolor=springgreen,
		label="1351:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1351:IF" -> "1359:BL"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=1351];
	"1351:IF" -> "1352:BL"	 [cond="['Reset']",
		label=Reset,
		lineno=1351];
	"1342:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430601bd0>",
		fillcolor=firebrick,
		label="1342:NS
CrcHash[5:0] <= 6'h0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430601bd0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1342:NS" -> "Leaf_1339:AL"	 [cond="[]",
		lineno=None];
	"checkSumcalc.1494:AL" -> "checkSumcalc.1495:BL"	 [cond="[]",
		lineno=None];
	"crcrx.325:AS" -> "crcrx.341:AL";
	"1382:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43060cf50>",
		fillcolor=firebrick,
		label="1382:NS
Broadcast <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43060cf50>]",
		style=filled,
		typ=NonblockingSubstitution];
	"1382:NS" -> "Leaf_1379:AL"	 [cond="[]",
		lineno=None];
	"rxcounters1.853:IF" -> "rxcounters1.856:IF"	 [cond="['DlyCrcEn', 'StateSFD']",
		label="!((DlyCrcEn & StateSFD))",
		lineno=853];
	"rxcounters1.854:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f07ab50>",
		fillcolor=firebrick,
		label="rxcounters1.854:NS
DlyCrcCnt[3:0] <= 4'h1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f07ab50>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxcounters1.853:IF" -> "rxcounters1.854:NS"	 [cond="['DlyCrcEn', 'StateSFD']",
		label="(DlyCrcEn & StateSFD)",
		lineno=853];
	"rxstatem1.535:AS" -> "rxstatem1.543:AL";
	"Leaf_1379:AL" -> "rxaddrcheck1.1039:AS";
	"rxstatem1.578:NS" -> "rxstatem1.Leaf_543:AL"	 [cond="[]",
		lineno=None];
	"rxcounters1.795:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40f0b4450>",
		fillcolor=turquoise,
		label="rxcounters1.795:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"rxcounters1.796:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f0b4790>",
		fillcolor=springgreen,
		label="rxcounters1.796:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxcounters1.795:BL" -> "rxcounters1.796:IF"	 [cond="[]",
		lineno=None];
	"1460:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb430621ed0>",
		fillcolor=turquoise,
		label="1460:BL
RxEndFrm_d <= GenerateRxEndFrm;
RxEndFrm <= RxEndFrm_d | DribbleRxEndFrm;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430621f10>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fb430626150>]",
		style=filled,
		typ=Block];
	"1460:BL" -> "Leaf_1452:AL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1089:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb91610>",
		fillcolor=firebrick,
		label="rxaddrcheck1.1089:NS
UnicastOK <= RxData[7:0] == MAC[47:40];",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40eb91610>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxaddrcheck1.1089:NS" -> "rxaddrcheck1.Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"checkSumcalc.1520:IF" -> "checkSumcalc.1528:IF"	 [cond="['ByteCnt']",
		label="!((ByteCnt[15:0] == 16'h16))",
		lineno=1520];
	"checkSumcalc.1521:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb43063a210>",
		fillcolor=turquoise,
		label="checkSumcalc.1521:BL
StartCalc[0] <= (RxData[7:0] == 8'h0) & StartCalc[0];
CheckSum[15:0] <= 16'h0;
Sum[31:0] <= 32'h0;
CSready <= \
1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb430634e10>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7fb43063a050>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb43063a250>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7fb43063a390>]",
		style=filled,
		typ=Block];
	"checkSumcalc.1520:IF" -> "checkSumcalc.1521:BL"	 [cond="['ByteCnt']",
		label="(ByteCnt[15:0] == 16'h16)",
		lineno=1520];
	"rxcounters1.804:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f0b4b90>",
		def_var="['ByteCntDelayed']",
		fillcolor=deepskyblue,
		label="rxcounters1.804:AS
ByteCntDelayed = ByteCnt + 16'd4;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ByteCnt']"];
	"rxcounters1.805:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f0b4e10>",
		def_var="['ByteCntOut']",
		fillcolor=deepskyblue,
		label="rxcounters1.805:AS
ByteCntOut = (DlyCrcEn)? ByteCntDelayed : ByteCnt;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['DlyCrcEn', 'ByteCntDelayed', 'ByteCnt']"];
	"rxcounters1.804:AS" -> "rxcounters1.805:AS";
	"checkSumcalc.Leaf_1505:AL"	 [def_var="['Divided_4_clk']",
		label="checkSumcalc.Leaf_1505:AL"];
	"checkSumcalc.1506:NS" -> "checkSumcalc.Leaf_1505:AL"	 [cond="[]",
		lineno=None];
	"1306:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb4305fc390>",
		def_var="['Data_Crc']",
		fillcolor=deepskyblue,
		label="1306:AS
Data_Crc[0] = MRxD[3];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['MRxD']"];
	"1306:AS" -> "crcrx.318:AS";
	"1306:AS" -> "crcrx.331:AS";
	"1306:AS" -> "crcrx.308:AS";
	"1306:AS" -> "crcrx.317:AS";
	"1306:AS" -> "crcrx.307:AS";
	"1306:AS" -> "crcrx.332:AS";
	"1306:AS" -> "crcrx.334:AS";
	"1306:AS" -> "crcrx.312:AS";
	"1306:AS" -> "crcrx.324:AS";
	"1306:AS" -> "crcrx.326:AS";
	"1306:AS" -> "crcrx.323:AS";
	"1306:AS" -> "crcrx.311:AS";
	"1306:AS" -> "crcrx.329:AS";
	"1306:AS" -> "crcrx.335:AS";
	"1306:AS" -> "crcrx.325:AS";
	"1306:AS" -> "crcrx.321:AS";
	"1306:AS" -> "crcrx.309:AS";
	"1306:AS" -> "crcrx.313:AS";
	"1306:AS" -> "crcrx.316:AS";
	"1306:AS" -> "crcrx.319:AS";
	"1306:AS" -> "crcrx.330:AS";
	"1306:AS" -> "crcrx.336:AS";
	"1306:AS" -> "crcrx.322:AS";
	"1306:AS" -> "crcrx.315:AS";
	"1306:AS" -> "crcrx.310:AS";
	"1306:AS" -> "crcrx.314:AS";
	"1306:AS" -> "crcrx.320:AS";
	"1306:AS" -> "crcrx.333:AS";
	"1433:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb43061c950>",
		fillcolor=turquoise,
		label="1433:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1433:BL" -> "1434:IF"	 [cond="[]",
		lineno=None];
	"rxcounters1.Leaf_825:AL"	 [def_var="['IFGCounter']",
		label="rxcounters1.Leaf_825:AL"];
	"rxcounters1.832:NS" -> "rxcounters1.Leaf_825:AL"	 [cond="[]",
		lineno=None];
	"rxcounters1.835:NS" -> "rxcounters1.Leaf_825:AL"	 [cond="[]",
		lineno=None];
	"1432:AL" -> "1433:BL"	 [cond="[]",
		lineno=None];
	"crcrx.349:NS" -> "crcrx.Leaf_341:AL"	 [cond="[]",
		lineno=None];
	"Leaf_1397:AL" -> "rxaddrcheck1.1070:AL";
	"crcrx.321:AS" -> "crcrx.341:AL";
	"crcrx.309:AS" -> "crcrx.341:AL";
	"rxaddrcheck1.Leaf_1070:AL" -> "rxaddrcheck1.1058:AL";
	"rxaddrcheck1.Leaf_1070:AL" -> "rxaddrcheck1.1037:AS";
	"1379:AL" -> "1380:BL"	 [cond="[]",
		lineno=None];
	"1302:AS" -> "crcrx.318:AS";
	"1302:AS" -> "crcrx.331:AS";
	"1302:AS" -> "crcrx.308:AS";
	"1302:AS" -> "crcrx.317:AS";
	"1302:AS" -> "crcrx.307:AS";
	"1302:AS" -> "crcrx.332:AS";
	"1302:AS" -> "crcrx.334:AS";
	"1302:AS" -> "crcrx.312:AS";
	"1302:AS" -> "crcrx.324:AS";
	"1302:AS" -> "crcrx.326:AS";
	"1302:AS" -> "crcrx.323:AS";
	"1302:AS" -> "crcrx.311:AS";
	"1302:AS" -> "crcrx.329:AS";
	"1302:AS" -> "crcrx.335:AS";
	"1302:AS" -> "crcrx.325:AS";
	"1302:AS" -> "crcrx.321:AS";
	"1302:AS" -> "crcrx.309:AS";
	"1302:AS" -> "crcrx.313:AS";
	"1302:AS" -> "crcrx.316:AS";
	"1302:AS" -> "crcrx.319:AS";
	"1302:AS" -> "crcrx.330:AS";
	"1302:AS" -> "crcrx.336:AS";
	"1302:AS" -> "crcrx.322:AS";
	"1302:AS" -> "crcrx.315:AS";
	"1302:AS" -> "crcrx.310:AS";
	"1302:AS" -> "crcrx.314:AS";
	"1302:AS" -> "crcrx.320:AS";
	"1302:AS" -> "crcrx.333:AS";
	"rxaddrcheck1.1094:IF" -> "rxaddrcheck1.1095:NS"	 [cond="['RxCheckEn', 'ByteCntEq4']",
		label="(RxCheckEn & ByteCntEq4)",
		lineno=1094];
	"rxaddrcheck1.1094:IF" -> "rxaddrcheck1.1097:IF"	 [cond="['RxCheckEn', 'ByteCntEq4']",
		label="!((RxCheckEn & ByteCntEq4))",
		lineno=1094];
	"rxaddrcheck1.1065:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f094690>",
		fillcolor=firebrick,
		label="rxaddrcheck1.1065:NS
AddressMiss <= ~(UnicastOK | BroadcastOK | MulticastOK | PassAll & ControlFrmAddressOK);",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f094690>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxaddrcheck1.1065:NS" -> "rxaddrcheck1.Leaf_1058:AL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1115:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fb40eb9f690>",
		fillcolor=lightcyan,
		label="rxaddrcheck1.1115:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"rxaddrcheck1.1115:CA" -> "rxaddrcheck1.1115:BS"	 [cond="[]",
		lineno=None];
	"rxcounters1.Leaf_844:AL" -> "1428:AS";
	"rxcounters1.Leaf_844:AL" -> "rxcounters1.844:AL";
	"rxcounters1.Leaf_844:AL" -> "1303:AS";
	"rxcounters1.Leaf_844:AL" -> "rxcounters1.784:AS";
	"rxcounters1.Leaf_844:AL" -> "1411:AS";
	"rxcounters1.Leaf_825:AL" -> "rxcounters1.841:AS";
	"rxcounters1.Leaf_825:AL" -> "rxcounters1.825:AL";
	"rxstatem1.581:NS" -> "rxstatem1.Leaf_543:AL"	 [cond="[]",
		lineno=None];
	"crcrx.313:AS" -> "crcrx.341:AL";
	"crcrx.347:NS" -> "crcrx.Leaf_341:AL"	 [cond="[]",
		lineno=None];
	"1386:NS" -> "Leaf_1379:AL"	 [cond="[]",
		lineno=None];
	"Leaf_1432:AL" -> "1432:AL";
	"crcrx.316:AS" -> "crcrx.341:AL";
	"rxaddrcheck1.1048:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f09b650>",
		fillcolor=springgreen,
		label="rxaddrcheck1.1048:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxaddrcheck1.1048:IF" -> "rxaddrcheck1.1049:NS"	 [cond="['Reset']",
		label=Reset,
		lineno=1048];
	"rxaddrcheck1.1048:IF" -> "rxaddrcheck1.1050:IF"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=1048];
	"crcrx.319:AS" -> "crcrx.341:AL";
	"1307:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb4305fc5d0>",
		def_var="['Data_Crc']",
		fillcolor=deepskyblue,
		label="1307:AS
Data_Crc[1] = MRxD[2];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['MRxD']"];
	"1307:AS" -> "crcrx.318:AS";
	"1307:AS" -> "crcrx.331:AS";
	"1307:AS" -> "crcrx.308:AS";
	"1307:AS" -> "crcrx.317:AS";
	"1307:AS" -> "crcrx.307:AS";
	"1307:AS" -> "crcrx.332:AS";
	"1307:AS" -> "crcrx.334:AS";
	"1307:AS" -> "crcrx.312:AS";
	"1307:AS" -> "crcrx.324:AS";
	"1307:AS" -> "crcrx.326:AS";
	"1307:AS" -> "crcrx.323:AS";
	"1307:AS" -> "crcrx.311:AS";
	"1307:AS" -> "crcrx.329:AS";
	"1307:AS" -> "crcrx.335:AS";
	"1307:AS" -> "crcrx.325:AS";
	"1307:AS" -> "crcrx.321:AS";
	"1307:AS" -> "crcrx.309:AS";
	"1307:AS" -> "crcrx.313:AS";
	"1307:AS" -> "crcrx.316:AS";
	"1307:AS" -> "crcrx.319:AS";
	"1307:AS" -> "crcrx.330:AS";
	"1307:AS" -> "crcrx.336:AS";
	"1307:AS" -> "crcrx.322:AS";
	"1307:AS" -> "crcrx.315:AS";
	"1307:AS" -> "crcrx.310:AS";
	"1307:AS" -> "crcrx.314:AS";
	"1307:AS" -> "crcrx.320:AS";
	"1307:AS" -> "crcrx.333:AS";
	"1384:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb43060cf10>",
		fillcolor=turquoise,
		label="1384:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1384:BL" -> "1385:IF"	 [cond="[]",
		lineno=None];
	"1350:BL" -> "1351:IF"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1118:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fb40eb9fed0>",
		fillcolor=lightcyan,
		label="rxaddrcheck1.1118:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"rxaddrcheck1.1118:CA" -> "rxaddrcheck1.1118:BS"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1098:NS" -> "rxaddrcheck1.Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"rxcounters1.826:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40f09d110>",
		fillcolor=turquoise,
		label="rxcounters1.826:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"rxcounters1.825:AL" -> "rxcounters1.826:BL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1088:IF" -> "rxaddrcheck1.1091:IF"	 [cond="['RxCheckEn', 'ByteCntEq2']",
		label="!((RxCheckEn & ByteCntEq2))",
		lineno=1088];
	"rxaddrcheck1.1088:IF" -> "rxaddrcheck1.1089:NS"	 [cond="['RxCheckEn', 'ByteCntEq2']",
		label="(RxCheckEn & ByteCntEq2)",
		lineno=1088];
	"rxcounters1.811:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f0a7790>",
		def_var="['ByteCntEq4']",
		fillcolor=deepskyblue,
		label="rxcounters1.811:AS
ByteCntEq4 = ByteCnt == 16'd4;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ByteCnt']"];
	"rxcounters1.811:AS" -> "rxaddrcheck1.1083:AL";
	"rxcounters1.857:NS" -> "rxcounters1.Leaf_844:AL"	 [cond="[]",
		lineno=None];
	"crcrx.330:AS" -> "crcrx.341:AL";
	"checkSumcalc.1510:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb43062fe90>",
		fillcolor=turquoise,
		label="checkSumcalc.1510:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"checkSumcalc.1509:AL" -> "checkSumcalc.1510:BL"	 [cond="[]",
		lineno=None];
	"crcrx.336:AS" -> "crcrx.341:AL";
	"1339:AL" -> "1340:BL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1122:AS" -> "rxaddrcheck1.1070:AL";
	"1416:BL" -> "Leaf_1413:AL"	 [cond="[]",
		lineno=None];
	"rxcounters1.818:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f087550>",
		def_var="['ByteCntMaxFrame']",
		fillcolor=deepskyblue,
		label="rxcounters1.818:AS
ByteCntMaxFrame = (ByteCnt == MaxFL[15:0]) & ~HugEn;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ByteCnt', 'MaxFL', 'HugEn']"];
	"rxcounters1.818:AS" -> "rxcounters1.782:AS";
	"rxcounters1.818:AS" -> "1302:AS";
	"rxcounters1.818:AS" -> "1447:AS";
	"rxaddrcheck1.1077:NS" -> "rxaddrcheck1.Leaf_1070:AL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1084:BL" -> "rxaddrcheck1.1085:IF"	 [cond="[]",
		lineno=None];
	"rxcounters1.792:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f0b43d0>",
		fillcolor=springgreen,
		label="rxcounters1.792:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxcounters1.792:IF" -> "rxcounters1.793:NS"	 [cond="['Reset']",
		label=Reset,
		lineno=792];
	"rxcounters1.792:IF" -> "rxcounters1.795:BL"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=792];
	"checkSumcalc.Leaf_1543:AL" -> "checkSumcalc.1543:AL";
	"checkSumcalc.Leaf_1543:AL" -> "checkSumcalc.1509:AL";
	"crcrx.322:AS" -> "crcrx.341:AL";
	"rxaddrcheck1.1112:AL" -> "rxaddrcheck1.1113:BL"	 [cond="[]",
		lineno=None];
	"checkSumcalc.Leaf_1505:AL" -> "checkSumcalc.1505:AL";
	"rxaddrcheck1.1117:BS" -> "rxaddrcheck1.Leaf_1112:AL"	 [cond="[]",
		lineno=None];
	"rxcounters1.800:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f0b4c10>",
		fillcolor=firebrick,
		label="rxcounters1.800:NS
ByteCnt[15:0] <= ByteCnt[15:0] + 16'd1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fb40f0b4c10>]",
		style=filled,
		typ=NonblockingSubstitution];
	"rxcounters1.800:NS" -> "rxcounters1.Leaf_790:AL"	 [cond="[]",
		lineno=None];
	"rxcounters1.807:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f0a7090>",
		def_var="['ByteCntEq0']",
		fillcolor=deepskyblue,
		label="rxcounters1.807:AS
ByteCntEq0 = ByteCnt == 16'd0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ByteCnt']"];
	"rxcounters1.807:AS" -> "1411:AS";
	"1381:IF" -> "1382:NS"	 [cond="['Reset']",
		label=Reset,
		lineno=1381];
	"1381:IF" -> "1384:BL"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=1381];
	"1454:IF" -> "1455:BL"	 [cond="['Reset']",
		label=Reset,
		lineno=1454];
	"1454:IF" -> "1460:BL"	 [cond="['Reset']",
		label="!(Reset)",
		lineno=1454];
	"rxstatem1.544:BL" -> "rxstatem1.545:IF"	 [cond="[]",
		lineno=None];
	"crcrx.315:AS" -> "crcrx.341:AL";
	"checkSumcalc.1512:BL" -> "checkSumcalc.Leaf_1509:AL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1075:NS" -> "rxaddrcheck1.Leaf_1070:AL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1110:AS" -> "rxaddrcheck1.1112:AL";
	"rxcounters1.854:NS" -> "rxcounters1.Leaf_844:AL"	 [cond="[]",
		lineno=None];
	"rxstatem1.560:NS" -> "rxstatem1.Leaf_543:AL"	 [cond="[]",
		lineno=None];
	"rxcounters1.805:AS" -> "checkSumcalc.1494:AL";
	"rxcounters1.805:AS" -> "checkSumcalc.1509:AL";
	"1403:IF" -> "1405:IF"	 [cond="['StateData', 'ByteCntEq1', 'LatchedByte']",
		label="!((StateData[0] & ByteCntEq1 & LatchedByte[0]))",
		lineno=1403];
	"1403:IF" -> "1404:NS"	 [cond="['StateData', 'ByteCntEq1', 'LatchedByte']",
		label="(StateData[0] & ByteCntEq1 & LatchedByte[0])",
		lineno=1403];
	"rxaddrcheck1.1092:NS" -> "rxaddrcheck1.Leaf_1083:AL"	 [cond="[]",
		lineno=None];
	"checkSumcalc.1498:BL" -> "checkSumcalc.Leaf_1494:AL"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1047:BL" -> "rxaddrcheck1.1048:IF"	 [cond="[]",
		lineno=None];
	"rxcounters1.799:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f0b4a50>",
		fillcolor=springgreen,
		label="rxcounters1.799:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxcounters1.799:IF" -> "rxcounters1.800:NS"	 [cond="['IncrementByteCounter']",
		label=IncrementByteCounter,
		lineno=799];
	"rxcounters1.810:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb40f0a75d0>",
		def_var="['ByteCntEq3']",
		fillcolor=deepskyblue,
		label="rxcounters1.810:AS
ByteCntEq3 = ByteCnt == 16'd3;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ByteCnt']"];
	"rxcounters1.810:AS" -> "rxaddrcheck1.1083:AL";
	"rxcounters1.826:BL" -> "rxcounters1.827:IF"	 [cond="[]",
		lineno=None];
	"crcrx.310:AS" -> "crcrx.341:AL";
	"checkSumcalc.1510:BL" -> "checkSumcalc.1511:IF"	 [cond="[]",
		lineno=None];
	"checkSumcalc.1510:BL" -> "checkSumcalc.1535:IF"	 [cond="[]",
		lineno=None];
	"1449:AS" -> "1452:AL";
	"checkSumcalc.1521:BL" -> "checkSumcalc.Leaf_1509:AL"	 [cond="[]",
		lineno=None];
	"rxcounters1.796:IF" -> "rxcounters1.797:NS"	 [cond="['ResetByteCounter']",
		label=ResetByteCounter,
		lineno=796];
	"rxcounters1.796:IF" -> "rxcounters1.799:IF"	 [cond="['ResetByteCounter']",
		label="!(ResetByteCounter)",
		lineno=796];
	"rxcounters1.828:NS" -> "rxcounters1.Leaf_825:AL"	 [cond="[]",
		lineno=None];
	"crcrx.314:AS" -> "crcrx.341:AL";
	"1447:AS" -> "1452:AL";
	"rxcounters1.849:BL" -> "rxcounters1.850:IF"	 [cond="[]",
		lineno=None];
	"rxstatem1.571:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f3262d0>",
		fillcolor=springgreen,
		label="rxstatem1.571:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxstatem1.571:IF" -> "rxstatem1.572:NS"	 [cond="['StartPreamble']",
		label=StartPreamble,
		lineno=571];
	"rxaddrcheck1.1062:IF" -> "rxaddrcheck1.1063:NS"	 [cond="['ByteCntEq0']",
		label=ByteCntEq0,
		lineno=1062];
	"rxaddrcheck1.1064:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7fb40f0942d0>",
		fillcolor=springgreen,
		label="rxaddrcheck1.1064:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"rxaddrcheck1.1062:IF" -> "rxaddrcheck1.1064:IF"	 [cond="['ByteCntEq0']",
		label="!(ByteCntEq0)",
		lineno=1062];
	"1341:IF" -> "1344:IF"	 [cond="['Reset', 'StateIdle']",
		label="!((Reset | StateIdle))",
		lineno=1341];
	"1341:IF" -> "1342:NS"	 [cond="['Reset', 'StateIdle']",
		label="(Reset | StateIdle)",
		lineno=1341];
	"rxstatem1.531:AS" -> "rxstatem1.543:AL";
	"rxcounters1.791:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7fb40f0b4190>",
		fillcolor=turquoise,
		label="rxcounters1.791:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"rxcounters1.790:AL" -> "rxcounters1.791:BL"	 [cond="[]",
		lineno=None];
	"rxstatem1.563:NS" -> "rxstatem1.Leaf_543:AL"	 [cond="[]",
		lineno=None];
	"rxstatem1.556:IF" -> "rxstatem1.557:NS"	 [cond="['StartPreamble', 'StartSFD', 'StartDrop']",
		label="(StartPreamble | StartSFD | StartDrop)",
		lineno=556];
	"rxstatem1.556:IF" -> "rxstatem1.559:IF"	 [cond="['StartPreamble', 'StartSFD', 'StartDrop']",
		label="!((StartPreamble | StartSFD | StartDrop))",
		lineno=556];
	"rxaddrcheck1.1114:CS" -> "rxaddrcheck1.1116:CA"	 [cond="['CrcHash']",
		label="CrcHash[4:3]",
		lineno=1114];
	"rxaddrcheck1.1114:CS" -> "rxaddrcheck1.1117:CA"	 [cond="['CrcHash']",
		label="CrcHash[4:3]",
		lineno=1114];
	"rxaddrcheck1.1114:CS" -> "rxaddrcheck1.1115:CA"	 [cond="['CrcHash']",
		label="CrcHash[4:3]",
		lineno=1114];
	"rxaddrcheck1.1114:CS" -> "rxaddrcheck1.1118:CA"	 [cond="['CrcHash']",
		label="CrcHash[4:3]",
		lineno=1114];
	"1309:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7fb4305fca50>",
		def_var="['Data_Crc']",
		fillcolor=deepskyblue,
		label="1309:AS
Data_Crc[3] = MRxD[0];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['MRxD']"];
	"1309:AS" -> "crcrx.318:AS";
	"1309:AS" -> "crcrx.331:AS";
	"1309:AS" -> "crcrx.308:AS";
	"1309:AS" -> "crcrx.317:AS";
	"1309:AS" -> "crcrx.307:AS";
	"1309:AS" -> "crcrx.332:AS";
	"1309:AS" -> "crcrx.334:AS";
	"1309:AS" -> "crcrx.312:AS";
	"1309:AS" -> "crcrx.324:AS";
	"1309:AS" -> "crcrx.326:AS";
	"1309:AS" -> "crcrx.323:AS";
	"1309:AS" -> "crcrx.311:AS";
	"1309:AS" -> "crcrx.329:AS";
	"1309:AS" -> "crcrx.335:AS";
	"1309:AS" -> "crcrx.325:AS";
	"1309:AS" -> "crcrx.321:AS";
	"1309:AS" -> "crcrx.309:AS";
	"1309:AS" -> "crcrx.313:AS";
	"1309:AS" -> "crcrx.316:AS";
	"1309:AS" -> "crcrx.319:AS";
	"1309:AS" -> "crcrx.330:AS";
	"1309:AS" -> "crcrx.336:AS";
	"1309:AS" -> "crcrx.322:AS";
	"1309:AS" -> "crcrx.315:AS";
	"1309:AS" -> "crcrx.310:AS";
	"1309:AS" -> "crcrx.314:AS";
	"1309:AS" -> "crcrx.320:AS";
	"1309:AS" -> "crcrx.333:AS";
	"rxcounters1.791:BL" -> "rxcounters1.792:IF"	 [cond="[]",
		lineno=None];
	"rxaddrcheck1.1064:IF" -> "rxaddrcheck1.1065:NS"	 [cond="['ByteCntEq7', 'RxCheckEn']",
		label="(ByteCntEq7 & RxCheckEn)",
		lineno=1064];
	"crcrx.320:AS" -> "crcrx.341:AL";
	"1371:NS" -> "Leaf_1349:AL"	 [cond="[]",
		lineno=None];
	"crcrx.333:AS" -> "crcrx.341:AL";
	"rxstatem1.568:IF" -> "rxstatem1.569:NS"	 [cond="['StartSFD', 'StartIdle', 'StartDrop']",
		label="(StartSFD | StartIdle | StartDrop)",
		lineno=568];
	"rxstatem1.568:IF" -> "rxstatem1.571:IF"	 [cond="['StartSFD', 'StartIdle', 'StartDrop']",
		label="!((StartSFD | StartIdle | StartDrop))",
		lineno=568];
	"crcrx.344:NS" -> "crcrx.Leaf_341:AL"	 [cond="[]",
		lineno=None];
	"rxcounters1.Leaf_790:AL" -> "rxcounters1.817:AS";
	"rxcounters1.Leaf_790:AL" -> "rxcounters1.808:AS";
	"rxcounters1.Leaf_790:AL" -> "rxcounters1.814:AS";
	"rxcounters1.Leaf_790:AL" -> "rxcounters1.809:AS";
	"rxcounters1.Leaf_790:AL" -> "rxcounters1.813:AS";
	"rxcounters1.Leaf_790:AL" -> "rxcounters1.816:AS";
	"rxcounters1.Leaf_790:AL" -> "rxcounters1.815:AS";
	"rxcounters1.Leaf_790:AL" -> "rxcounters1.812:AS";
	"rxcounters1.Leaf_790:AL" -> "rxcounters1.804:AS";
	"rxcounters1.Leaf_790:AL" -> "rxcounters1.811:AS";
	"rxcounters1.Leaf_790:AL" -> "rxcounters1.818:AS";
	"rxcounters1.Leaf_790:AL" -> "rxcounters1.807:AS";
	"rxcounters1.Leaf_790:AL" -> "rxcounters1.805:AS";
	"rxcounters1.Leaf_790:AL" -> "rxcounters1.810:AS";
	"rxcounters1.Leaf_790:AL" -> "rxcounters1.790:AL";
	"rxstatem1.539:AS" -> "rxstatem1.543:AL";
	"checkSumcalc.1536:BL" -> "checkSumcalc.Leaf_1509:AL"	 [cond="[]",
		lineno=None];
	"rxstatem1.565:IF" -> "rxstatem1.566:NS"	 [cond="['StartDrop']",
		label=StartDrop,
		lineno=565];
}
