strict digraph "compose( ,  )" {
	node [label="\N"];
	"62:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7f44c72fb790>",
		fillcolor=linen,
		label="62:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"63:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f44c75f7a10>",
		fillcolor=lightcyan,
		label="63:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"62:CS" -> "63:CA"	 [cond="['sel0']",
		label=sel0,
		lineno=62];
	"70:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f44c72fb390>",
		fillcolor=lightcyan,
		label="70:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"62:CS" -> "70:CA"	 [cond="['sel0']",
		label=sel0,
		lineno=62];
	"77:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f44c72fb8d0>",
		fillcolor=lightcyan,
		label="77:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"62:CS" -> "77:CA"	 [cond="['sel0']",
		label=sel0,
		lineno=62];
	"75:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44c72fb910>",
		fillcolor=cadetblue,
		label="75:BS
data_hi = data_a;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44c72fb910>]",
		style=filled,
		typ=BlockingSubstitution];
	"Leaf_60:AL"	 [def_var="['data_hi', 'data_lo']",
		label="Leaf_60:AL"];
	"75:BS" -> "Leaf_60:AL"	 [cond="[]",
		lineno=None];
	"68:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44c72fb350>",
		fillcolor=cadetblue,
		label="68:BS
data_hi = data_b;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44c72fb350>]",
		style=filled,
		typ=BlockingSubstitution];
	"68:BS" -> "Leaf_60:AL"	 [cond="[]",
		lineno=None];
	"54:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44c7317e90>",
		fillcolor=turquoise,
		label="54:BL
sel0 = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44c7317ad0>]",
		style=filled,
		typ=Block];
	"Leaf_50:AL"	 [def_var="['sel0']",
		label="Leaf_50:AL"];
	"54:BL" -> "Leaf_50:AL"	 [cond="[]",
		lineno=None];
	"67:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44c72fb210>",
		fillcolor=springgreen,
		label="67:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"67:IF" -> "68:BS"	 [cond="['HI_MUX']",
		label="(HI_MUX == 1)",
		lineno=67];
	"52:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44c7317dd0>",
		fillcolor=turquoise,
		label="52:BL
sel0 = 1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44c73172d0>]",
		style=filled,
		typ=Block];
	"52:BL" -> "Leaf_50:AL"	 [cond="[]",
		lineno=None];
	"72:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44c72fb550>",
		fillcolor=springgreen,
		label="72:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"73:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44c72fb690>",
		fillcolor=cadetblue,
		label="73:BS
data_lo = data_b;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44c72fb690>]",
		style=filled,
		typ=BlockingSubstitution];
	"72:IF" -> "73:BS"	 [cond="['LOW_MUX']",
		label="(LOW_MUX == 1)",
		lineno=72];
	"50:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f44c75ebb10>",
		clk_sens=False,
		fillcolor=gold,
		label="50:AL",
		sens="[]",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['data_b', 'data_a']"];
	"51:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44c732f250>",
		fillcolor=turquoise,
		label="51:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"50:AL" -> "51:BL"	 [cond="[]",
		lineno=None];
	"66:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44c72fb0d0>",
		fillcolor=cadetblue,
		label="66:BS
data_lo = data_a;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44c72fb0d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"66:BS" -> "Leaf_60:AL"	 [cond="[]",
		lineno=None];
	"64:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44c75f79d0>",
		fillcolor=turquoise,
		label="64:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"64:BL" -> "67:IF"	 [cond="[]",
		lineno=None];
	"65:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44c75f7cd0>",
		fillcolor=springgreen,
		label="65:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"64:BL" -> "65:IF"	 [cond="[]",
		lineno=None];
	"73:BS" -> "Leaf_60:AL"	 [cond="[]",
		lineno=None];
	"78:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44c72fbbd0>",
		fillcolor=turquoise,
		label="78:BL
data_lo = { DATA_WIDTH{ 1'b0 } };
data_hi = { DATA_WIDTH{ 1'b0 } };",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44c72fbb50>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7f44c72fbd90>]",
		style=filled,
		typ=Block];
	"78:BL" -> "Leaf_60:AL"	 [cond="[]",
		lineno=None];
	"63:CA" -> "64:BL"	 [cond="[]",
		lineno=None];
	"52:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44c73412d0>",
		fillcolor=springgreen,
		label="52:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"52:IF" -> "54:BL"	 [cond="['data_a', 'data_b']",
		label="!((data_a < data_b))",
		lineno=52];
	"52:IF" -> "52:BL"	 [cond="['data_a', 'data_b']",
		label="(data_a < data_b)",
		lineno=52];
	"65:IF" -> "66:BS"	 [cond="['LOW_MUX']",
		label="(LOW_MUX == 1)",
		lineno=65];
	"71:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44c72fb710>",
		fillcolor=turquoise,
		label="71:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"70:CA" -> "71:BL"	 [cond="[]",
		lineno=None];
	"60:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f44c73170d0>",
		clk_sens=False,
		fillcolor=gold,
		label="60:AL",
		sens="['data_b', 'data_a']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['data_b', 'data_a', 'sel0', 'LOW_MUX', 'HI_MUX']"];
	"61:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f44c7664a90>",
		fillcolor=turquoise,
		label="61:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"60:AL" -> "61:BL"	 [cond="[]",
		lineno=None];
	"61:BL" -> "62:CS"	 [cond="[]",
		lineno=None];
	"77:CA" -> "78:BL"	 [cond="[]",
		lineno=None];
	"Leaf_50:AL" -> "60:AL";
	"74:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f44c72fb7d0>",
		fillcolor=springgreen,
		label="74:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"74:IF" -> "75:BS"	 [cond="['HI_MUX']",
		label="(HI_MUX == 1)",
		lineno=74];
	"71:BL" -> "72:IF"	 [cond="[]",
		lineno=None];
	"71:BL" -> "74:IF"	 [cond="[]",
		lineno=None];
	"51:BL" -> "52:IF"	 [cond="[]",
		lineno=None];
}
