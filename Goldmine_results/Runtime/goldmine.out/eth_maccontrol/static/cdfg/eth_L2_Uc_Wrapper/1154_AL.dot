strict digraph "" {
	node [label="\N"];
	"1173:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f37fb69a650>",
		fillcolor=lightcyan,
		label="1173:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1173:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f37fb69aa50>",
		fillcolor=turquoise,
		label="1173:BL
TxData_wrapped_out[7:0] <= MAC[7:0];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f37fb69a5d0>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f37fb6775d0>]",
		style=filled,
		typ=Block];
	"1173:CA" -> "1173:BL"	 [cond="[]",
		lineno=None];
	"1170:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f37fb6776d0>",
		fillcolor=lightcyan,
		label="1170:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1170:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f37fb677710>",
		fillcolor=turquoise,
		label="1170:BL
TxData_wrapped_out[7:0] <= MAC[31:24];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f37fb677790>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f37fb677b10>]",
		style=filled,
		typ=Block];
	"1170:CA" -> "1170:BL"	 [cond="[]",
		lineno=None];
	"1158:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7f37fb677c50>",
		fillcolor=linen,
		label="1158:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"1158:CS" -> "1173:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1158];
	"1158:CS" -> "1170:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1158];
	"1171:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f37fb67cf90>",
		fillcolor=lightcyan,
		label="1171:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1158:CS" -> "1171:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1158];
	"1169:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f37fb67ca90>",
		fillcolor=lightcyan,
		label="1169:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1158:CS" -> "1169:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1158];
	"1167:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f37fb67c090>",
		fillcolor=lightcyan,
		label="1167:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1158:CS" -> "1167:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1158];
	"1166:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f37fb679b10>",
		fillcolor=lightcyan,
		label="1166:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1158:CS" -> "1166:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1158];
	"1172:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f37fb67f4d0>",
		fillcolor=lightcyan,
		label="1172:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1158:CS" -> "1172:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1158];
	"1163:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f37fb674e50>",
		fillcolor=lightcyan,
		label="1163:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1158:CS" -> "1163:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1158];
	"1165:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f37fb679650>",
		fillcolor=lightcyan,
		label="1165:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1158:CS" -> "1165:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1158];
	"1164:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f37fb679110>",
		fillcolor=lightcyan,
		label="1164:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1158:CS" -> "1164:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1158];
	"1162:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f37fb677d50>",
		fillcolor=lightcyan,
		label="1162:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1158:CS" -> "1162:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1158];
	"1168:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f37fb67c590>",
		fillcolor=lightcyan,
		label="1168:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1158:CS" -> "1168:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1158];
	"1174:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f37fb67f9d0>",
		fillcolor=lightcyan,
		label="1174:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1158:CS" -> "1174:CA"	 [cond="['ByteCnt']",
		label=ByteCnt,
		lineno=1158];
	"1163:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f37fb674d50>",
		fillcolor=turquoise,
		label="1163:BL
TxData_wrapped_out[7:0] <= DMAC[39:32];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f37fb674110>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f37fb674150>]",
		style=filled,
		typ=Block];
	"Leaf_1154:AL"	 [def_var="['read_fifo', 'TxData_wrapped_out', 'ByteCnt', 'PreNib15State', 'write_fifo']",
		label="Leaf_1154:AL"];
	"1163:BL" -> "Leaf_1154:AL"	 [cond="[]",
		lineno=None];
	"1165:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f37fb679690>",
		fillcolor=turquoise,
		label="1165:BL
TxData_wrapped_out[7:0] <= DMAC[23:16];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f37fb679710>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f37fb6799d0>]",
		style=filled,
		typ=Block];
	"1165:BL" -> "Leaf_1154:AL"	 [cond="[]",
		lineno=None];
	"1180:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f37fb6882d0>",
		fillcolor=turquoise,
		label="1180:BL
ByteCnt <= 0;
read_fifo <= 0;
TxData_wrapped_out <= 8'h0;
PreNib15State <= 9'h0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f37fb67fd10>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f37fb67fe50>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f37fb67ff90>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7f37fb688150>]",
		style=filled,
		typ=Block];
	"1180:BL" -> "Leaf_1154:AL"	 [cond="[]",
		lineno=None];
	"1171:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f37fb67f050>",
		fillcolor=turquoise,
		label="1171:BL
TxData_wrapped_out[7:0] <= MAC[23:16];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f37fb67f090>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f37fb67f390>]",
		style=filled,
		typ=Block];
	"1171:CA" -> "1171:BL"	 [cond="[]",
		lineno=None];
	"1156:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f37fb688310>",
		fillcolor=springgreen,
		label="1156:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1156:IF" -> "1180:BL"	 [cond="['StateCount', 'StateLeftinQ', 'TxStartFrmIn']",
		label="!((StateCount | StateLeftinQ | TxStartFrmIn))",
		lineno=1156];
	"1157:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f37fb6883d0>",
		fillcolor=turquoise,
		label="1157:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1156:IF" -> "1157:BL"	 [cond="['StateCount', 'StateLeftinQ', 'TxStartFrmIn']",
		label="(StateCount | StateLeftinQ | TxStartFrmIn)",
		lineno=1156];
	"1169:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f37fb67cb10>",
		fillcolor=turquoise,
		label="1169:BL
TxData_wrapped_out[7:0] <= MAC[39:32];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f37fb67cb50>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f37fb67ce50>]",
		style=filled,
		typ=Block];
	"1169:CA" -> "1169:BL"	 [cond="[]",
		lineno=None];
	"1168:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f37fb67c610>",
		fillcolor=turquoise,
		label="1168:BL
TxData_wrapped_out[7:0] <= MAC[47:40];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f37fb67c650>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f37fb67c950>]",
		style=filled,
		typ=Block];
	"1168:BL" -> "Leaf_1154:AL"	 [cond="[]",
		lineno=None];
	"1162:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f37fb677d90>",
		fillcolor=turquoise,
		label="1162:BL
TxData_wrapped_out[7:0] <= DMAC[47:40];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f37fb677e10>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f37fb674d90>]",
		style=filled,
		typ=Block];
	"1162:BL" -> "Leaf_1154:AL"	 [cond="[]",
		lineno=None];
	"1167:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f37fb67c110>",
		fillcolor=turquoise,
		label="1167:BL
TxData_wrapped_out[7:0] <= DMAC[7:0];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f37fb67c150>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f37fb67c450>]",
		style=filled,
		typ=Block];
	"1167:CA" -> "1167:BL"	 [cond="[]",
		lineno=None];
	"1174:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f37fb67fa10>",
		fillcolor=turquoise,
		label="1174:BL
read_fifo <= 1;
TxData_wrapped_out <= TxData_wrapped_out_wire;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f37fb67fa50>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f37fb67fb10>]",
		style=filled,
		typ=Block];
	"1174:BL" -> "Leaf_1154:AL"	 [cond="[]",
		lineno=None];
	"1166:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f37fb679bd0>",
		fillcolor=turquoise,
		label="1166:BL
TxData_wrapped_out[7:0] <= DMAC[15:8];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f37fb679c50>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f37fb679f10>]",
		style=filled,
		typ=Block];
	"1166:CA" -> "1166:BL"	 [cond="[]",
		lineno=None];
	"1172:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f37fb67f550>",
		fillcolor=turquoise,
		label="1172:BL
TxData_wrapped_out[7:0] <= MAC[15:8];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f37fb67f590>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f37fb67f890>]",
		style=filled,
		typ=Block];
	"1172:CA" -> "1172:BL"	 [cond="[]",
		lineno=None];
	"1155:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f37fb688650>",
		fillcolor=turquoise,
		label="1155:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1155:BL" -> "1156:IF"	 [cond="[]",
		lineno=None];
	"1191:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f37fb6889d0>",
		fillcolor=springgreen,
		label="1191:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1155:BL" -> "1191:IF"	 [cond="[]",
		lineno=None];
	"1187:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f37fb688690>",
		fillcolor=springgreen,
		label="1187:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1155:BL" -> "1187:IF"	 [cond="[]",
		lineno=None];
	"1163:CA" -> "1163:BL"	 [cond="[]",
		lineno=None];
	"1154:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f37fb691110>",
		clk_sens=False,
		fillcolor=gold,
		label="1154:AL",
		sens="['Divided_2_clk']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['DMAC', 'StateLeftinQ', 'StateCount', 'TxStartFrmIn', 'TxData_wrapped_out_wire', 'PreNib15State', 'MAC', 'ByteCnt']"];
	"1154:AL" -> "1155:BL"	 [cond="[]",
		lineno=None];
	"1173:BL" -> "Leaf_1154:AL"	 [cond="[]",
		lineno=None];
	"1165:CA" -> "1165:BL"	 [cond="[]",
		lineno=None];
	"1196:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f37fb688a10>",
		fillcolor=turquoise,
		label="1196:BL
write_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f37fb688a50>]",
		style=filled,
		typ=Block];
	"1191:IF" -> "1196:BL"	 [cond="['StateCount', 'PreNib15State']",
		label="!((StateCount & (PreNib15State >= 8)))",
		lineno=1191];
	"1192:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f37fb688bd0>",
		fillcolor=turquoise,
		label="1192:BL
ByteCnt = ByteCnt + 1;
write_fifo <= 1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f37fb688c10>, <pyverilog.vparser.ast.NonblockingSubstitution object at \
0x7f37fb688e10>]",
		style=filled,
		typ=Block];
	"1191:IF" -> "1192:BL"	 [cond="['StateCount', 'PreNib15State']",
		label="(StateCount & (PreNib15State >= 8))",
		lineno=1191];
	"1170:BL" -> "Leaf_1154:AL"	 [cond="[]",
		lineno=None];
	"1157:BL" -> "1158:CS"	 [cond="[]",
		lineno=None];
	"1164:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f37fb679190>",
		fillcolor=turquoise,
		label="1164:BL
TxData_wrapped_out[7:0] <= DMAC[31:24];
read_fifo <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f37fb679210>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f37fb679510>]",
		style=filled,
		typ=Block];
	"1164:CA" -> "1164:BL"	 [cond="[]",
		lineno=None];
	"1162:CA" -> "1162:BL"	 [cond="[]",
		lineno=None];
	"1166:BL" -> "Leaf_1154:AL"	 [cond="[]",
		lineno=None];
	"1167:BL" -> "Leaf_1154:AL"	 [cond="[]",
		lineno=None];
	"1169:BL" -> "Leaf_1154:AL"	 [cond="[]",
		lineno=None];
	"1168:CA" -> "1168:BL"	 [cond="[]",
		lineno=None];
	"1164:BL" -> "Leaf_1154:AL"	 [cond="[]",
		lineno=None];
	"1174:CA" -> "1174:BL"	 [cond="[]",
		lineno=None];
	"1196:BL" -> "Leaf_1154:AL"	 [cond="[]",
		lineno=None];
	"1172:BL" -> "Leaf_1154:AL"	 [cond="[]",
		lineno=None];
	"1192:BL" -> "Leaf_1154:AL"	 [cond="[]",
		lineno=None];
	"1171:BL" -> "Leaf_1154:AL"	 [cond="[]",
		lineno=None];
	"1188:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f37fb6886d0>",
		fillcolor=turquoise,
		label="1188:BL
PreNib15State <= PreNib15State + 1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f37fb688710>]",
		style=filled,
		typ=Block];
	"1187:IF" -> "1188:BL"	 [cond="['StateCount']",
		label=StateCount,
		lineno=1187];
	"1188:BL" -> "Leaf_1154:AL"	 [cond="[]",
		lineno=None];
}
