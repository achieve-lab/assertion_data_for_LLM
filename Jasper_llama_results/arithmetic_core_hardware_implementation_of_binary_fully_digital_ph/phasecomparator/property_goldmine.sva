module i_phasecomparator(
input MainClock,                    // System Clock
input InputSignalEdge ,
input Lead, Lag,                   // inputs "Lead", "Lag" are inputistered
input [1:0] InputSignalEdgeDet,       // detector of the rising edge
input InputSignal, OutputSignal
);


property a1;
@(posedge MainClock) (InputSignalEdge == 0) |=> (Lag == 0);
endproperty
assert_a1: assert property(a1);

property a2;
@(posedge MainClock) (InputSignalEdge == 1 & OutputSignal == 0) |=> (Lag == 1);
endproperty
assert_a2: assert property(a2);

property a0;
@(posedge MainClock) (OutputSignal == 1) |=> (Lag == 0);
endproperty
assert_a0: assert property(a0);


property a5;
@(posedge MainClock) (InputSignalEdge == 0) |=> (Lead == 0);
endproperty
assert_a5: assert property(a5);

property a6;
@(posedge MainClock) (InputSignalEdge == 1 & OutputSignal == 1) |=> (Lead == 1);
endproperty
assert_a6: assert property(a6);

property a4;
@(posedge MainClock) (OutputSignal == 0) |=> (Lead == 0);
endproperty
assert_a4: assert property(a4);

endmodule
