`include "defines.v"

module i_accumulatorMUX(
	input [`accMuxSelLen-1:0]	accMuxSel,
	input [7:0] uartDataIn, uartStatIn,
	input [7:0]	accMuxOut,
	input [`immDataLen-1:0]		immData,
	input [7:0] tcLoadIn, tcAccIn,
	input DEFAULT_CLOCK,
	input DEFAULT_RESET,
	input	[7:0]	aluOut
);

assert property(@(posedge clk) (accMuxSel == `accMuxSelImmData) |-> (accMuxOut == immData));
assert property(@(posedge clk) (accMuxSel == `accMuxSelAluOut) |-> (accMuxOut == aluOut));
`ifdef timerAndCounter_peripheral
assert property(@(posedge clk) (accMuxSel == `accMuxSelTcLoad) |-> (accMuxOut == tcLoadIn));
assert property(@(posedge clk) (accMuxSel == `accMuxSelTcAcc) |-> (accMuxOut == tcAccIn));
`endif
`ifdef UART_peripheral
assert property(@(posedge clk) (accMuxSel == `accMuxSelUartData) |-> (accMuxOut == uartDataIn));
assert property(@(posedge clk) (accMuxSel == `accMuxSelUartStat) |-> (accMuxOut == uartStatIn));
`endif
endmodule