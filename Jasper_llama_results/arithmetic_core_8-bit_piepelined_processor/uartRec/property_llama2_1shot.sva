`include "defines.v"
module i_uartRec(
		input [7:0] bReg, bNext,		// data recieved in this..
		// recvd data input
		input [1:0] stateReg, stateNext,	// current and next states
		input rxDoneTick,
		input [3:0] sReg, sNext,		//	counter
		input clk, reset, sTick, rx,
		input [`dataBits-1:0] dOut,
		input [2:0] nReg,
		input [2:0] nNext		// counter
);

assert property(@(posedge clk) (stateReg == 2'b11) |-> (sNext == 4'd0));
assert property(@(posedge clk) (stateReg == 2'b01) |-> (nNext == 3'b0));
assert property(@(posedge clk) (stateReg == 2'b11) |-> (rxDoneTick == 1'b0));
assert property(@(posedge clk) (stateReg == 2'b01) |-> (dOut == 8'b0));
assert property(@(posedge clk) (stateReg == 2'b00 & rx == 1'b1) |-> (stateNext == 2'b00));
assert property(@(posedge clk) (stateReg == 2'b01) |-> (bNext == 8'b0));
assert property(@(posedge clk) (stateReg == 2'b10 & sTick == 1'b1 & sReg!= 4'd15) |-> (stateNext == 2'b10));
assert property(@(posedge clk) (stateReg == 2'b11 & sTick == 1'b1 & sReg!= 4'd15) |-> (stateNext == 2'b11));
assert property(@(posedge clk) (stateReg == 2'b01 & sTick == 1'b1 & sReg!= 4'd7) |-> (stateNext == 2'b01));
assert property(@(posedge clk) (stateReg == 2'b10) |-> (dOut == 8'b0));
assert property(@(posedge clk) (stateReg == 2'b01) |-> (rxDoneTick == 1'b0));
assert property(@(posedge clk) (stateReg == 2'b00) |-> (rxDoneTick == 1'b0));
assert property(@(posedge clk) (stateReg == 2'b11) |-> (nNext == 3'b0));
assert property(@(posedge clk) (stateReg == 2'b00) |-> (sNext == 4'd0));
assert property(@(posedge clk) (stateReg == 2'b00 & rx == 1'b0) |-> (stateNext == 2'b01));
assert property(@(posedge clk) (stateReg == 2'b10) |-> (nNext == 3'b0));
assert property(@(posedge clk) (stateReg == 2'b00) |-> (bNext == 8'b0));
assert property(@(posedge clk) (stateReg == 2'b00) |-> (nNext == 3'b0));
assert property(@(posedge clk) (stateReg == 2'b11 & sTick == 1'b1 & sReg == 4'd15) |-> (stateNext == 2'b00));
assert property(@(posedge clk) (stateReg == 2'b11) |-> (dOut == 8'b0));
assert property(@(posedge clk) (stateReg == 2'b01 & sTick == 1'b1 & sReg == 4'd7) |-> (stateNext == 2'b10));
assert property(@(posedge clk) (stateReg == 2'b10) |-> (sNext == 4'd0));
assert property(@(posedge clk) (stateReg == 2'b01) |-> (sNext == 4'd0));
assert property(@(posedge clk) (stateReg == 2'b10) |-> (rxDoneTick == 1'b0));
assert property(@(posedge clk) (stateReg == 2'b10) |-> (bNext == 8'b0));
assert property(@(posedge clk) (stateReg == 2'b11) |-> (bNext == 8'b0));
assert property(@(posedge clk) (stateReg == 2'b00) |-> (dOut == 8'b0));
assert property(@(posedge clk) (stateReg == 2'b10 & sTick == 1'b1 & sReg == 4'd15) |-> (stateNext == 2'b11));

endmodule