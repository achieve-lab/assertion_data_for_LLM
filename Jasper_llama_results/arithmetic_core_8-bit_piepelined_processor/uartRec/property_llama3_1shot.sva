`include "defines.v"
module i_uartRec(
		input [7:0] bReg, bNext,		// data recieved in this..
		// recvd data input
		input [1:0] stateReg, stateNext,	// current and next states
		input rxDoneTick,
		input [3:0] sReg, sNext,		//	counter
		input clk, reset, sTick, rx,
		input [`dataBits-1:0] dOut,
		input [2:0] nReg,
		input [2:0] nNext		// counter
);

assert property(@(posedge clk)  (stateReg == data) |-> (stateNext == stop));
assert property(@(posedge clk)  (stateReg == idle) |-> (stateNext == start));
assert property(@(posedge clk)  (stateReg == start) |-> (rxDoneTick == 1'b1));
assert property(@(posedge clk) (sReg == 15 & sTick == 1 & stateReg == data) |-> (bNext == {rx, bReg[7:1]}));
assert property(@(posedge clk) (sReg == 15 & sTick == 1 & stateReg == data) |-> (nNext == nReg + 1));
assert property(@(posedge clk)  (sReg == 15) |-> (bNext == {rx, bReg[7:1]}));
assert property(@(posedge clk) (sReg == 7 & sTick == 1 & stateReg == start) |-> (sNext == 0));
assert property(@(posedge clk)  (sReg == 15) |-> (nReg == (dataBits-1)));
assert property(@(posedge clk)  (stateReg == stop) |-> (stateNext == start));
assert property(@(posedge clk)  (stateReg == data) |-> (stateNext == idle));
assert property(@(posedge clk)  (sReg == 15) |-> (sNext == 0));
assert property(@(posedge clk)  (stateReg == data) |-> (stateNext == data));
assert property(@(posedge clk)  (sReg == (sbTick-1)) |-> (stateNext == idle));
assert property(@(posedge clk)  (stateReg == idle) |-> (rxDoneTick == 1'b1));
assert property(@(posedge clk)  (sReg == 15) |-> (stateNext == stop));
assert property(@(posedge clk) (sTick == 1 & stateReg == stop) |-> (sNext == sReg + 1));
assert property(@(posedge clk) (sReg == (sbTick-1) & sTick == 1 & stateReg == stop) |-> (rxDoneTick == 1'b1));
assert property(@(posedge clk)  (rx) |-> (stateNext == stop));
assert property(@(posedge clk)  (stateReg == data) |-> (stateNext == start));
assert property(@(posedge clk)  (stateReg == start) |-> (stateNext == stop));
assert property(@(posedge clk) (sReg == 7 & sTick == 1 & stateReg == start) |-> (stateNext == data));
assert property(@(posedge clk)  (sReg == 7) |-> (nNext == 0));
assert property(@(posedge clk)  (sTick) |-> (sNext == sReg + 1));
assert property(@(posedge clk) (sTick == 1 & stateReg == data) |-> (sNext == sReg + 1));
assert property(@(posedge clk)  (stateReg == idle) |-> (stateNext == idle));
assert property(@(posedge clk)  (stateReg == stop) |-> (stateNext == stop));
assert property(@(posedge clk)  (stateReg == stop) |-> (stateNext == idle));
assert property(@(posedge clk)  (stateReg == idle) |-> (sNext == sReg + 1));
assert property(@(posedge clk)  (stateReg == idle) |-> (stateNext == data));
assert property(@(posedge clk) (sReg == 7 & sTick == 1 & stateReg == start) |-> (nNext == 0));
assert property(@(posedge clk) (sTick == 1 & stateReg == stop) |-> (stateNext == stop));
assert property(@(posedge clk) (rx == 0 & stateReg == idle) |-> (stateNext == start));
assert property(@(posedge clk) (sTick == 1 & stateReg == start) |-> (sNext == sReg + 1));
assert property(@(posedge clk)  (stateReg == idle) |-> (stateNext == stop));
assert property(@(posedge clk)  (rx) |-> (sNext == sReg + 1));
assert property(@(posedge clk)  (rx) |-> (stateNext == idle));
assert property(@(posedge clk)  (sReg == (sbTick-1)) |-> (rxDoneTick == 1'b1));
assert property(@(posedge clk) (sTick == 1 & stateReg == data) |-> (stateNext == data));
assert property(@(posedge clk) (sReg == 15 & sTick == 1 & stateReg == data) |-> (stateNext == stop));
assert property(@(posedge clk)  (stateReg == stop) |-> (rxDoneTick == 1'b1));
assert property(@(posedge clk)  (sTick) |-> (stateNext == stop));
assert property(@(posedge clk)  (sTick) |-> (stateNext == idle));
assert property(@(posedge clk)  (rx == 1 & stateReg == idle) |-> (stateNext == idle));
assert property(@(posedge clk)  (sReg == 7) |-> (stateNext == data));
assert property(@(posedge clk)  (stateReg == stop) |-> (stateNext == data));
assert property(@(posedge clk)  (stateReg == start) |-> (stateNext == start));
assert property(@(posedge clk)  (stateReg == start) |-> (stateNext == idle));
assert property(@(posedge clk)  (stateReg == start) |-> (stateNext == data));
assert property(@(posedge clk)  (rx) |-> (stateNext == start));
assert property(@(posedge clk)  (stateReg == data) |-> (sNext == sReg + 1));
assert property(@(posedge clk) (sReg == (sbTick-1) & sTick == 1 & stateReg == stop) |-> (stateNext == idle));
assert property(@(posedge clk)  (stateReg == stop) |-> (sNext == sReg + 1));
assert property(@(posedge clk) (sTick == 1 & stateReg == start) |-> (stateNext == start));
assert property(@(posedge clk)  (sTick) |-> (stateNext == start));
assert property(@(posedge clk)  (stateReg == start) |-> (sNext == sReg + 1));
assert property(@(posedge clk)  (rx) |-> (stateNext == data));
assert property(@(posedge clk)  (stateReg == data) |-> (rxDoneTick == 1'b1));
assert property(@(posedge clk)  (sReg == 15) |-> (nNext == nReg + 1));
assert property(@(posedge clk)  (sTick) |-> (stateNext == data));
assert property(@(posedge clk) (sReg == 15 & sTick == 1 & stateReg == data) |-> (nReg == (dataBits-1)));
assert property(@(posedge clk)  (sTick) |-> (rxDoneTick == 1'b1));
assert property(@(posedge clk)  (rx) |-> (rxDoneTick == 1'b1));
assert property(@(posedge clk) (sReg == 15 & sTick == 1 & stateReg == data) |-> (sNext == 0));
assert property(@(posedge clk)  (sReg == 7) |-> (sNext == 0));

endmodule