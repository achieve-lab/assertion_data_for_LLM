`include "defines.v"
module i_uartTrans(
		// input bit-stream
		input [1:0] stateReg, stateNext,	// current and next states
		input [2:0] nReg, nNext,		// counter
		input tx, txDoneTick,
		input		 txReg, txNext,	// current bit being transferred
		input [3:0] sReg, sNext,		//	counter
		input clk, reset, sTick, txStart,
		input [7:0] bReg, bNext,		// perhaps keeps data to be sent
		input [`dataBits-1 :0] din
);

assert property(@(posedge clk)  (stateReg);
assert property(@(posedge clk)  (stateReg == stop && sTick && sReg == sbTick-1) |-> stateNext);
assert property(@(posedge clk)  (stateReg == start && sReg == 15 && sTick) |-> nNext);
assert property(@(posedge clk)  (stateReg == start && sReg == 15 && sTick) |-> sNext);
assert property(@(posedge clk)  (stateReg == stop && sTick && sReg == sbTick-1) |-> sNext);
assert property(@(posedge clk)  (stateReg == idle && txStart) |-> txNext);
assert property(@(posedge clk)  (stateReg == start) |-> txNext);
assert property(@(posedge clk)  (stateReg == idle && txStart) |-> txDoneTick);
assert property(@(posedge clk)  (stateReg == data && sTick && sReg == 15 && nReg == dataBits-1) |-> sNext);
assert property(@(posedge clk)  (stateReg == data && sTick && sReg == 15 && nReg == dataBits-1) |-> nNext);
assert property(@(posedge clk)  (stateReg == idle && txStart) |-> stateNext);
assert property(@(posedge clk)  (stateReg == data && sTick && sReg == 15 && nReg == dataBits-1) |-> stateNext);
assert property(@(posedge clk)  (stateReg == idle && txStart) |-> sNext);
assert property(@(posedge clk)  (stateReg == start && sReg == 15 && sTick) |-> stateNext);
assert property(@(posedge clk)  (stateReg == data && sTick && sReg == 15 && nReg == dataBits-1) |-> bNext);
assert property(@(posedge clk)  (stateReg == stop) |-> txNext);

endmodule