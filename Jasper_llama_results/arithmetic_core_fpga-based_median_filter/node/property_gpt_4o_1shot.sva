  parameter DATA_WIDTH = 8;
    parameter LOW_MUX = 1; // disable low output
    parameter HI_MUX = 1; // disable hight output
module i_node(
    input [DATA_WIDTH-1:0] data_lo,
    input [DATA_WIDTH-1:0] data_b,
    input sel0,
    input [DATA_WIDTH-1:0] data_a,
    input [DATA_WIDTH-1:0] data_hi,
	input DEFAULT_CLOCK,
	input DEFAULT_RESET
);

assert property(@(posedge DEFAULT_CLOCK) (data_a < data_b) |-> (sel0 == 1'b0));assert property(@(posedge DEFAULT_CLOCK) 
(data_a >= data_b) |-> (sel0 == 1'b1));assert property(@(posedge DEFAULT_CLOCK) 
(sel0 == 1'b0 && LOW_MUX == 1) |-> (data_lo == data_a));assert property(@(posedge DEFAULT_CLOCK) 
(sel0 == 1'b0 && HI_MUX == 1) |-> (data_hi == data_b));assert property(@(posedge DEFAULT_CLOCK) 
(sel0 == 1'b1 && LOW_MUX == 1) |-> (data_lo == data_b));assert property(@(posedge DEFAULT_CLOCK) 
(sel0 == 1'b1 && HI_MUX == 1) |-> (data_hi == data_a));assert property(@(posedge DEFAULT_CLOCK) 
(LOW_MUX == 0) |-> (data_lo == {DATA_WIDTH{1'b0}}));assert property(@(posedge DEFAULT_CLOCK) 
(HI_MUX == 0) |-> (data_hi == {DATA_WIDTH{1'b0}}));
endmodule
