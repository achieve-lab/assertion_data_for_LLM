module i_Ramdon_gen(
input           Reset           ,
input [9:0]       Ramdom          ,
input   [3:0]   RetryCnt        ,
input [9:0]       Ramdom_counter  ,
input [9:0]       Random_sequence ,
input [7:0]       Slot_time_counter, //256*2,
input           Clk             ,
input           Init            ,
input          Random_time_meet   
);

assert property(@(posedge Clk)  (Random_sequence[2] ^ Random_sequence[9]) |-> (Random_sequence[3]));
assert property(@(posedge Clk)  (Random_sequence[2] ^ Random_sequence[9]) |-> (Random_sequence[2]));
assert property(@(posedge Clk)  (Random_sequence[2] ^ Random_sequence[9]) |-> (Random_sequence[0]));
assert property(@(posedge Clk)  (Random_sequence[2] ^ Random_sequence[9]) |-> (Random_sequence[5]));
assert property(@(posedge Clk)  (Random_sequence[2] ^ Random_sequence[9]) |-> (Random_sequence[9]));
assert property(@(posedge Clk)  (Random_sequence[2] ^ Random_sequence[9]) |-> (Random_sequence[8]));
assert property(@(posedge Clk)  (Random_time_meet == 1) |-> (Ramdom_counter == 0));
assert property(@(posedge Clk)  (Random_sequence[2] ^ Random_sequence[9]) |-> (Random_sequence[1]));
assert property(@(posedge Clk)  (Ramdom_counter == 0) |-> Random_time_meet);
assert property(@(posedge Clk)  (Random_sequence[2] ^ Random_sequence[9]) |-> (Random_sequence[7]));
assert property(@(posedge Clk)  (Random_sequence[2] ^ Random_sequence[9]) |-> (Random_sequence[6]));
assert property(@(posedge Clk)  (Random_time_meet == 1) |-> (Random_sequence[2] ^ Random_sequence[9]));
assert property(@(posedge Clk)  (Random);
assert property(@(posedge Clk)  (Random_sequence[2] ^ Random_sequence[9]) |-> (Random_sequence[4]));

endmodule