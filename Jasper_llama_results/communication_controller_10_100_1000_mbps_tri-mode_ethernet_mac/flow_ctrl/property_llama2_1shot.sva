module i_flow_ctrl(
input           xon_cpu             ,
input             xon_cpu_dl1             ,   
input           Clk                 ,
input           Reset               ,
input             tx_pause_en_dl1         ,
input           tx_pause_en         ,
input             pause_quanta_val_dl2    ,       
input           xoff_cpu            ,
input           pause_quanta_val    ,
input           xon_gen_complete    ,
input           xoff_gen_complete   ,
input             pause_apply             ,
input [15:0]      pause_quanta_dl1        ,
input             xoff_gen                ,
input             pause_quanta_val_dl1    ,
input             tx_pause_en_dl2         ,
input             xoff_cpu_dl1            ,
input             xoff_cpu_dl2            ,
input [15:0]      pause_quanta_counter    ,
input             xon_cpu_dl2             ,
input             xon_gen                 ,
input   [15:0]  pause_quanta        ,
input           pause_quanta_sub    
);

assert property(@(posedge Clk) (pause_quanta_counter == 0) |-> (pause_apply == 0));
assert property(@(posedge Clk) (xon_gen_complete == 1) |-> (xon_gen == 0));
assert property(@(posedge Clk) (tx_pause_en_dl2 == 1) |-> (pause_apply == 1));
assert property(@(posedge Clk) (tx_pause_en_dl2 == 0) |-> (pause_apply == 0));
assert property(@(posedge Clk) (xon_cpu_dl1 == 1) |-> (xon_gen == 1));
assert property(@(posedge Clk) (xon_cpu_dl1 == 0) |-> (xon_gen == 0));
assert property(@(posedge Clk) (xoff_gen_complete == 1) |-> (xoff_gen == 0));
assert property(@(posedge Clk) (pause_quanta_counter!= 0) |-> (pause_apply == 1));
assert property(@(posedge Clk) (xoff_cpu_dl1 == 0) |-> (xoff_gen == 0));
assert property(@(posedge Clk) (pause_quanta_val_dl1 == 0) |-> (pause_quanta_counter == 0));
assert property(@(posedge Clk) (xon_gen_complete == 0) |-> (xon_gen == xon_gen));
assert property(@(posedge Clk) (xoff_gen_complete == 0) |-> (xoff_gen == xoff_gen));
assert property(@(posedge Clk) (xoff_cpu_dl1 == 1) |-> (xoff_gen == 1));
assert property(@(posedge Clk) (pause_quanta_sub == 0) |-> (pause_quanta_counter == pause_quanta_counter));
assert property(@(posedge Clk) (pause_quanta_sub == 1) |-> (pause_quanta_counter == pause_quanta_counter - 1));
assert property(@(posedge Clk) (pause_quanta_val_dl1 == 1) |-> (pause_quanta_counter == pause_quanta_dl1));

endmodule