module i_eth_outputcontrol(
input           MdoEn_2d,
input         NoPre,              // No Preamble (no 32-bit preamble)
input         ShiftedBit,         // This bit is input of the shift inputister and is connected to the Mdo signal
input   [6:0] BitCounter,         // Bit Counter
input         MdcEn_n,            // MII Management Data Clock Enable signal is asserted for one Clk period before Mdc falls.
input           MdoEn_d,
input           Mdo_d,
input         WriteOp,            // Write Operation Latch (When asserted, write operation is in progress)
input           Mdo,                // MII Management Data Output
input           Mdo_2d,
input           MdoEn,
input         Reset,              // General Reset
input          SerialEn,
input         Clk,                // Host Clock
input         InProgress         // Operation in progress
);

assert property(@(posedge Clk)  (SerialEn == 0) |-> (MdoEn == 0));
assert property(@(posedge Clk)              (SerialEn == 1) |-> (MdoEn == 1));
assert property(@(posedge Clk)  (SerialEn == 0) |-> (Mdo_d == 0));
assert property(@(posedge Clk)  (SerialEn == 1) |-> (Mdo_2d == 1));
assert property(@(posedge Clk)  (SerialEn == 0) |-> (MdoEn_2d == 0));
assert property(@(posedge Clk)  (SerialEn == 1) |-> (MdoEn_2d == 1));
assert property(@(posedge Clk)  (SerialEn == 1) |-> (MdoEn == 1));
assert property(@(posedge Clk)  (SerialEn == 0) |-> (Mdo == 0));
assert property(@(posedge Clk)  (SerialEn == 1) |-> (Mdo == 1));
assert property(@(posedge Clk)  (SerialEn == 1) |-> (Mdo_d == 1));
assert property(@(posedge Clk)  (SerialEn == 1) |-> (MdoEn_d == 1));
assert property(@(posedge Clk)  (SerialEn == 0) |-> (Mdo_2d == 0));
assert property(@(posedge Clk)  (SerialEn == 0) |-> (MdoEn_d == 0));

endmodule