
parameter       StateCPU        =4'd00;
parameter       StateMAC0       =4'd01;
parameter       StateMAC1       =4'd02;
module i_RMON_ctrl(
input           Reg_apply_1     ,
input           CPU_rd_apply        ,
input           Clk             ,
input   [15:0]  Reg_data_0      ,
input             Pipeline,
input   [4:0]   Reg_addr_0      ,
input [3:0]       CurrentState /* synthesys syn_keep*/,
input          Reg_next_1      ,
input     CPU_rd_apply_dl2,
input     CPU_rd_apply_dl1,
input   [4:0]   Reg_addr_1      ,
input [5:0]       Addra               ,
input  [31:0]  Dina                ,
input          Wea                 ,
input           Reset           ,
input          CPU_rd_grant        ,
input [3:0]       NextState,
input [31:0]      CPU_rd_dout         ,
input [4:0]       StepCounter,
input [31:0]      DoutaReg,
input   [31:0]  Douta               ,
input             CPU_rd_apply_input    ,
input   [15:0]  Reg_data_1      ,
input   [5:0]   CPU_rd_addr         ,
input             Write,
input             Reg_next_0      ,
input           Reg_apply_0     ,
input [3:0]       CurrentState_input,
input             Read,
input CPU_rd_apply_reg,
input CurrentState_reg
);

assert property(@(posedge Clk) (state == StateMAC0 && Reg_apply_0 == 0 && CPU_rd_apply_reg == 1) |-> (NextState == StateCPU));assert property(@(posedge Clk) (state == StateMAC0 && Reg_apply_0 == 0) |-> (NextState == StateMAC1));assert property(@(posedge Clk) (state == StateMAC0 && Reg_apply_0 == 1) |-> (NextState == StateMAC0));assert property(@(posedge Clk) (state == StateMAC1 && Reg_apply_1 == 0 && CPU_rd_apply_reg == 1) |-> (NextState == StateCPU));assert property(@(posedge Clk) (state == StateMAC1 && Reg_apply_1 == 0) |-> (NextState == StateMAC0));assert property(@(posedge Clk) (state == StateMAC1 && Reg_apply_1 == 1) |-> (NextState == StateMAC1));assert property(@(posedge Clk) (state == StateCPU && StepCounter == 3 && CurrentState_reg == StateMAC0) |-> (NextState == StateMAC0));assert property(@(posedge Clk) (state == StateCPU && StepCounter == 3 && CurrentState_reg == StateMAC1) |-> (NextState == StateMAC1));assert property(@(posedge Clk) (state == StateCPU && StepCounter == 3 && !(CurrentState_reg == StateMAC0 || CurrentState_reg == StateMAC1)) |-> (NextState == StateMAC0));assert property(@(posedge Clk) (StepCounter == 1 || StepCounter == 4 || StepCounter == 7 || StepCounter == 10) |-> (Read == 1));assert property(@(posedge Clk) !(StepCounter == 1 || StepCounter == 4 || StepCounter == 7 || StepCounter == 10) |-> (Read == 0));assert property(@(posedge Clk) (StepCounter == 2 || StepCounter == 5 || StepCounter == 8 || StepCounter == 11) |-> (Pipeline == 1));assert property(@(posedge Clk) !(StepCounter == 2 || StepCounter == 5 || StepCounter == 8 || StepCounter == 11) |-> (Pipeline == 0));assert property(@(posedge Clk) (StepCounter == 3 || StepCounter == 6 || StepCounter == 9 || StepCounter == 12) |-> (Write == 1));assert property(@(posedge Clk) !(StepCounter == 3 || StepCounter == 6 || StepCounter == 9 || StepCounter == 12) |-> (Write == 0));assert property(@(posedge Clk) (CurrentState == StateMAC0 && Pipeline == 1) |-> (Reg_next_0 == 1));assert property(@(posedge Clk) !(CurrentState == StateMAC0 && Pipeline == 1) |-> (Reg_next_0 == 0));assert property(@(posedge Clk) (CurrentState == StateMAC1 && Pipeline == 1) |-> (Reg_next_1 == 1));assert property(@(posedge Clk) !(CurrentState == StateMAC1 && Pipeline == 1) |-> (Reg_next_1 == 0));assert property(@(posedge Clk) (CPU_rd_apply_dl1 == 1 && CPU_rd_apply_dl2 == 0) |-> (CPU_rd_apply_reg == 1));assert property(@(posedge Clk) !(CPU_rd_apply_dl1 == 1 && CPU_rd_apply_dl2 == 0) |-> (CPU_rd_apply_reg == 0));assert property(@(posedge Clk) (CurrentState == StateCPU && Write == 1) |-> (CPU_rd_apply_reg == 0));assert property(@(posedge Clk) !(CurrentState == StateCPU && Write == 1) |-> (CPU_rd_apply_reg == 1));assert property(@(posedge Clk) !(CPU_rd_apply_reg) |-> (CPU_rd_grant));assert property(@(posedge Clk) (Pipeline && CurrentState == StateCPU) |-> (CPU_rd_dout == Douta));
endmodule
