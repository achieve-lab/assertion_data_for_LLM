parameter       StateIdle       =4'd0;
parameter       StatePktLength  =4'd1;
parameter       StatePktNumber  =4'd2;
parameter       StatePktType    =4'd3;
parameter       StatePktRange   =4'd4;
module i_RMON_addr_gen(
input [2:0]       Pkt_err_type_rmon_dl1   ,
input           Clk                 ,
input [2:0]       Pkt_type_rmon_dl1       ,
input [3:0]       CurrentState /* synthesys syn_keep*/,
input           Apply_rmon          ,//pluse signal looks like eop
input          Reg_apply           ,
input [15:0]      PktLengthReg    ,
input          Reg_drop_apply      ,
input   [2:0]   Pkt_type_rmon       ,
input [4:0]       Reg_addr            ,
input             Apply_rmon_pulse,
input [2:0]       PktTypeReg      ,
input   [2:0]   Pkt_err_type_rmon   ,
input [15:0]      Reg_data            ,
input           Reset               ,
input           Reg_next            ,
input   [15:0]  Pkt_length_rmon     ,
input [3:0]       NextState,
input [2:0]       PktErrTypeReg   ,
input             Apply_rmon_dl2,
input [15:0]      Pkt_length_rmon_dl1     ,
input             Apply_rmon_dl1
);

assert property(@(posedge Clk) (CurrentState == 4 & Reg_next == 0) |-> (NextState == 4));
assert property(@(posedge Clk) (CurrentState == 2) |-> (Reg_addr == 6));
assert property(@(posedge Clk) (CurrentState!= 0 & Apply_rmon_pulse == 0) |-> (Reg_drop_apply == 0));
assert property(@(posedge Clk) (CurrentState == 3) |-> (Reg_addr == 7));
assert property(@(posedge Clk) (CurrentState == 4) |-> (Reg_data == 1));
assert property(@(posedge Clk) (PktLengthReg < 128) |-> (Reg_addr == 17));
assert property(@(posedge Clk) (Apply_rmon == 0 & Apply_rmon_dl1 == 1) |-> (Apply_rmon_pulse == 1));
assert property(@(posedge Clk) (CurrentState == 4) |-> (Reg_addr == 8));
assert property(@(posedge Clk) (PktLengthReg < 64) |-> (Reg_addr == 15));
assert property(@(posedge Clk) (CurrentState == 2 & Reg_next == 1) |-> (NextState == 3));
assert property(@(posedge Clk) (PktTypeReg == 0) |-> (Reg_addr == 10));
assert property(@(posedge Clk) (PktTypeReg == 3) |-> (Reg_addr == 7));
assert property(@(posedge Clk) (PktErrTypeReg == 1) |-> (Reg_addr == 13));
assert property(@(posedge Clk) (PktLengthReg < 65536) |-> (Reg_addr == 22));
assert property(@(posedge Clk) (CurrentState == 1) |-> (Reg_addr == 5));
assert property(@(posedge Clk) (CurrentState == 1 & Reg_next == 0) |-> (NextState == 1));
assert property(@(posedge Clk) (CurrentState == 1) |-> (Reg_apply == 1));
assert property(@(posedge Clk) (CurrentState == 3) |-> (Reg_data == 1));
assert property(@(posedge Clk) (PktLengthReg < 256) |-> (Reg_addr == 18));
assert property(@(posedge Clk) (CurrentState == 1 & Reg_next == 1) |-> (NextState == 2));
assert property(@(posedge Clk) (CurrentState == 1) |-> (Reg_data == PktLengthReg));
assert property(@(posedge Clk) (CurrentState == 3) |-> (Reg_apply == 1));
assert property(@(posedge Clk) (Apply_rmon == 1 & Apply_rmon_dl1 == 1) |-> (Apply_rmon_pulse == 0));
assert property(@(posedge Clk) (PktErrTypeReg == 3) |-> (Reg_addr == 11));
assert property(@(posedge Clk) (CurrentState == 2) |-> (Reg_apply == 1));
assert property(@(posedge Clk) (PktErrTypeReg == 2) |-> (Reg_addr == 12));
assert property(@(posedge Clk) (PktLengthReg < 1519) |-> (Reg_addr == 21));
assert property(@(posedge Clk) (CurrentState == 0 & Apply_rmon_pulse == 0) |-> (Reg_drop_apply == 0));
assert property(@(posedge Clk)  (CurrentState == 0 & Apply_rmon_pulse == 1) |-> (NextState == 1));
assert property(@(posedge Clk) (Apply_rmon == 1 & Apply_rmon_dl1 == 0) |-> (Apply_rmon_pulse == 1));
assert property(@(posedge Clk) (CurrentState == 3 & Reg_next == 0) |-> (NextState == 3));
assert property(@(posedge Clk) (CurrentState!= 0 & Apply_rmon_pulse == 1) |-> (Reg_drop_apply == 1));
assert property(@(posedge Clk) (CurrentState == 3 & Reg_next == 1) |-> (NextState == 4));
assert property(@(posedge Clk) (CurrentState == 0) |-> (Reg_apply == 0));
assert property(@(posedge Clk) (CurrentState == 2 & Reg_next == 0) |-> (NextState == 2));
assert property(@(posedge Clk) (Apply_rmon == 0 & Apply_rmon_dl1 == 0) |-> (Apply_rmon_pulse == 0));
assert property(@(posedge Clk) (PktLengthReg < 1024) |-> (Reg_addr == 20));
assert property(@(posedge Clk) (CurrentState == 0) |-> (Reg_data == 0));
assert property(@(posedge Clk) (CurrentState == 0) |-> (NextState == 0));
assert property(@(posedge Clk) (CurrentState == 2) |-> (Reg_data == 1));
assert property(@(posedge Clk) (PktErrTypeReg == 0) |-> (Reg_addr == 14));
assert property(@(posedge Clk) (PktTypeReg == 2) |-> (Reg_addr == 8));
assert property(@(posedge Clk) (CurrentState == 4 & Reg_next == 1) |-> (NextState == 0));
assert property(@(posedge Clk) (CurrentState == 0) |-> (Reg_addr == 5));
assert property(@(posedge Clk) (PktLengthReg < 512) |-> (Reg_addr == 19));
assert property(@(posedge Clk) (CurrentState == 4) |-> (Reg_apply == 1));
assert property(@(posedge Clk) (PktLengthReg == 64) |-> (Reg_addr == 16));
assert property(@(posedge Clk) (PktTypeReg == 1) |-> (Reg_addr == 9));

endmodule