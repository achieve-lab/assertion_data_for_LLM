module i_eth_shiftreg(
input       Clk,              // Input clock (Host clock)
input       Mdi,              // MII input data
input   [15:0]Prsd,
input [15:0]CtrlData,         // Control data (data to be written to the PHY)
input       Reset,            // Reset signal
input   [7:0] ShiftReg,         // Shift inputister for shifting the data in and out
input       MdcEn_n,          // Enable signal is asserted for one Clk period before Mdc falls.
input [4:0] Rgad,             // Register address (within the selected PHY)
input       WriteOp,          // The current operation is a PHY inputister write operation
input [3:0] ByteSelect,       // Byte select
input [1:0] LatchByte,        // Byte select for latching (read operation)
input [4:0] Fiad,             // PHY address
input      LinkFail,         // Link Integrity Signal
input      ShiftedBit       // Bit shifted out of the shift inputister
);

assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h1) |-> ShiftReg[6] == Fiad[0]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h4) |-> ShiftReg[7] == CtrlData[15]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h8) |-> ShiftReg[0] == CtrlData[0]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h1) |-> ShiftReg[2] == Fiad[4]);
assert property(@(posedge Clk) (!MdcEn_n && LatchByte[0]) |-> Prsd[6] == ShiftReg[5]);
assert property(@(posedge Clk) (!MdcEn_n && LatchByte[0]) |-> Prsd[3] == ShiftReg[2]);
assert property(@(posedge Clk) (!MdcEn_n && LatchByte[0]) |-> Prsd[2] == ShiftReg[1]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h8) |-> ShiftReg[7] == CtrlData[7]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h2) |-> ShiftReg[4] == Rgad[1]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h8) |-> ShiftReg[6] == CtrlData[6]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h2) |-> ShiftReg[3] == Rgad[2]);
assert property(@(posedge Clk) (!MdcEn_n && LatchByte[0]) |-> Prsd[0] == Mdi);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h8) |-> ShiftReg[5] == CtrlData[5]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h2) |-> ShiftReg[7] == 1'b0);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h8) |-> ShiftReg[3] == CtrlData[3]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h4) |-> ShiftReg[2] == CtrlData[10]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h4) |-> ShiftReg[0] == CtrlData[8]);
assert property(@(posedge Clk) (!MdcEn_n && LatchByte[0]) |-> Prsd[4] == ShiftReg[3]);
assert property(@(posedge Clk) (!MdcEn_n && LatchByte[0]) |-> Prsd[1] == ShiftReg[0]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h4) |-> ShiftReg[1] == CtrlData[9]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h2) |-> ShiftReg[2] == Rgad[3]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h2) |-> ShiftReg[0] == Fiad[0]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h1) |-> ShiftReg[5] == Fiad[1]);
assert property(@(posedge Clk) (!MdcEn_n && LatchByte[0]) |-> Prsd);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h1) |-> ShiftReg[3] == Fiad[3]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h2) |-> ShiftReg[1] == Rgad[4]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h8) |-> ShiftReg[4] == CtrlData[4]);
assert property(@(posedge Clk) (!MdcEn_n && LatchByte[0]) |-> Prsd[5] == ShiftReg[4]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h4) |-> ShiftReg[6] == CtrlData[14]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h2) |-> ShiftReg[5] == Rgad[0]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h4) |-> ShiftReg[5] == CtrlData[13]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h4) |-> ShiftReg[4] == CtrlData[12]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h8) |-> ShiftReg[1] == CtrlData[1]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h2) |-> ShiftReg[6] == 1'b1);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h1) |-> ShiftReg[4] == Fiad[2]);
assert property(@(posedge Clk)  (MdcEn_n && ByteSelect == 4'h1) |-> ShiftReg[0] == WriteOp);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h1) |-> ShiftReg[1] == ~WriteOp);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h8) |-> ShiftReg[2] == CtrlData[2]);
assert property(@(posedge Clk) (MdcEn_n && ByteSelect == 4'h4) |-> ShiftReg[3] == CtrlData[11]);

endmodule