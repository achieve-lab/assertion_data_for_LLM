module i_eth_shiftreg(
input       Clk,              // Input clock (Host clock)
input       Mdi,              // MII input data
input   [15:0]Prsd,
input [15:0]CtrlData,         // Control data (data to be written to the PHY)
input       Reset,            // Reset signal
input   [7:0] ShiftReg,         // Shift inputister for shifting the data in and out
input       MdcEn_n,          // Enable signal is asserted for one Clk period before Mdc falls.
input [4:0] Rgad,             // Register address (within the selected PHY)
input       WriteOp,          // The current operation is a PHY inputister write operation
input [3:0] ByteSelect,       // Byte select
input [1:0] LatchByte,        // Byte select for latching (read operation)
input [4:0] Fiad,             // PHY address
input      LinkFail,         // Link Integrity Signal
input      ShiftedBit       // Bit shifted out of the shift inputister
);

assert property(@(posedge Clk)  end endmodule            8 (state == 1 & req2 == 1) |-> (gnt1 == 0));
assert property(@(posedge Clk) (ByteSelect[3:0] == 4'h8) |-> (ShiftReg[7:0] == CtrlData[7:0]));
assert property(@(posedge Clk)  endmodule            8 (ByteSelect[3:0] == 4'h1) |-> (ShiftReg[7:0] == {2'b01, ~WriteOp, WriteOp, Fiad[4:1]}));
assert property(@(posedge Clk) (ByteSelect[3:0]!= 4'h1 & ByteSelect[3:0]!= 4'h2 & ByteSelect[3:0]!= 4'h4 & ByteSelect[3:0]!= 4'h8) |-> (ShiftReg[7:0] == 8'h0));
assert property(@(posedge Clk)  (ShiftedBit) |-> (ShiftReg[7] == 1));
assert property(@(posedge Clk) (req1 == 0) |-> (gnt1 == 0));
assert property(@(posedge Clk) (Rgad == 5'h01) |-> (LinkFail == ~ShiftReg[1]));
assert property(@(posedge Clk) (req1 == 1 & req2 == 0) |-> (gnt1 == 1));
assert property(@(posedge Clk)  (gnt1) |-> (req1));
assert property(@(posedge Clk) (req2 == 1 & req1 == 0) |-> (gnt2 == 1));
assert property(@(posedge Clk) (req1 == 1 & state == 0) |-> (gnt2 == 0));
assert property(@(posedge Clk)  (ShiftReg[7]) |-> (ShiftedBit == 1));
assert property(@(posedge Clk)  (ByteSelect[3:0] == 4'h1) |-> (ShiftReg[7:0] == {2'b01, ~WriteOp, WriteOp, Fiad[4:1]}));
assert property(@(posedge Clk)  (gnt2) |-> (req2));
assert property(@(posedge Clk) (req2 == 1 & state == 1) |-> (gnt2 == 1));
assert property(@(posedge Clk) (req2 == 0) |-> (gnt2 == 0));
assert property(@(posedge Clk) (LatchByte[0] == 1) |-> (Prsd[7:0] == {ShiftReg[6:0], Mdi}));
assert property(@(posedge Clk) (ByteSelect[3:0] == 4'h2) |-> (ShiftReg[7:0] == {Fiad[0], Rgad[4:0], 2'b10}));
assert property(@(posedge Clk) (req1 == 1 & state == 0) |-> (gnt1 == 1));
assert property(@(posedge Clk) (ByteSelect[3:0] == 4'h4) |-> (ShiftReg[7:0] == CtrlData[15:8]));
assert property(@(posedge Clk) (LatchByte[1] == 1) |-> (Prsd[15:8] == {ShiftReg[6:0], Mdi}));

endmodule