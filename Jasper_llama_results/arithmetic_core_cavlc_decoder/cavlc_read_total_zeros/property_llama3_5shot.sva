module i_cavlc_read_total_zeros(
input   chroma_DC_sel,
input     [3:0]   len_comb,
input     [3:0]   TotalZeros_G3,
input     [0:2]   rbsp_chroma_DC,         
input   ena,
input     [1:0]   len_chroma_DC,
input     [3:0]   TotalZeros_LE3,
input     [0:5]   rbsp_G3,        
input   [0:8]   rbsp,
input     [1:0]   TotalZeros_chroma_DC,
input     [0:8]   rbsp_LE3,       
input     [3:0]   len_LE3,
input   sel,
input DEFAULT_CLOCK,
input DEFAULT_RESET,
input  [3:0]   TotalZeros_comb,
input     [2:0]   len_G3,
input   [3:0]   TotalCoeff
);

assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 5) |-> (TotalZeros_chroma_DC == 5) & (TotalZeros_LE3 == 5) & (TotalZeros_G3 == 5));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 9) |-> (TotalZeros_chroma_DC == 9) & (TotalZeros_LE3 == 9) & (TotalZeros_G3 == 9));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 0) |-> (len_comb == 0) & (len_chroma_DC == 0) & (len_LE3 == 0) & (len_G3 == 0));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 2) |-> (TotalZeros_chroma_DC == 2) & (TotalZeros_LE3 == 2) & (TotalZeros_G3 == 2));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 2) |-> (len_comb == 2) & (len_chroma_DC == 2) & (len_LE3 == 2) & (len_G3 == 2));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 6) |-> (TotalZeros_chroma_DC == 6) & (TotalZeros_LE3 == 6) & (TotalZeros_G3 == 6));
assert property(@(posedge DEFAULT_CLOCK)  (TotalZeros_comb == 0) |-> (TotalZeros_chroma_DC == 0) & (TotalZeros_LE3 == 0) & (TotalZeros_G3 == 0));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 4) |-> (len_comb == 4) & (len_chroma_DC == 4) & (len_LE3 == 4) & (len_G3 == 4));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 1) |-> (TotalZeros_chroma_DC == 1) & (TotalZeros_LE3 == 1) & (TotalZeros_G3 == 1));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 12) |-> (TotalZeros_chroma_DC == 12) & (TotalZeros_LE3 == 12) & (TotalZeros_G3 == 12));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 5) |-> (len_comb == 5) & (len_chroma_DC == 5) & (len_LE3 == 5) & (len_G3 == 5));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 4) |-> (TotalZeros_chroma_DC == 4) & (TotalZeros_LE3 == 4) & (TotalZeros_G3 == 4));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 15) |-> (TotalZeros_chroma_DC == 15) & (TotalZeros_LE3 == 15) & (TotalZeros_G3 == 15));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 3) |-> (TotalZeros_chroma_DC == 3) & (TotalZeros_LE3 == 3) & (TotalZeros_G3 == 3));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 7) |-> (TotalZeros_chroma_DC == 7) & (TotalZeros_LE3 == 7) & (TotalZeros_G3 == 7));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 11) |-> (TotalZeros_chroma_DC == 11) & (TotalZeros_LE3 == 11) & (TotalZeros_G3 == 11));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 8) |-> (TotalZeros_chroma_DC == 8) & (TotalZeros_LE3 == 8) & (TotalZeros_G3 == 8));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 14) |-> (TotalZeros_chroma_DC == 14) & (TotalZeros_LE3 == 14) & (TotalZeros_G3 == 14));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 10) |-> (TotalZeros_chroma_DC == 10) & (TotalZeros_LE3 == 10) & (TotalZeros_G3 == 10));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 3) |-> (len_comb == 3) & (len_chroma_DC == 3) & (len_LE3 == 3) & (len_G3 == 3));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 1) |-> (len_comb == 1) & (len_chroma_DC == 1) & (len_LE3 == 1) & (len_G3 == 1));
assert property(@(posedge DEFAULT_CLOCK) (TotalZeros_comb == 13) |-> (TotalZeros_chroma_DC == 13) & (TotalZeros_LE3 == 13) & (TotalZeros_G3 == 13));

endmodule
