module i_cavlc_read_run_befores(
input  [8:0]   coeff_6,
input   [8:0]   level_5,
input  [8:0]   coeff_9,
input   sel,
input  [3:0]   len_comb,
input     [8:0]   coeff,
input   [8:0]   level_6,
input   ena,
input  [8:0]   coeff_14,
input     [8:0]   coeff_12,
input   clr,
input  [8:0]   coeff_1,
input   [0:10]  rbsp,
input  [8:0]   coeff_4,
input   [8:0]   level_7,
input   [8:0]   level_15,
input   clk,
input   [3:0]   i,          //range from TotalCoeff-1 to 0
input   [8:0]   level_0,
input   [8:0]   level_12,
input  [8:0]   coeff_11,
input     [8:0]   coeff_10,
input  [8:0]   coeff_3,
input   [8:0]   level_14,
input   [8:0]   level_4,
input     [8:0]   coeff_13,
input   [8:0]   level_3,
input     [8:0]   coeff_5,
input     [3:0]   run,
input  [8:0]   coeff_7,
input  [8:0]   coeff_15,
input     [8:0]   coeff_0,
input   [8:0]   level_1,
input     [3:0]   len,
input  [8:0]   coeff_2,
input   [8:0]   level_10,
input   [8:0]   level_9,
input   ZeroLeft_init,
input   [8:0]   level_13,
input  [8:0]   coeff_8,
input   [8:0]   level_11,
input     [3:0]   ZeroLeft,
input   [3:0]   TotalZeros_comb,
input   rst_n,
input  [8:0] level_8,
input   [8:0]   level_2
);

assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (len_comb == 0));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_11 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_13 == 0));
assert property(@(posedge clk)     (rst_n == 0) |-> (len_comb == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_15 == 0));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_15 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_6 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (len_comb == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_0 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_1 == 0));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_abs == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (rbsp_internal == 'hffff));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_10 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_8 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 0 && ena == 1) |-> (suffixLength == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (rbsp_internal == rbsp));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_prefix_comb == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_4 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 0 && ena == 1) |-> (level_code_tmp == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_3 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_7 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_code_tmp == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_12 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (suffixLength == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_4 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_10 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_9 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_2 == 0));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_1 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_abs == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 0 && ena == 1) |-> (rbsp_internal == rbsp));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_15 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_3 == 0));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_7 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_abs == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 0 && ena == 1) |-> (level_prefix == level_prefix_comb));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_6 == 0));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_code_tmp == 0));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_5 == 0));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_12 == 0));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_13 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_2 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_prefix == level_prefix_comb));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_7 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_1 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_12 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 0 && ena == 1) |-> (level_prefix_comb == 0));
assert property(@(posedge clk)     (rst_n == 0) |-> (suffixLength == 0));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_8 == 0));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_prefix_comb == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_5 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_10 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_13 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_9 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_11 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_11 == 0));
assert property(@(posedge clk)      (rst_n == 0) |-> (rbsp_internal == 'hffff));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_14 == 0));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_14 == 0));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_4 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_0 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_6 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_8 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_prefix_comb == 0));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_2 == 0));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_0 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (suffixLength == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_code_tmp == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_5 == 0));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_prefix == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 1) |-> (level_14 == 0));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_9 == 0));
assert property(@(posedge clk)     (rst_n == 1 && t1s_sel == 1 && ena == 0) |-> (level_prefix == level_prefix_comb));
assert property(@(posedge clk)     (rst_n == 0) |-> (level_3 == 0));

endmodule