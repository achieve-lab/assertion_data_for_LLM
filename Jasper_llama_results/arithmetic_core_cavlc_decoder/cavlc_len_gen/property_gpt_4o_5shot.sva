module i_cavlc_len_gen(
input  [3:0] len_read_run_befores_comb,
input  [4:0] len_read_total_coeffs_comb,
input [4:0] len_comb,         //number of bits comsumed by cavlc in a cycle
input  [7:0] cavlc_state,
input  [4:0] len_read_levels_comb,
input  [3:0] len_read_total_zeros_comb,
input DEFAULT_CLOCK,
input DEFAULT_RESET
);

assert property(@(posedge DEFAULT_CLOCK) (cavlc_state[`cavlc_read_total_coeffs_bit]) |-> (len_comb == len_read_total_coeffs_comb));assert property(@(posedge DEFAULT_CLOCK) (cavlc_state[`cavlc_read_t1s_flags_bit] || cavlc_state[`cavlc_read_level_prefix_bit] || cavlc_state[`cavlc_read_level_suffix_bit]) |-> (len_comb == len_read_levels_comb));assert property(@(posedge DEFAULT_CLOCK) (cavlc_state[`cavlc_read_total_zeros_bit]) |-> (len_comb == len_read_total_zeros_comb));assert property(@(posedge DEFAULT_CLOCK) (cavlc_state[`cavlc_read_run_befores_bit]) |-> (len_comb == len_read_run_befores_comb));assert property(@(posedge DEFAULT_CLOCK) (cavlc_state[`cavlc_calc_level_bit] || cavlc_state[`cavlc_idle_bit]) |-> (len_comb == 0));assert property(@(posedge DEFAULT_CLOCK) (!cavlc_state[`cavlc_read_total_coeffs_bit] && !cavlc_state[`cavlc_read_t1s_flags_bit] && !cavlc_state[`cavlc_read_level_prefix_bit] && !cavlc_state[`cavlc_read_level_suffix_bit] && !cavlc_state[`cavlc_read_total_zeros_bit] && !cavlc_state[`cavlc_read_run_befores_bit] && !cavlc_state[`cavlc_calc_level_bit] && !cavlc_state[`cavlc_idle_bit]) |-> (len_comb === 'bx));
endmodule