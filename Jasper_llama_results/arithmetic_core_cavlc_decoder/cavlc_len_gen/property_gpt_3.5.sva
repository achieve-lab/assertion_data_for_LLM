module i_cavlc_len_gen(
input  [3:0] len_read_run_befores_comb,
input  [4:0] len_read_total_coeffs_comb,
input [4:0] len_comb,         //number of bits comsumed by cavlc in a cycle
input  [7:0] cavlc_state,
input  [4:0] len_read_levels_comb,
input  [3:0] len_read_total_zeros_comb,
input DEFAULT_CLOCK,
input DEFAULT_RESET
);

assert property(@(posedge clk) (len_comb == len_read_total_coeffs_comb) |-> (cavlc_state[`cavlc_read_total_coeffs_bit])); assert property(@(posedge clk) (len_comb == len_read_levels_comb) |-> (cavlc_state[`cavlc_read_t1s_flags_bit] | cavlc_state[`cavlc_read_level_prefix_bit] | cavlc_state[`cavlc_read_level_suffix_bit])); assert property(@(posedge clk) (len_comb == len_read_total_zeros_comb) |-> (cavlc_state[`cavlc_read_total_zeros_bit])); assert property(@(posedge clk) (len_comb == len_read_run_befores_comb) |-> (cavlc_state[`cavlc_read_run_befores_bit])); assert property(@(posedge clk) (len_comb == 0) |-> (cavlc_state[`cavlc_calc_level_bit] | cavlc_state[`cavlc_idle_bit]));
endmodule