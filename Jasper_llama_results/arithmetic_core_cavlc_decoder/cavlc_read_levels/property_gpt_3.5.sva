module i_cavlc_read_levels(
input  [8:0]   level_4,
input   [3:0]   i,
input  [8:0]   level_14,
input  [8:0]   level_5,
input   [4:0]   TotalCoeff,
input     [3:0]   level_prefix_comb,
input    [2:0]   tmp1,
input   t1s_sel,
input     [4:0]   len_comb,
input  [8:0]   level_3,
input   prefix_sel,
input   clk,
input  [8:0]   level_1,
input  [8:0]   level_15,
input level_abs_refresh,
input first_level,
input   ena,
input  [8:0]   level_9,
input  [8:0]   level_6,
input  [8:0]   level_8,
input   rst_n,
input  [8:0]   level_2,
input     [8:0]   level_suffix,
input   [0:15]  rbsp,
input     [8:0]   level,
input   suffix_sel,
input   [1:0]   TrailingOnes,
input  [8:0]   level_12,
input  [8:0]   level_13,
input  [8:0]   level_10,
input     [3:0]   level_prefix,
input     [8:0]   level_abs,
input  [8:0]   level_0,
input     [0:15]  rbsp_internal,        // reduce toggle rate
input  [8:0]   level_7,
input     [8:0]   level_code_tmp,
input   calc_sel,
input  [8:0]   level_11,
input     [2:0]   suffixLength   // range from 0 to 6
);

assert property(@(posedge clk) (level_prefix_comb == 0) |-> (level_prefix == 0);
assert property(@(posedge clk) (level_prefix_comb == 1) |-> (level_prefix == 1);
assert property(@(posedge clk) (level_prefix_comb == 2) |-> (level_prefix == 2);
assert property(@(posedge clk) (level_prefix_comb == 3) |-> (level_prefix == 3);
assert property(@(posedge clk) (level_prefix_comb == 4) |-> (level_prefix == 4);
assert property(@(posedge clk) (level_prefix_comb == 5) |-> (level_prefix == 5);
assert property(@(posedge clk) (level_prefix_comb == 6) |-> (level_prefix == 6);
assert property(@(posedge clk) (level_prefix_comb == 7) |-> (level_prefix == 7);
assert property(@(posedge clk) (level_prefix_comb == 8) |-> (level_prefix == 8);
assert property(@(posedge clk) (level_prefix_comb == 9) |-> (level_prefix == 9);
assert property(@(posedge clk) (level_prefix_comb == 10) |-> (level_prefix == 10);
assert property(@(posedge clk) (level_prefix_comb == 11) |-> (level_prefix == 11);
assert property(@(posedge clk) (level_prefix_comb == 12) |-> (level_prefix == 12);
assert property(@(posedge clk) (level_prefix_comb == 13) |-> (level_prefix == 13);
assert property(@(posedge clk) (level_prefix_comb == 14) |-> (level_prefix == 14);
assert property(@(posedge clk) (level_prefix_comb == 15) |-> (level_prefix == 15);
assert property(@(posedge clk) (level_prefix_comb == 'bx) |-> (level_prefix == 'bx);
assert property(@(posedge clk) (level_abs_refresh) |-> (level_abs == -level);
assert property(@(posedge clk) (level_abs_refresh) |-> (level_abs == level);
assert property(@(posedge clk) (level_code_tmp % 2 == 0) |-> (level == (level_code_tmp + tmp1 + 2) >> 1);
assert property(@(posedge clk) (level_code_tmp % 2 != 0) |-> (level == (-level_code_tmp - tmp1 - 1) >> 1);
assert property(@(posedge clk) (level_code_tmp % 2 == 0) |-> (level == (level_code_tmp + tmp1 + 2) >> 1);
assert property(@(posedge clk) (level_code_tmp % 2 != 0) |-> (level == (-level_code_tmp - tmp1 - 1) >> 1);
assert property(@(posedge clk) (level_abs_refresh) |-> (level_abs == -level);
assert property(@(posedge clk) (level_abs_refresh) |-> (level_abs == level);
assert property(@(posedge clk) (level_code_tmp % 2 == 0) |-> (level == (level_code_tmp + tmp1 + 2) >> 1);
assert property(@(posedge clk) (level_code_tmp % 2 != 0) |-> (level == (-level_code_tmp - tmp1 - 1) >> 1);
assert property(@(posedge clk) (level_code_tmp % 2 == 0) |-> (level == (level_code_tmp + tmp1 + 2) >> 1);
assert property(@(posedge clk) (level_code_tmp % 2 != 0) |-> (level == (-level_code_tmp - tmp1 - 1) >> 1);
assert property(@(posedge clk) (level_abs_refresh) |-> (level_abs == -level);
assert property(@(posedge clk) (level_abs_refresh) |-> (level_abs == level);
assert property(@(posedge clk) (level_code_tmp % 2 == 0) |-> (level == (level_code_tmp + tmp1 + 2) >> 1);
assert property(@(posedge clk) (level_code_tmp % 2 != 0) |-> (level == (-level_code_tmp - tmp1 - 1) >> 1);
endmodule