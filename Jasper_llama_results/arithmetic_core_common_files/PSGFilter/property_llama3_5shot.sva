
parameter pTaps = 16;

module i_PSGFilter(
input [7:0] cnt,
input [14:0] o,
input wr,
input [11:0] coeff [0:pTaps-1],   // magnitude of coefficient
input clk,
input [14:0] tap [0:pTaps-1],     // tap inputisters
input [14:0] i,
input [12:0] din,
input [pTaps-1:0] sgn,            // sign of coefficient
input [26:0] mult ,
input [30:0] acc,                 // accumulator
input rst,
input [3:0] adr
);

assert property(@(posedge clk)(rst) |-> (acc == 0));
assert property(@(posedge clk) (rst) |-> (o == 0));
assert property(@(posedge clk) (
assert property(@(posedge clk)rst) |-> (tap[0] == i));
assert property(@(posedge clk) (rst) |-> (tap[1] == tap[0]));
assert property(@(posedge clk) (rst) |-> (tap[2] == tap[1]));
assert property(@(posedge clk)
assert property(@(posedge clk)(rst) |-> (tap[3] == tap[2]));
assert property(@(posedge clk) (rst) |-> (tap[4] == tap[3]));
assert property(@(posedge clk) (rst) |-> (tap[5] == tap[4]));
assert property(@(posedge clk) (rst) |-> (tap[6] == tap[5]));
assert property(@(posedge clk) (rst) |-> (tap[7] == tap[6]));
assert property(@(posedge clk) (rst) |-> (tap[8] == tap[7]));
assert property(@(posedge clk) (rst) |-> (tap[9] == tap[8]));
assert property(@(posedge clk) (rst) |-> (tap[10] == tap[9]));
assert property(@(posedge clk) (rst) |-> (tap[11] == tap[10]));
assert property(@(posedge clk) (rst) |-> (tap[12] == tap[11]));
assert property(@(posedge clk) (rst) |-> (tap[13] == tap[12]));
assert property(@(posedge clk) (rst) |-> (tap[14] == tap[13]));
assert property(@(posedge clk) (rst) |-> (tap[15] == tap[14]));
assert property(@(posedge clk) (wr) |-> (coeff[adr] == din[11:0]));
assert property(@(posedge clk) (wr) |-> (sgn[adr] == din[12]));
assert property(@(posedge clk) (cnt==8'd0) |-> (tap[0] == i));
assert property(@(posedge clk) (cnt==8'd0) |-> (tap[1] == tap[0]));
assert property(@(posedge clk) (cnt==8'd0) |-> (tap[2] == tap[1]));
assert property(@(posedge clk) (cnt==8'd0) |-> (tap[3] == tap[2]));
assert property(@(posedge clk) (cnt==8'd0) |-> (tap[4] == tap[3]));
assert property(@(posedge clk) (cnt==8'd0) |-> (tap[5] == tap[4]));
assert property(@(posedge clk) (cnt==8'd0) |-> (tap[6] == tap[5]));
assert property(@(posedge clk) (cnt==8'd0) |-> (tap[7] == tap[6]));
assert property(@(posedge clk) (cnt==8'd0) |-> (tap[8] == tap[7]));
assert property(@(posedge clk) (cnt==8'd0) |-> (tap[9] == tap[8]));
assert property(@(posedge clk) (cnt==8'd0) |-> (tap[10] == tap[9]));
assert property(@(posedge clk) (cnt==8'd0) |-> (tap[11] == tap[10]));
assert property(@(posedge clk) (cnt==8'd0) |-> (tap[12] == tap[11]));
assert property(@(posedge clk) (cnt==8'd0) |-> (tap[13] == tap[12]));
assert property(@(posedge clk) (cnt==8'd0) |-> (tap[14] == tap[13]));
assert property(@(posedge clk) (cnt==8'd0) |-> (tap[15] == tap[14]));
assert property(@(posedge clk) (cnt==8'd0) |-> (acc == sgn[cnt[3:0]]? 0 - mult : 0 + mult));
assert property(@(posedge clk) (cnt < pTaps) |-> (acc == sgn[cnt[3:0]]? acc - mult : acc + mult));
assert property(@(posedge clk) (cnt==8'd0) |-> (o == acc[30:16]));
assert property(@(posedge clk) (cnt < pTaps) |-> (o == acc[30:16]));
endmodule
