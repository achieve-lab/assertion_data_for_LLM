parameter pChannels = 4;
parameter pPrescalerBits = 8;
module i_PSGEnvGen(
	input [19:0] envDvn [3:0],
	input [19:0] envStepPeriod1 ,
	input [7:0] sustain3,
	input [15:0] envStepPeriod,	// determines the length of one step of the envelope generator
	input [17:0] decay,
	input [19:0] envDvnx,
	input [11:0] relese_x,
	input [11:0] relese2,
	input [15:0] attack0,
	input [7:0] envCtr2 [3:0],
	input [15:0] attack1,
    input [1:0] sel ,
	input [15:0] attack,
	input [7:0] sustain0,
	input [7:0] sustain2,
	input rst,							// reset
	input [7:0] sustain_x,
	input [11:0] relese1,
	input [7:0] sustain1,
	input [15:0] attack_x,
	input [7:0] envCtr [3:0],
	input [11:0] decay2,
	input [11:0] decay_x,
	input clk,							// core clock
	input [15:0] attack2,
	input [7:0] sustain,
	input [15:0] attack3,
	input [2:0] icnt [3:0],		// interval count
	input [2:0] envStateNxt,
	input [11:0] decay3,
	input [11:0] decay0,
	input [17:0] relese,
	input [7:0] envCtrx,
	input [11:0] relese0,
	input [3:0] gate,
	input [7:0] iv [3:0],			// interval value for decay/release
	input [11:0] decay1,
	input [11:0] relese3,
	input [pPrescalerBits-1:0] cnt,		// clock rate prescaler
	input [7:0] o,
	input [2:0] envState [3:0],
        
	input [1:0] s,
	input [4:1] i1,
	input e,
	input [4:1] i2,
	input [4:1] i0,
	input [4:1] z,
	input [4:1] i3
);

assert property(@(posedge clk) (o == 0) |-> (sgn[cnt[3:0]] == 1'b1));
assert property(@(posedge clk) (o == 0) |-> (rst == 1'b1));
assert property(@(posedge clk) (o == 0) |-> (mult == 0));
assert property(@(posedge clk)              (o == 0) |-> (cnt == 8'd0));
assert property(@(posedge clk) (o == 0) |-> (cnt == 8'd0));

endmodule