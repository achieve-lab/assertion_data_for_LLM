module i_PSGBusArb(
input req3,
input sel4,
input sel3,
input sel6,
input sel1,
input req4,
input req2,		// ...
input req6,
input ack,		// bus transfer completed
input req1,		// requester 1 wants the bus
input sel7,
input req0,		// requester 0 wants the bus
input sel2,
input req5,
input rst,		// reset
input req7,
input ce,		// clock enable (eg 25MHz)
input clk,		// clock (eg 100MHz)
input sel5,
input [2:0] seln,
input sel0
);

assert property(@(posedge clk) (req0 == 1 & ce == 1 & ack == 1) |-> (sel0 == 1 & seln == 3'd0));assert property(@(posedge clk) 
(req1 == 1 & ce == 1 & ack == 1) |-> (sel1 == 1 & seln == 3'd1));assert property(@(posedge clk) 
(req2 == 1 & ce == 1 & ack == 1) |-> (sel2 == 1 & seln == 3'd2));assert property(@(posedge clk) 
(req3 == 1 & ce == 1 & ack == 1) |-> (sel3 == 1 & seln == 3'd3));assert property(@(posedge clk) 
(req4 == 1 & ce == 1 & ack == 1) |-> (sel4 == 1 & seln == 3'd4));assert property(@(posedge clk) 
(req5 == 1 & ce == 1 & ack == 1) |-> (sel5 == 1 & seln == 3'd5));assert property(@(posedge clk) 
(req6 == 1 & ce == 1 & ack == 1) |-> (sel6 == 1 & seln == 3'd6));assert property(@(posedge clk) 
(req7 == 1 & ce == 1 & ack == 1) |-> (sel7 == 1 & seln == 3'd7));assert property(@(posedge clk) 
(sel0 == 1) |-> (req0 == 1));assert property(@(posedge clk) 
(sel1 == 1) |-> (req1 == 1));assert property(@(posedge clk) 
(sel2 == 1) |-> (req2 == 1));assert property(@(posedge clk) 
(sel3 == 1) |-> (req3 == 1));assert property(@(posedge clk) 
(sel4 == 1) |-> (req4 == 1));assert property(@(posedge clk) 
(sel5 == 1) |-> (req5 == 1));assert property(@(posedge clk) 
(sel6 == 1) |-> (req6 == 1));assert property(@(posedge clk) 
(sel7 == 1) |-> (req7 == 1));assert property(@(posedge clk) 
(rst == 1) |-> (sel0 == 0 & sel1 == 0 & sel2 == 0 & sel3 == 0 & sel4 == 0 & sel5 == 0 & sel6 == 0 & sel7 == 0 & seln == 3'd0));
endmodule