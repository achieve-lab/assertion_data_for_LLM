module i_PSGBusArb(
input req3,
input sel4,
input sel3,
input sel6,
input sel1,
input req4,
input req2,		// ...
input req6,
input ack,		// bus transfer completed
input req1,		// requester 1 wants the bus
input sel7,
input req0,		// requester 0 wants the bus
input sel2,
input req5,
input rst,		// reset
input req7,
input ce,		// clock enable (eg 25MHz)
input clk,		// clock (eg 100MHz)
input sel5,
input [2:0] seln,
input sel0
);

assert property(@(posedge clk) (req0 && req1) |-> (sel0 == 1'b1 && sel1 == 1'b0));assert property(@(posedge clk)  (req1 && req2) |-> (sel1 == 1'b1 && sel2 == 1'b0));assert property(@(posedge clk)  (req2 && req3) |-> (sel2 == 1'b1 && sel3 == 1'b0));assert property(@(posedge clk)  (req3 && req4) |-> (sel3 == 1'b1 && sel4 == 1'b0));assert property(@(posedge clk)  (req4 && req5) |-> (sel4 == 1'b1 && sel5 == 1'b0));assert property(@(posedge clk)  (req5 && req6) |-> (sel5 == 1'b1 && sel6 == 1'b0));assert property(@(posedge clk)  (req6 && req7) |-> (sel6 == 1'b1 && sel7 == 1'b0));assert property(@(posedge clk)  (req7) |-> (sel7 == 1'b1));assert property(@(posedge clk)  (req0) |-> (sel0 == 1'b1));assert property(@(posedge clk)  (!ce || !ack) |-> (sel0 == 1'b0 && sel1 == 1'b0 && sel2 == 1'b0 && sel3 == 1'b0 && sel4 == 1'b0 && sel5 == 1'b0 && sel6 == 1'b0 && sel7 == 1'b0 && seln == 3'd0));
endmodule