
localparam EMPTY   = 2'b00;
localparam WRITE_1 = 2'b01;
localparam WRITE_2 = 2'b10;
localparam BYPASS  = 2'b11;

//States definition for state_byte
localparam IDLE   = 3'b100;
localparam BYTE_0 = 3'b000;
localparam BYTE_1 = 3'b001;
localparam BYTE_2 = 3'b010;
localparam BYTE_3 = 3'b011;

//States definition for state_reset
localparam NO_RESET = 3'b000;
localparam RESET    = 3'b001;
localparam WAIT     = 3'b010;
localparam WRITE    = 3'b011;
localparam RESET_2  = 3'b100;

//Coding for size signal
localparam BYTE      = 2'b00;
localparam HALF_WORD = 2'b01;
localparam WORD      = 2'b10;

module i_crc_control_unit(
 input byte_en,
 input [1:0] byte_sel,
input [2:0] state_byte,
 input [1:0] size_in,
 input read_wait,
 input write,
 input bypass_size,
 input rst_n,
 input clk,
input [2:0] state_reset,
 input clear_crc_init_sel,
input [2:0] next_state_reset,
 input reset_pending,
input [1:0] next_state_full,
 input reset_chain,
 input set_crc_init_sel,
 input buffer_full,
input [1:0] state_full,
input last_byte,
 input bypass_byte0,
 input crc_out_en,
input has_data,
input [2:0] next_state_byte
);

assert property(@(posedge clk) (state_full == 2'b10 & state_byte == 3'b100) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b01 & state_byte == 3'b011) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b01 & state_byte == 3'b111) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b10 & state_byte == 3'b111) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b11 & state_byte == 3'b000) |-> (bypass_byte0 == 1));
assert property(@(posedge clk) (state_full == 2'b10 & state_byte == 3'b101) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b10 & state_byte == 3'b000) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b00 & state_byte == 3'b000) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b10 & state_byte == 3'b010) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b11 & state_byte == 3'b001) |-> (bypass_byte0 == 1));
assert property(@(posedge clk) (state_full == 2'b01 & state_byte == 3'b010) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b10 & state_byte == 3'b001) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b10 & state_byte == 3'b011) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b11 & state_byte == 3'b100) |-> (bypass_byte0 == 1));
assert property(@(posedge clk) (state_full == 2'b01 & state_byte == 3'b110) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b01 & state_byte == 3'b101) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b01 & state_byte == 3'b000) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b11 & state_byte == 3'b010) |-> (bypass_byte0 == 1));
assert property(@(posedge clk) (state_full == 2'b00 & state_byte == 3'b001) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b01 & state_byte == 3'b100) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b11 & state_byte == 3'b101) |-> (bypass_byte0 == 1));
assert property(@(posedge clk) (state_full == 2'b00 & state_byte == 3'b010) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b10 & state_byte == 3'b110) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b11 & state_byte == 3'b011) |-> (bypass_byte0 == 1));
assert property(@(posedge clk) (state_full == 2'b11 & state_byte == 3'b111) |-> (bypass_byte0 == 1));
assert property(@(posedge clk) (state_full == 2'b01 & state_byte == 3'b001) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b11 & state_byte == 3'b110) |-> (bypass_byte0 == 1));

endmodule