
localparam EMPTY   = 2'b00;
localparam WRITE_1 = 2'b01;
localparam WRITE_2 = 2'b10;
localparam BYPASS  = 2'b11;

//States definition for state_byte
localparam IDLE   = 3'b100;
localparam BYTE_0 = 3'b000;
localparam BYTE_1 = 3'b001;
localparam BYTE_2 = 3'b010;
localparam BYTE_3 = 3'b011;

//States definition for state_reset
localparam NO_RESET = 3'b000;
localparam RESET    = 3'b001;
localparam WAIT     = 3'b010;
localparam WRITE    = 3'b011;
localparam RESET_2  = 3'b100;

//Coding for size signal
localparam BYTE      = 2'b00;
localparam HALF_WORD = 2'b01;
localparam WORD      = 2'b10;

module i_crc_control_unit(
 input byte_en,
 input [1:0] byte_sel,
input [2:0] state_byte,
 input [1:0] size_in,
 input read_wait,
 input write,
 input bypass_size,
 input rst_n,
 input clk,
input [2:0] state_reset,
 input clear_crc_init_sel,
input [2:0] next_state_reset,
 input reset_pending,
input [1:0] next_state_full,
 input reset_chain,
 input set_crc_init_sel,
 input buffer_full,
input [1:0] state_full,
input last_byte,
 input bypass_byte0,
 input crc_out_en,
input has_data,
input [2:0] next_state_byte
);

assert property(@(posedge clk) (state_byte == BYTE_3 & write == 0 & has_data == 0) |-> (next_state_byte == IDLE));
assert property(@(posedge clk) (state_byte!= BYTE_0 & size_in == 2'b01 & state_full!= 2'b11) |-> (bypass_size == 1));
assert property(@(posedge clk) (state_byte == BYTE_0 & size_in == 2'b01) |-> (next_state_byte == BYTE_1));
assert property(@(posedge clk) (state_reset == 3'b011 & reset_chain == 0 & last_byte == 0) |-> (next_state_reset == 3'b011));
assert property(@(posedge clk) (state_reset == 3'b000 & reset_chain == 1 & has_data == 0 & state_byte!= IDLE & last_byte == 0) |-> (next_state_reset == 3'b001));
assert property(@(posedge clk) (state_byte!= BYTE_0 & size_in == 2'b11 & state_full!= 2'b11) |-> (bypass_size == 1));
assert property(@(posedge clk) (state_byte == BYTE_3 & (write == 1 | buffer_full == 1)) |-> (next_state_byte == BYTE_0));
assert property(@(posedge clk) (state_full == 2'b01) |-> (buffer_full == 0));
assert property(@(posedge clk) (state_reset == 3'b011 & reset_chain == 1 & last_byte == 1) |-> (next_state_reset == 3'b001));
assert property(@(posedge clk) (state_reset == 3'b100 & last_byte == 1 & write == 1) |-> (next_state_reset == 3'b011));
assert property(@(posedge clk) (state_byte == BYTE_3 & size_in == 2'b00) |-> (last_byte == 0));
assert property(@(posedge clk) (state_reset == 3'b011 & reset_chain == 0 & last_byte == 1) |-> (next_state_reset == 3'b000));
assert property(@(posedge clk) (state_byte == BYTE_0 & size_in == 2'b00) |-> (last_byte == 1));
assert property(@(posedge clk) (state_full == 2'b01 & last_byte == 0) |-> (next_state_full == 2'b10));
assert property(@(posedge clk) (state_reset == 3'b000 & reset_chain == 1 & has_data == 1 & last_byte == 0) |-> (next_state_reset == 3'b010));
assert property(@(posedge clk) (state_reset == 3'b010 & last_byte == 1 & write == 0) |-> (next_state_reset == 3'b001));
assert property(@(posedge clk) (state_byte == BYTE_2) |-> (next_state_byte == BYTE_3));
assert property(@(posedge clk) (state_byte == BYTE_3) |-> (byte_sel == BYTE_3));
assert property(@(posedge clk) (state_full == 2'b10 & last_byte == 1 & write == 1) |-> (next_state_full == 2'b11));
assert property(@(posedge clk) (state_byte == BYTE_2) |-> (byte_sel == BYTE_2));
assert property(@(posedge clk) (state_full == 2'b11) |-> (bypass_byte0 == 0));
assert property(@(posedge clk) (state_full == 2'b00) |-> (has_data == 0));
assert property(@(posedge clk) (state_byte == IDLE) |-> (read_wait == 1));
assert property(@(posedge clk) (state_reset == 3'b001 & last_byte == 0 & write == 0) |-> (next_state_reset == 3'b001));
assert property(@(posedge clk) (state_reset == 3'b011 & reset_chain == 1 & last_byte == 0) |-> (next_state_reset == 3'b100));
assert property(@(posedge clk) (state_full == 2'b11 & last_byte == 1 & write == 0) |-> (next_state_full == 2'b01));
assert property(@(posedge clk) (state_full == 2'b11) |-> (bypass_size == 1));
assert property(@(posedge clk) (write == 1) |-> (next_state_full == 2'b01));
assert property(@(posedge clk) (state_full == 2'b00) |-> (next_state_full == 2'b00));
assert property(@(posedge clk) (state_reset == 3'b000 & reset_chain == 1 & has_data == 1 & last_byte == 1) |-> (next_state_reset == 3'b001));
assert property(@(posedge clk) (state_full == 2'b11 & last_byte == 0 & write == 1) |-> (next_state_full == 2'b11));
assert property(@(posedge clk) (state_full == 2'b00) |-> (buffer_full == 0));
assert property(@(posedge clk) (state_full == 2'b11 & last_byte == 1 & write == 1) |-> (next_state_full == 2'b11));
assert property(@(posedge clk) (state_full == 2'b11) |-> (has_data == 1));
assert property(@(posedge clk) (state_byte == BYTE_1 & size_in == 2'b01) |-> (last_byte == 1));
assert property(@(posedge clk) (state_byte!= IDLE) |-> (read_wait == 0));
assert property(@(posedge clk) (state_byte == BYTE_3 & size_in == 2'b10) |-> (last_byte == 0));
assert property(@(posedge clk) (state_byte == BYTE_0 & size_in == 2'b10) |-> (next_state_byte == BYTE_1));
assert property(@(posedge clk) (state_reset == 3'b001 & last_byte == 1) |-> (next_state_reset == 3'b000));
assert property(@(posedge clk) (state_reset == 3'b100 & last_byte == 1 & write == 0) |-> (next_state_reset == 3'b001));
assert property(@(posedge clk) (state_byte == BYTE_1) |-> (byte_sel == BYTE_1));
assert property(@(posedge clk) (state_byte == BYTE_1 & size_in == 2'b00) |-> (last_byte == 0));
assert property(@(posedge clk) (state_full == 2'b01 & last_byte == 1 & write == 1) |-> (next_state_full == 2'b11));
assert property(@(posedge clk) (state_full!= 2'b11) |-> (bypass_byte0 == 1));
assert property(@(posedge clk) (last_byte & has_data) |-> (byte_en == 1));
assert property(@(posedge clk) (state_byte == BYTE_2 & size_in == 2'b10) |-> (last_byte == 1));
assert property(@(posedge clk)  (state_byte == IDLE & write == 1) |-> (next_state_byte == BYTE_0));
assert property(@(posedge clk) (state_reset == 3'b001 & last_byte == 0 & write == 1) |-> (next_state_reset == 3'b011));
assert property(@(posedge clk) (state_reset == 3'b100 & last_byte == 0) |-> (next_state_reset == 3'b100));
assert property(@(posedge clk) (state_byte == BYTE_1 & size_in == 2'b10) |-> (next_state_byte == BYTE_2));
assert property(@(posedge clk) (state_byte == BYTE_3 & size_in == 2'b01) |-> (last_byte == 0));
assert property(@(posedge clk) (state_full == 2'b11 & last_byte == 0) |-> (buffer_full == 1));
assert property(@(posedge clk) (state_reset == 3'b010 & last_byte == 0) |-> (next_state_reset == 3'b010));
assert property(@(posedge clk) (state_byte == BYTE_0 & (size_in == 2'b01 | size_in == 2'b10) & state_full!= 2'b11) |-> (byte_en == 1));
assert property(@(posedge clk) (state_full == 2'b01 & last_byte == 1 & write == 0) |-> (next_state_full == 2'b00));
assert property(@(posedge clk) (state_reset == 3'b010 & last_byte == 1 & write == 1) |-> (next_state_reset == 3'b011));
assert property(@(posedge clk) (state_full == 2'b10) |-> (has_data == 1));
assert property(@(posedge clk) (state_byte!= BYTE_0 & size_in == 2'b10 & state_full!= 2'b11) |-> (bypass_size == 1));
assert property(@(posedge clk) (state_byte == BYTE_0 & size_in == 2'b01) |-> (last_byte == 0));
assert property(@(posedge clk) (state_full == 2'b01) |-> (has_data == 0));
assert property(@(posedge clk) (state_byte == BYTE_1 & size_in == 2'b10) |-> (last_byte == 0));
assert property(@(posedge clk) (state_byte == BYTE_2 & size_in == 2'b01) |-> (last_byte == 0));
assert property(@(posedge clk) (state_byte == BYTE_1 & size_in == 2'b01 & write == 0 & has_data == 0) |-> (next_state_byte == IDLE));
assert property(@(posedge clk) (state_full == 2'b10 & last_byte == 0 & write == 1) |-> (next_state_full == 2'b10));
assert property(@(posedge clk) (state_byte == BYTE_0 & size_in == 2'b10) |-> (last_byte == 0));
assert property(@(posedge clk) (state_byte!= IDLE) |-> (crc_out_en == 1));
assert property(@(posedge clk) (state_byte == IDLE) |-> (crc_out_en == 0));
assert property(@(posedge clk) (state_byte == BYTE_0 & size_in == 2'b00 & write == 0 & has_data == 0) |-> (next_state_byte == IDLE));
assert property(@(posedge clk) (state_byte == BYTE_0) |-> (byte_sel == BYTE_0));
assert property(@(posedge clk) (state_full == 2'b10 & last_byte == 1) |-> (buffer_full == 0));
assert property(@(posedge clk) (state_full == 2'b10 & last_byte == 0) |-> (buffer_full == 1));
assert property(@(posedge clk) (state_full == 2'b10 & last_byte == 1 & write == 0) |-> (next_state_full == 2'b01));
assert property(@(posedge clk) (state_full == 2'b11 & last_byte == 1) |-> (buffer_full == 0));
assert property(@(posedge clk) (state_byte == BYTE_1 & size_in == 2'b01 & (write == 1 | buffer_full == 1)) |-> (next_state_byte == BYTE_0));
assert property(@(posedge clk) (state_byte == BYTE_2 & size_in == 2'b00) |-> (last_byte == 0));

endmodule