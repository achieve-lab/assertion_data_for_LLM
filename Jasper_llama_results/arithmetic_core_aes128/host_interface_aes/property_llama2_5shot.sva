
//=====================================================================================
localparam AES_CR    = 4'd00;
localparam AES_SR    = 4'd01;
localparam AES_DINR  = 4'd02;
localparam AES_DOUTR = 4'd03;
localparam AES_KEYR0 = 4'd04;
localparam AES_KEYR1 = 4'd05;
localparam AES_KEYR2 = 4'd06;
localparam AES_KEYR3 = 4'd07;
localparam AES_IVR0  = 4'd08;
localparam AES_IVR1  = 4'd09;
localparam AES_IVR2  = 4'd10;
localparam AES_IVR3  = 4'd11;

//=============================================================================
// Operation Modes
//=============================================================================
localparam ENCRYPTION     = 2'b00;
localparam KEY_DERIVATION = 2'b01;
localparam DECRYPTION     = 2'b10;
localparam DECRYP_W_DERIV = 2'b11;

//=============================================================================
// AES Modes
//=============================================================================
localparam ECB = 2'b00;
localparam CBC = 2'b01;
localparam CTR = 2'b10;

//=============================================================================
// Resets Values
//=============================================================================
localparam AES_CR_RESET = 13'd0;
localparam AES_SR_RESET =  3'd0;

//=============================================================================
// Enable Value (Active High)
//=============================================================================
localparam ENABLE  = 1'b1;
localparam DISABLE = 1'b0;

//=============================================================================
// FSM STATES
//=============================================================================
localparam IDLE   = 3'd0;
localparam INPUT  = 3'd1;
localparam START  = 3'd2;
localparam WAIT   = 3'd3;
localparam OUTPUT = 3'd4;

module i_host_interface(
	input [31:0] col_bus,
input cnt_en,
input wr_err,
input first_block_set,
	input int_ccf,
	input col_rd_en,
	input [1:0] key_sel,
	input col_wr_en,
input [31:0] bus_out_mux,
	input [1:0] data_type,
input dma_in_en,
input enable,
	input [3:0] key_en,
input errc,
	input PWRITE,
	input [31:0] key_bus,
	input [31:0] PRDATA,
input [2:0] state, next_state,
	input [31:0] iv_bus,
	input [12:0] PWDATA,
input wr_err_en,
input ccf_ie,
	input [1:0] mode,
	input PCLK,
input enable_clear,
input aes_cr_wr_en,
input write_completed,
input [10:0] aes_cr,
input key_deriv,
	input start_core,
input [1:0] chmod_in,
	input dma_req_rd,
	input ccf_set,
input [1:0] mode_in,
input rd_err,
input ccf,
input dma_req,
	input PSEL,
	input [3:0] PADDR,
input read_en,
	input disable_core,
	input [3:0] iv_en,
input [31:0] bus_out,
input err_ie,
input access_permission,
	input [1:0] col_addr,
	input [3:0] iv_sel,
	input PENABLE,
input ccfc,
input read_completed,
	input dma_req_wr,
	input int_err,
	input [1:0] chmod,
input first_block_clear,
input dma_out_en,
input rd_err_en,
input [1:0] cnt,
	input PRESETn,
	input DEFAULT_CLOCK,
	input DEFAULT_RESET,
input write_en,
	input first_block
);

assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 16));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 41));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 18));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 8));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 5));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 15));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 6));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 20));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 31));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 37));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 50));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 51));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 7));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 34));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 26));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 54));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 61));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 4));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 9));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 28));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 1));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 27));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 11));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 58));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 62));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 0));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 25));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 44));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 10));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 35));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 23));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 42));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 21));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 63));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 47));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 59));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 52));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 13));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 57));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 33));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 49));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 46));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 24));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 29));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 30));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 2));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 38));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 43));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 40));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 53));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 36));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 39));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 55));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 17));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 22));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 56));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 48));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 3));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 60));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 12));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 19));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 32));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 14));
assert property(@(posedge DEFAULT_CLOCK)  (aes_cr[0]) |-> (state == 45));

endmodule