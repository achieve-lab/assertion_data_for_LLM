module i_host_interface(
	input [31:0] col_bus,
input cnt_en,
input wr_err,
input first_block_set,
	input int_ccf,
	input col_rd_en,
	input [1:0] key_sel,
	input col_wr_en,
input [31:0] bus_out_mux,
	input [1:0] data_type,
input dma_in_en,
input enable,
	input [3:0] key_en,
input errc,
	input PWRITE,
	input [31:0] key_bus,
	input [31:0] PRDATA,
input [2:0] state, next_state,
	input [31:0] iv_bus,
	input [12:0] PWDATA,
input wr_err_en,
input ccf_ie,
	input [1:0] mode,
	input PCLK,
input enable_clear,
input aes_cr_wr_en,
input write_completed,
input [10:0] aes_cr,
input key_deriv,
	input start_core,
input [1:0] chmod_in,
	input dma_req_rd,
	input ccf_set,
input [1:0] mode_in,
input rd_err,
input ccf,
input dma_req,
	input PSEL,
	input [3:0] PADDR,
input read_en,
	input disable_core,
	input [3:0] iv_en,
input [31:0] bus_out,
input err_ie,
input access_permission,
	input [1:0] col_addr,
	input [3:0] iv_sel,
	input PENABLE,
input ccfc,
input read_completed,
	input dma_req_wr,
	input int_err,
	input [1:0] chmod,
input first_block_clear,
input dma_out_en,
input rd_err_en,
input [1:0] cnt,
	input PRESETn,
	input DEFAULT_CLOCK,
	input DEFAULT_RESET,
input write_en,
	input first_block
);

assert property @(posedge PCLK) (enable && (state == IDLE) && (first_block == 1'b1) && (access_permission == 1'b1) && (first_block_set == 1'b1) && (cnt_en == 1'b1) && (enable_clear == 1'b0) && (first_block_clear == 1'b0) && (cnt == 2'b11) && (col_addr == 2'b11) && (col_wr_en == 1'b0) && (col_rd_en == 1'b0) && (wr_err_en == 1'b0) && (rd_err_en == 1'b0) && (dma_req == 1'b0) && (dma_req_wr == 1'b0) && (dma_req_rd == 1'b0) && (PRDATA == 32'd0) && (bus_out == 32'd0) && (bus_out_mux == 32'd0) && (aes_cr == 13'd0) && (wr_err == 3'd0) && (rd_err == 3'd0) && (ccf == 1'b0) && (state == IDLE) && (next_state == IDLE) && (mode_in == 2'b00) && (chmod_in == 2'b00) && (write_en == 1'b0) && (read_en == 1'b0) && (dma_out_en == 1'b0) && (dma_in_en == 1'b0) && (err_ie == 1'b0) && (ccf_ie == 1'b0) && (errc == 1'b0) && (ccfc == 1'b0) && (aes_cr_wr_en == 1'b0) && (wr_err_en == 1'b0) && (rd_err_en == 1'b0) && (write_completed == 1'b0) && (read_completed == 1'b0) && (key_deriv == 1'b0) && (key_en == 4'b0000) && (key_sel == 2'b00) && (iv_sel == 4'b0000) && (iv_en == 4'b0000) && (int_ccf == 1'b0) && (int_err == 1'b0) && (disable_core == 1'b1) && (cnt == 2'b11) && (enable == 1'b1) && (aes_cr_wr_en == 1'b0) && (mode_in == 2'b00) && (chmod_in == 2'b00) && (data_type == 2'b00) && (enable == 1'b1) && (aes_cr_wr_en == 1'b0) && (mode_in == 2'b00) && (chmod_in == 2'b00) && (data_type == 2'b00) && (enable == 1'b1) && (aes_cr_wr_en == 1'b0) && (mode_in == 2'b00) && (chmod_in == 2'b00) && (data_type == 2'b00) && (enable == 1'b1) && (aes_cr_wr_en == 1'b0) && (mode_in == 2'b00) && (chmod_in == 2'b00) && (data_type == 2'b00) && (enable == 1'b1) && (aes_cr_wr_en == 1'b0) && (mode_in == 2'b00) && (chmod_in == 2'b00) && (data_type == 2'b00) && (enable == 1'b1) && (aes_cr_wr_en == 1'b0) && (mode_in == 2'b00) && (chmod_in == 2'b00) && (data_type == 2'b00) && (enable == 1'b1) && (aes_cr_wr_en == 1'b0) && (mode_in == 2'b00) && (chmod_in == 2'b00) && (data_type == 2'b00) && (enable == 1'b1) && (aes_cr_wr_en == 1'b0) && (mode_in == 2'b00) && (chmod_in == 2'b00) && (data_type == 2'b00) && (enable == 1'b1) && (aes_cr_wr_en == 1'b0) && (mode_in == 2'b00) && (chmod_in == 2'b00) && (data_type == 2'b00) && (enable == 1'b1) && (aes_cr_wr_en == 1'b0) && (mode_in == 2'b00) && (chmod_in == 2'b00) && (data_type == 2'b00) && (enable ==
endmodule