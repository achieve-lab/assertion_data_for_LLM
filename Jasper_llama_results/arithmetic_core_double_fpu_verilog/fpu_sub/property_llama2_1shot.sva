module i_fpu_sub(
input		clk,
input   subtra_fraction_enable ,
input   small_is_nonzero,
input   diffshift_et_55, // when the difference ,
input   [51:0] mantissa_small,
input   diffshift_gt_exponent,
input   [54:0] subtra_shift_2 ,
input		rst,
input   [54:0] subtra_shift,
input   [54:0] diff,
input   [10:0] exponent_small,
input   small_is_denorm,
input   subtra_shift_nonzero ,
input		enable,
input   [10:0] exponent,
input   mana_gtet_manb,
input [6:0] 	diff_shift_2,
input   [10:0] exponent_large,
input   large_norm_small_denorm,
input   [10:0] exponent_a,
input   [10:0] exponent_b,
input	[63:0]	opa, opb,	  
input   in_norm_out_denorm ,
input   [54:0] subtra_shift_3,
input   large_is_denorm,
input [6:0] 	diff_shift,
input   [51:0] mantissa_b,
input   [10:0] exponent_diff,
input   [51:0] mantissa_a,
input   [55:0] diff_2,
input   [54:0] minuend,
input   [10:0] exponent_2,
input	[2:0]	fpu_op,
input   [51:0] mantissa_large,
input   expa_et_expb,
input   [54:0] diff_1,
input   expa_gt_expb,
input   a_gtet_b,
input   sign,
input   [54:0] subtrahend
);

assert property(@(posedge clk) (req1 == 1 & state == 0) |-> (gnt2 == 0));
assert property(@(posedge clk) (state == 1 & req2 == 1) |-> (gnt1 == 0));
assert property(@(posedge clk) (req1 == 1 & req2 == 0) |-> (gnt1 == 1));
assert property(@(posedge clk) (req1 == 0) |-> (gnt1 == 0));
assert property(@(posedge clk)  (gnt2) |-> (req2));
assert property(@(posedge clk)  (gnt1) |-> (req1));
assert property(@(posedge clk) (req2 == 0) |-> (gnt2 == 0));
assert property(@(posedge clk) (req2 == 1 & req1 == 0) |-> (gnt2 == 1));
assert property(@(posedge clk) (req2 == 1 & state == 1) |-> (gnt2 == 1));
assert property(@(posedge clk) (req1 == 1 & state == 0) |-> (gnt1 == 1));

endmodule