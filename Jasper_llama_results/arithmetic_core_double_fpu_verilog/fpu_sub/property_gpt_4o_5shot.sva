module i_fpu_sub(
input		clk,
input   subtra_fraction_enable ,
input   small_is_nonzero,
input   diffshift_et_55, // when the difference ,
input   [51:0] mantissa_small,
input   diffshift_gt_exponent,
input   [54:0] subtra_shift_2 ,
input		rst,
input   [54:0] subtra_shift,
input   [54:0] diff,
input   [10:0] exponent_small,
input   small_is_denorm,
input   subtra_shift_nonzero ,
input		enable,
input   [10:0] exponent,
input   mana_gtet_manb,
input [6:0] 	diff_shift_2,
input   [10:0] exponent_large,
input   large_norm_small_denorm,
input   [10:0] exponent_a,
input   [10:0] exponent_b,
input	[63:0]	opa, opb,	  
input   in_norm_out_denorm ,
input   [54:0] subtra_shift_3,
input   large_is_denorm,
input [6:0] 	diff_shift,
input   [51:0] mantissa_b,
input   [10:0] exponent_diff,
input   [51:0] mantissa_a,
input   [55:0] diff_2,
input   [54:0] minuend,
input   [10:0] exponent_2,
input	[2:0]	fpu_op,
input   [51:0] mantissa_large,
input   expa_et_expb,
input   [54:0] diff_1,
input   expa_gt_expb,
input   a_gtet_b,
input   sign,
input   [54:0] subtrahend
);

assert property(@(posedge clk)  (rst) |-> (exponent_a == 0 && exponent_b == 0 && mantissa_a == 0 && mantissa_b == 0 && expa_gt_expb == 0 && expa_et_expb == 0 && mana_gtet_manb == 0 && a_gtet_b == 0 && sign == 0 && exponent_small == 0 && exponent_large == 0 && mantissa_small == 0 && mantissa_large == 0 && small_is_denorm == 0 && large_is_denorm == 0 && large_norm_small_denorm == 0 && small_is_nonzero == 0 && exponent_diff == 0 && minuend == 0 && subtrahend == 0 && subtra_shift == 0 && subtra_shift_3 == 0 && diff_shift_2 == 0 && diff == 0 && diffshift_gt_exponent == 0 && diffshift_et_55 == 0 && diff_1 == 0 && exponent == 0 && exponent_2 == 0 && diff_2 == 0));assert property(@(posedge clk)  (enable) |-> (exponent_a == opa[62:52] && exponent_b == opb[62:52] && mantissa_a == opa[51:0] && mantissa_b == opb[51:0]));assert property(@(posedge clk)  (exponent_a > exponent_b) |-> (expa_gt_expb == 1));assert property(@(posedge clk)  (exponent_a == exponent_b) |-> (expa_et_expb == 1));assert property(@(posedge clk)  (mantissa_a >= mantissa_b) |-> (mana_gtet_manb == 1));assert property(@(posedge clk)  (expa_gt_expb || (expa_et_expb && mana_gtet_manb)) |-> (a_gtet_b == 1));assert property(@(posedge clk)  (a_gtet_b) |-> (sign == opa[63]));assert property(@(posedge clk)  (!a_gtet_b) |-> (sign == (!opb[63] ^ (fpu_op == 3'b000))));assert property(@(posedge clk)  (a_gtet_b) |-> (exponent_small == exponent_b && exponent_large == exponent_a && mantissa_small == mantissa_b && mantissa_large == mantissa_a));assert property(@(posedge clk)  (!a_gtet_b) |-> (exponent_small == exponent_a && exponent_large == exponent_b && mantissa_small == mantissa_a && mantissa_large == mantissa_b));assert property(@(posedge clk)  (!(exponent_small > 0)) |-> (small_is_denorm == 1));assert property(@(posedge clk)  (!(exponent_large > 0)) |-> (large_is_denorm == 1));assert property(@(posedge clk)  (small_is_denorm == 1 && large_is_denorm == 0) |-> (large_norm_small_denorm == 1));assert property(@(posedge clk)  ((exponent_small > 0) || |mantissa_small[51:0]) |-> (small_is_nonzero == 1));assert property(@(posedge clk)  (exponent_large - exponent_small - large_norm_small_denorm == exponent_diff));assert property(@(posedge clk)  ({!large_is_denorm, mantissa_large, 2'b00} == minuend));assert property(@(posedge clk)  ({!small_is_denorm, mantissa_small, 2'b00} == subtrahend));assert property(@(posedge clk)  (subtrahend >> exponent_diff == subtra_shift));assert property(@(posedge clk)  (subtra_fraction_enable) |-> (subtra_shift_3 == subtra_shift_2));assert property(@(posedge clk)  (!subtra_fraction_enable) |-> (subtra_shift_3 == subtra_shift));assert property(@(posedge clk)  (minuend - subtra_shift_3 == diff));assert property(@(posedge clk)  (diff_shift_2 > exponent_large) |-> (diffshift_gt_exponent == 1));assert property(@(posedge clk)  (diff_shift_2 == 55) |-> (diffshift_et_55 == 1));assert property(@(posedge clk)  (diffshift_gt_exponent) |-> (diff_1 == diff << exponent_large && exponent == 0));assert property(@(posedge clk)  (!diffshift_gt_exponent) |-> (diff_1 == diff << diff_shift_2 && exponent == (exponent_large - diff_shift_2)));assert property(@(posedge clk)  (diffshift_et_55) |-> (exponent_2 == 0));assert property(@(posedge clk)  (!diffshift_et_55) |-> (exponent_2 == exponent));assert property(@(posedge clk)  (in_norm_out_denorm) |-> (diff_2 == {1'b0, diff_1 >> 1}));assert property(@(posedge clk)  (!in_norm_out_denorm) |-> (diff_2 == {1'b0, diff_1}));
endmodule