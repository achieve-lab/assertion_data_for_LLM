module i_can_crc(
input         initialize,
input          crc_next,
input         enable,
input         clk,
input   [14:0] crc_tmp,
input         data,
input    [14:0] crc
);

assert property(@(posedge clk) (!crc_next && crc[14] == 1) |-> (crc_tmp == {crc[13:0], 1'b0}));
assert property(@(posedge clk) (enable &&!crc_next) |-> (crc == crc_tmp));
assert property(@(posedge clk) (enable && crc_next) |-> (crc == crc_tmp ^ 15'h4599));
assert property(@(posedge clk) (initialize) |-> (crc == 15'h0));
assert property(@(posedge clk) (crc_next && crc[14] == 0) |-> (crc_tmp == crc));
assert property(@(posedge clk)  (crc_next && crc[14] == 1) |-> (crc_tmp == crc));
assert property(@(posedge clk) (!crc_next && crc[14] == 0) |-> (crc_tmp == {crc[13:0], 1'b0}));

endmodule