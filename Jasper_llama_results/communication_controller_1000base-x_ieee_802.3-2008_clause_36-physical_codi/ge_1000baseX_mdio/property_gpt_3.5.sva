module i_ge_1000baseX_mdio(
   input              mdio,
   input [4:0] phy_addr, input phy_addr_shift,
   input [1:0] op_code, 
   input             mdio_out,
   input [15:0] data_in, input data_in_shift,
   input     strobe_wr,
   input [15:0] data_out, input data_out_load, data_out_shift, next ,
   input     [15:0]   data_rd,	op_code_shift ,
   input              reset, 
   // mdio/mdc state machine inputistered part.
   input st,
	 input st_latch,
   input [4:0] input_addr,
	 input input_addr_shift,
   input [3:0] present, 
   input [5:0] preamble_cnt,
   input             mdio_oe,
   input     [4:0]   data_addr,    
   input    [15:0]   data_wr, 
   input              mdc,
	input reg_addr_shift,
	input [4:0] reg_addr,
	input pos_cnt_inc,
	input pos_cnt,
	input st_match
);

assert property @(posedge mdc) disable iff (reset) (st_match |-> pos_cnt == 1);
assert property @(posedge mdc) disable iff (reset) (op_code_done & ~op_is_rd & ~op_is_wr) |-> (next == S_PREAMBLE);
assert property @(posedge mdc) disable iff (reset) (op_code_done & op_is_rd) |-> (next == S_RD_DATA);
assert property @(posedge mdc) disable iff (reset) (op_code_done & op_is_wr) |-> (next == S_WR_DATA);
assert property @(posedge mdc) disable iff (reset) (phy_addr_done & ~phy_addr_match) |-> (next == S_PREAMBLE);
assert property @(posedge mdc) disable iff (reset) (phy_addr_done & phy_addr_match) |-> (next == S_REG_ADDR);
assert property @(posedge mdc) disable iff (reset) (reg_addr_done & ~phy_addr_match) |-> (next == S_PREAMBLE);
assert property @(posedge mdc) disable iff (reset) (reg_addr_done & phy_addr_match) |-> (next == S_TA);
assert property @(posedge mdc) disable iff (reset) (ta1_done & op_is_rd) |-> (next == S_RD_DATA);
assert property @(posedge mdc) disable iff (reset) (ta1_done & op_is_wr) |-> (next == S_WR_COMMIT);
assert property @(posedge mdc) disable iff (reset) (data_done & op_is_wr) |-> (strobe_wr);
assert property @(posedge mdc) disable iff (reset) (data_done & op_is_rd) |-> (mdio_out == data_out[15]);
assert property @(posedge mdc) disable iff (reset) (data_done & op_is_rd) |-> (mdio_oe);
assert property @(posedge mdc) disable iff (reset) (data_done & op_is_rd) |-> (data_out_shift);
assert property @(posedge mdc) disable iff (reset) (data_done & op_is_wr) |-> (data_in_shift);
assert property @(posedge mdc) disable iff (reset) (data_done & op_is_wr) |-> (data_wr == data_in);
assert property @(posedge mdc) disable iff (reset) (data_done & op_is_wr) |-> (mdio_oe);
assert property @(posedge mdc) disable iff (reset) (data_done & op_is_wr) |-> (mdio_out == 1);
assert property @(posedge mdc) disable iff (reset) (preamble_match & ~mdio) |-> (next == S_ST);
assert property @(posedge mdc) disable iff (reset) (preamble_match & mdio) |-> (next == S_OP_CODE);
assert property @(posedge mdc) disable iff (reset) (op_code_done) |-> (op_code == {op_code[0], mdio});
assert property @(posedge mdc) disable iff (reset) (phy_addr_done) |-> (phy_addr == {phy_addr[3:0], mdio});
assert property @(posedge mdc) disable iff (reset) (reg_addr_done) |-> (reg_addr == {reg_addr[3:0], mdio});
assert property @(posedge mdc) disable iff (reset) (data_done) |-> (data_in == {data_in[14:0], mdio});
assert property @(posedge mdc) disable iff (reset) (data_done) |-> (data_out == {data_out[14:0], 1'b0});
assert property @(posedge mdc) disable iff (reset) (reset) |-> (present == S_PREAMBLE);
assert property @(posedge mdc) disable iff (reset) (reset) |-> (preamble_cnt == 0);
assert property @(posedge mdc) disable iff (reset) (reset) |-> (pos_cnt == 0);
assert property @(posedge mdc) disable iff (reset) (reset) |-> (st == 0);
assert property @(posedge mdc) disable iff (reset) (reset) |-> (st_latch == 0);
assert property @(posedge mdc) disable iff (reset) (reset) |-> (op_code == 0);
assert property @(posedge mdc) disable iff (reset) (reset) |-> (phy_addr == 0);
assert property @(posedge mdc) disable iff (reset) (reset) |-> (reg_addr == 0);
assert property @(posedge mdc) disable iff (reset) (reset) |-> (data_in == 0);
assert property @(posedge mdc) disable iff (reset) (reset
endmodule