module i_qmult(
	input [63:0] a_ext,
    input [31:0] a,
	input [63:0] a_mult,    
    input [63:0] flip,
        input [63:0] out,
        input [63:0] data,
    input [31:0] b,
	input [63:0] result,
	input [31:0] retVal,
	input [63:0] r_ext,
	input [63:0] b_mult,
	input [63:0] b_ext,
    input [31:0] c,
	input DEFAULT_CLOCK,
input DEFAULT_RESET
);

assert property(@(posedge DEFAULT_CLOCK) (assert property mult_overflow { @(posedge clk) disable iff (rst) (a[31] && b[31]) |-> $past(retVal[31] == 1));assert property(@(posedge DEFAULT_CLOCK)  } 
assert property mult_result { @(posedge clk) disable iff (rst) (a[31] && b[31]) |-> $past(retVal[30:0] == 32'h8000_0000));assert property(@(posedge DEFAULT_CLOCK)  } 
assert property mult_positive { @(posedge clk) disable iff (rst) (!a[31] && !b[31]) |-> $past(retVal[31] == 0));assert property(@(posedge DEFAULT_CLOCK)  } 
assert property mult_negative { @(posedge clk) disable iff (rst) (a[31] && b[31]) |-> $past(retVal[30:0] == 32'h7FFF_FFFF));assert property(@(posedge DEFAULT_CLOCK)  } 
assert property mult_zero { @(posedge clk) disable iff (rst) (a == 0 || b == 0) |-> $past(retVal == 0));assert property(@(posedge DEFAULT_CLOCK)  }));
endmodule