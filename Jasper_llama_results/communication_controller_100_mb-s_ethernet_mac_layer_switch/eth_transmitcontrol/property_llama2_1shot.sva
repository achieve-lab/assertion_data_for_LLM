parameter StateCount = 1'b0;
parameter read_fifo = 1'b0;
parameter StateLeftinQ = 1'b0;
parameter PreNib15State = 1'b0;
parameter Divided_2_clk=0;
module i_eth_transmitcontrol(
input [15:0]  LatchedTimerValue,
input [7:0] RxData,
input       RxStatusWriteLatched_sync2,
input       ReceivedPacketGood,
input        ResetSlotTimer,           // 
input       TxDoneIn,
input         DetectionWindow,          // Detection of the PAUSE frame is possible within this window
input        SlotFinished,             // 
input        PauseTimerEq0,            // 
input       RxStartFrm,
input       TxReset, 
input         OpCodeOK,                 // PAUSE opcode detected (0x0001)
input        ByteCntEq1,               // ByteCnt ,
input        ByteCntEq5,               // ByteCnt ,
input        ByteCntEq17,              // ByteCnt ,
input        ByteCntEq15,              // ByteCnt ,
input [15:0]  PauseTimer,
input        ByteCntEq16,              // ByteCnt ,
input       RxFlow,
input  [4:0]  ByteCnt,
input        IncrementSlotTimer,       // 
input [15:0] TypeLength,               // 0x8808
input       RxValid,
input  [2:0]  DlyCrcCnt,
input      Pause,
input       RxReset, 
input      ReceivedPauseFrm,
input         Divider2,
input       r_PassAll,
input         PauseTimerEq0_sync2,
input        ByteCntEq2,               // ByteCnt ,
input        ByteCntEq4,               // ByteCnt ,
input         ReceivedPauseFrmWAddr,
input       MRxClk,
input         TypeLengthOK,             // Type/Length field contains 0x8808
input [15:0]  AssembledTimerValue,
input [47:0] ReservedMulticast,        // 0x0180C2000001
input  [5:0]  SlotTimer,
input       DlyCrcEn,
input       TxUsedDataOutDetected,
input        ByteCntEq0,               // ByteCnt ,
input        ByteCntEq18,              // ByteCnt ,
input        DecrementPauseTimer,      // 
input       TxStartFrmOut,
input        ResetByteCnt,             // 
input        IncrementByteCnt,         // 
input        ByteCntEq3,               // ByteCnt ,
input        ByteCntEq13,              // ByteCnt ,
input       ReceiveEnd,
input      SetPauseTimer,
input         AddressOK,                // Multicast or unicast address detected
input         PauseTimerEq0_sync1,
input        ByteCntEq12,              // ByteCnt ,
input       RxEndFrm,
input        ByteCntEq14,              // ByteCnt ,
input       MTxClk,
input [47:0]MAC,
input       TxAbortIn,
input       ReceivedLengthOK
);

assert property(@(posedge MTxClk) (StateCount) |-> (ByteCnt < 12));
assert property(@(posedge MTxClk) (StateCount) |-> (TxBufferEmpty == 0));
assert property(@(posedge MTxClk) (StateCount) |-> (TxBufferFull == 0));
assert property(@(posedge MTxClk) (StateCount) |-> (MAC == 0));
assert property(@(posedge MTxClk) (StateCount) |-> (TxStartFrmIn == 0));
assert property(@(posedge MTxClk) (StateCount) |-> (Divided_2_clk == 0));
assert property(@(posedge MTxClk) (StateCount) |-> (PreNib15State < 8));
assert property(@(posedge MTxClk) (StateCount) |-> (TxEndFrmIn == 0));
assert property(@(posedge MTxClk) (StateCount) |-> (TxDataIn == 0));
assert property(@(posedge MTxClk) (StateCount) |-> (TxAbortIn == 0));
assert property(@(posedge MTxClk) (StateCount) |-> (TxBufferAlmostEmpty == 0));
assert property(@(posedge MTxClk) (StateCount) |-> (write_fifo));
assert property(@(posedge MTxClk) (StateCount) |-> (TxData_wrapped_out == 0));
assert property(@(posedge MTxClk) (StateCount) |-> (TxData_wrapped_out_wire == 0));
assert property(@(posedge MTxClk) (StateCount) |-> (read_fifo));
assert property(@(posedge MTxClk) (StateCount) |-> (TxFifoClear == 0));
assert property(@(posedge MTxClk) (StateCount) |-> (DMAC == 0));
assert property(@(posedge MTxClk) (StateCount) |-> (txfifo_cnt == 0));
assert property(@(posedge MTxClk) (StateCount) |-> (TxEndFrmOut_uc == 0));
assert property(@(posedge MTxClk) (StateCount) |-> (TxBufferAlmostFull == 0));

endmodule