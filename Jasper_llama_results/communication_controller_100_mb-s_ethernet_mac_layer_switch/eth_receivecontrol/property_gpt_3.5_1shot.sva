module i_eth_receivecontrol(
input [15:0]  LatchedTimerValue,
input [7:0] RxData,
input       RxStatusWriteLatched_sync2,
input       ReceivedPacketGood,
input        ResetSlotTimer,           // 
input       TxDoneIn,
input         DetectionWindow,          // Detection of the PAUSE frame is possible within this window
input        SlotFinished,             // 
input        PauseTimerEq0,            // 
input       RxStartFrm,
input       TxReset, 
input         OpCodeOK,                 // PAUSE opcode detected (0x0001)
input        ByteCntEq1,               // ByteCnt ,
input        ByteCntEq5,               // ByteCnt ,
input        ByteCntEq17,              // ByteCnt ,
input        ByteCntEq15,              // ByteCnt ,
input [15:0]  PauseTimer,
input        ByteCntEq16,              // ByteCnt ,
input       RxFlow,
input  [4:0]  ByteCnt,
input        IncrementSlotTimer,       // 
input [15:0] TypeLength,               // 0x8808
input       RxValid,
input  [2:0]  DlyCrcCnt,
input      Pause,
input       RxReset, 
input      ReceivedPauseFrm,
input         Divider2,
input       r_PassAll,
input         PauseTimerEq0_sync2,
input        ByteCntEq2,               // ByteCnt ,
input        ByteCntEq4,               // ByteCnt ,
input         ReceivedPauseFrmWAddr,
input       MRxClk,
input         TypeLengthOK,             // Type/Length field contains 0x8808
input [15:0]  AssembledTimerValue,
input [47:0] ReservedMulticast,        // 0x0180C2000001
input  [5:0]  SlotTimer,
input       DlyCrcEn,
input       TxUsedDataOutDetected,
input        ByteCntEq0,               // ByteCnt ,
input        ByteCntEq18,              // ByteCnt ,
input        DecrementPauseTimer,      // 
input       TxStartFrmOut,
input        ResetByteCnt,             // 
input        IncrementByteCnt,         // 
input        ByteCntEq3,               // ByteCnt ,
input        ByteCntEq13,              // ByteCnt ,
input       ReceiveEnd,
input      SetPauseTimer,
input         AddressOK,                // Multicast or unicast address detected
input         PauseTimerEq0_sync1,
input        ByteCntEq12,              // ByteCnt ,
input       RxEndFrm,
input        ByteCntEq14,              // ByteCnt ,
input       MTxClk,
input [47:0]MAC,
input       TxAbortIn,
input       ReceivedLengthOK
);

assert property(@(posedge MRxClk) (RxReset) |-> (AddressOK == 0));assert property(@(posedge MRxClk) (RxData[7:0] == ReservedMulticast[47:40] | RxData[7:0] == MAC[47:40]) & DetectionWindow & ByteCntEq0 |-> (AddressOK == 1));assert property(@(posedge MRxClk) (RxData[7:0] == ReservedMulticast[39:32] | RxData[7:0] == MAC[39:32]) & AddressOK & DetectionWindow & ByteCntEq1 |-> (AddressOK == 1));assert property(@(posedge MRxClk) (RxData[7:0] == ReservedMulticast[31:24] | RxData[7:0] == MAC[31:24]) & AddressOK & DetectionWindow & ByteCntEq2 |-> (AddressOK == 1));assert property(@(posedge MRxClk) (RxData[7:0] == ReservedMulticast[23:16] | RxData[7:0] == MAC[23:16]) & AddressOK & DetectionWindow & ByteCntEq3 |-> (AddressOK == 1));assert property(@(posedge MRxClk) (RxData[7:0] == ReservedMulticast[15:8] | RxData[7:0] == MAC[15:8]) & AddressOK & DetectionWindow & ByteCntEq4 |-> (AddressOK == 1));assert property(@(posedge MRxClk) (RxData[7:0] == ReservedMulticast[7:0] | RxData[7:0] == MAC[7:0]) & AddressOK & DetectionWindow & ByteCntEq5 |-> (AddressOK == 1));assert property(@(posedge MRxClk) (ReceiveEnd) |-> (AddressOK == 0));assert property(@(posedge MRxClk) (RxReset) |-> (TypeLengthOK == 0));assert property(@(posedge MRxClk) (ByteCntEq12 & (RxData[7:0] == TypeLength[15:8])) & DetectionWindow & TypeLengthOK |-> (TypeLengthOK == 1));assert property(@(posedge MRxClk) (ByteCntEq13 & (RxData[7:0] == TypeLength[7:0])) & TypeLengthOK & DetectionWindow |-> (TypeLengthOK == 1));assert property(@(posedge MRxClk) (ReceiveEnd) |-> (TypeLengthOK == 0));assert property(@(posedge MRxClk) (RxReset) |-> (OpCodeOK == 0));assert property(@(posedge MRxClk) (ByteCntEq16) |-> (OpCodeOK == 0));assert property(@(posedge MRxClk) (ByteCntEq14 & RxData[7:0] == 8'h00) & DetectionWindow & OpCodeOK |-> (OpCodeOK == 1));assert property(@(posedge MRxClk) (ByteCntEq15 & RxData[7:0] == 8'h01) & OpCodeOK & DetectionWindow |-> (OpCodeOK == 1));assert property(@(posedge MRxClk) (RxReset) |-> (ReceivedPauseFrmWAddr == 0));assert property(@(posedge MRxClk) (ReceiveEnd) |-> (ReceivedPauseFrmWAddr == 0));assert property(@(posedge MRxClk) (ByteCntEq16 & TypeLengthOK & OpCodeOK & AddressOK) |-> (ReceivedPauseFrmWAddr == 1));assert property(@(posedge MRxClk) (RxReset) |-> (AssembledTimerValue == 16'h0));assert property(@(posedge MRxClk) (RxStartFrm) |-> (AssembledTimerValue == 16'h0));assert property(@(posedge MRxClk) (RxData[7:0]) & DetectionWindow & ByteCntEq16 |-> (AssembledTimerValue[15:8] == RxData[7:0]));assert property(@(posedge MRxClk) (RxData[7:0]) & DetectionWindow & ByteCntEq17 |-> (AssembledTimerValue[7:0] == RxData[7:0]));assert property(@(posedge MRxClk) (RxReset) |-> (DetectionWindow == 1));assert property(@(posedge MRxClk) (ByteCntEq18) |-> (DetectionWindow == 0));assert property(@(posedge MRxClk) (ReceiveEnd) |-> (DetectionWindow == 1));assert property(@(posedge MRxClk) (RxReset) |-> (LatchedTimerValue == 16'h0));assert property(@(posedge MRxClk) (ReceivedPauseFrmWAddr & ByteCntEq18 & DetectionWindow) |-> (LatchedTimerValue == AssembledTimerValue));assert property(@(posedge MRxClk) (ReceiveEnd) |-> (LatchedTimerValue == 16'h0));assert property(@(posedge MRxClk) (RxReset) |-> (DlyCrcCnt == 3'h0));assert property(@(posedge MRxClk) (RxValid & RxEndFrm) |-> (DlyCrcCnt == 3'h0));assert property(@(posedge MRxClk) (RxValid & ~RxEndFrm & ~DlyCrcCnt[2]) |-> (DlyCrcCnt == DlyCrcCnt + 3'd1));assert property(@(posedge MRxClk) (RxReset) |-> (ByteCnt == 5'h0));assert property(@(posedge MRxClk) (ResetByteCnt) |-> (ByteCnt == 5'h0));assert property(@(posedge MRxClk) (IncrementByteCnt) |-> (ByteCnt == ByteCnt + 5'd1));assert property(@(posedge MRxClk) (RxValid & ByteCnt == 5'h0) |-> (ByteCntEq0 == 1));assert property(@(posedge MRxClk) (RxValid & ByteCnt == 5'h1) |-> (ByteCntEq1 == 1));assert property(@(posedge MRxClk) (RxValid & ByteCnt == 5'h2) |-> (ByteCntEq2 == 1));assert property(@(posedge MRxClk) (RxValid & ByteCnt == 5'h3) |-> (Byte);
endmodule