module i_eth_txcounters(
input HugEn,              // Pakets bigger then MaxFL enabled
input ResetByteCnt,
input StartJam,           // Jam state will be activated in next clock
input StateDefer,         // Defer state
input ByteCntMax,
input StateIPG,           // IPG state
input MTxClk,             // Tx clock
input NibbleMinFl,       // Nibble counter is greater than the minimum frame length
input PacketFinished_q,             
input DlyCrcEn,           // Delayed CRC enabled
input StartDefer,         // Defer state will be activated in next clock
input StateJam,           // Jam state
input StartIPG,           // IPG state will be activated in next clock
input [15:0] MaxFL,       // Miximum frame length (in bytes)
input [15:0] ByteCnt,
input StateFCS,           // FCS state
input Reset,              // Reset
input ExDfrEn,            // Excessive deferral enabled
input NibCntEq15,        // Nibble counter is equal to 15
input IncrementByteCnt,
input TxStartFrm,         // Tx start frame
input [15:0] MinFL,       // Minimum frame length (in bytes)
input IncrementNibCnt,
input [2:0] DlyCrcCnt,   // Delayed CRC Count
input StatePAD,           // PAD state
input [1:0] StateData,    // Data state
input StateBackOff,       // Backoff state
input StateSFD,           // SFD state
input StateIdle,          // Idle state
input ResetNibCnt,
input StartBackoff,       // Backoff state will be activated in next clock
input [15:0] NibCnt,
input NibCntEq7,         // Nibble counter is equal to 7
input ExcessiveDeferCnt,
input StatePreamble,      // Preamble state
input ExcessiveDefer,    // Excessive Deferral occuring
input MaxFrame,          // Maximum frame occured
input StartFCS           // FCS state will be activated in next clock
);

assert property(@(posedge MTxClk)     (NibCntEq7) |-> (NibCnt[7] == 1'h1));
assert property(@(posedge MTxClk)     (NibbleMinFl) |-> (NibCnt[13:0] >= (((MinFL-16'd4)<<1) -1)));
assert property(@(posedge MTxClk)     (ByteCntMax) |-> (&ByteCnt[15:0]));
assert property(@(posedge MTxClk)      (NibCntEq7) |-> (StateJam));
assert property(@(posedge MTxClk)     (ExcessiveDeferCnt) |-> (NibCnt[13:0] == 14'h17b7));
assert property(@(posedge MTxClk)     (ExcessiveDefer) |-> (NibCnt[13:0] == 14'h17b7 & ~ExDfrEn));
assert property(@(posedge MTxClk)     (NibCntEq7) |-> (NibCnt[6:0] == 7'h0));
assert property(@(posedge MTxClk)     (MaxFrame) |-> (ByteCnt[15:0] == MaxFL[15:0] & ~HugEn));
assert property(@(posedge MTxClk)     (NibCntEq15) |-> (NibCnt[6:0] == 7'h0));
assert property(@(posedge MTxClk)     (DlyCrcCnt == 3'h0) |-> (DlyCrcCnt[2:0] == 3'h0));
assert property(@(posedge MTxClk)     (NibCntEq15) |-> (StatePreamble));
assert property(@(posedge MTxClk)     (NibCntEq15) |-> (NibCnt[7] == 1'h1));

endmodule