module i_eth_random(
input  [9:0] RandomLatched,
input [15:0] NibCnt,
input Feedback,
input [9:0] Random,
input StateJam_q,
input [9:0] ByteCnt,
input RandomEqByteCnt,
input MTxClk,
input RandomEq0,
input [9:0] x,
input [3:0] RetryCnt,
input StateJam,
input Reset
);

assert property(@(posedge MTxClk)  (StateJam & StateJam_q) |-> (RandomLatched == Random));
assert property(@(posedge MTxClk)  (Random[3] == 1) |-> (x[3]));
assert property(@(posedge MTxClk)  (RandomLatched == Random) |-> (RandomLatched <=);
assert property(@(posedge MTxClk)  (x[5] == 0) |-> (Random[5]));
assert property(@(posedge MTxClk)  (Random[4] == 1) |-> (x[4]));
assert property(@(posedge MTxClk)  (Random[7] == x[7]) |-> (x[9:0] == {x[8:0], Feedback}));
assert property(@(posedge MTxClk)  (RandomLatched == 10'h0) |-> (Reset));
assert property(@(posedge MTxClk)  (RandomEq0) |-> (RandomLatched == 10'h0));
assert property(@(posedge MTxClk)  (Random[6] == x[6]) |-> (x[9:0] == {x[8:0], Feedback}));
assert property(@(posedge MTxClk)  (RetryCnt > 8) |-> (Random[8] == x[8]));
assert property(@(posedge MTxClk)  (Random[6] == 1) |-> (x[6]));
assert property(@(posedge MTxClk)  (Random[7] == 1) |-> (x[7]));
assert property(@(posedge MTxClk)  (RetryCnt > 7) |-> (Random[7] == x[7]));
assert property(@(posedge MTxClk)  (RetryCnt > 9) |-> (Random[9] == x[9]));
assert property(@(posedge MTxClk)  (x[7] == 0) |-> (Random[7]));
assert property(@(posedge MTxClk)  (Random[5] == 1) |-> (x[5]));
assert property(@(posedge MTxClk)  (x[8] == 0) |-> (Random[8]));
assert property(@(posedge MTxClk)  (x[9] == 0) |-> (Random[9]));
assert property(@(posedge MTxClk)  (RetryCnt > 1) |-> (Random[1] == x[1]));
assert property(@(posedge MTxClk)  (RetryCnt > 6) |-> (Random[6] == x[6]));
assert property(@(posedge MTxClk)  (Random[8] == x[8]) |-> (x[9:0] == {x[8:0], Feedback}));
assert property(@(posedge MTxClk)  (RandomLatched == 10'h0) |-> (RandomEq0));
assert property(@(posedge MTxClk)  (Random[0] == x[0]) |-> (x[9:0] == {x[8:0], Feedback}));
assert property(@(posedge MTxClk)  (x[9:0] == 0) |-> (Reset));
assert property(@(posedge MTxClk)  (Random[1] == x[1]) |-> (x[9:0] == {x[8:0], Feedback}));
assert property(@(posedge MTxClk)  (x[9] == 1) |-> (Feedback));
assert property(@(posedge MTxClk)  (RandomLatched == Random) |-> (StateJam & StateJam_q));
assert property(@(posedge MTxClk)  (x[3] == 0) |-> (Random[3]));
assert property(@(posedge MTxClk)  (&NibCnt[6:0]) |-> (RandomEqByteCnt));
assert property(@(posedge MTxClk)  (Random[8] == 1) |-> (x[8]));
assert property(@(posedge MTxClk)  (x[2] == 0) |-> (Random[2]));
assert property(@(posedge MTxClk)  (ByteCnt[9:0] == RandomLatched) |-> (RandomEqByteCnt));
assert property(@(posedge MTxClk)  (x[2] == 0) |-> (Feedback));
assert property(@(posedge MTxClk)  (RetryCnt > 4) |-> (Random[4] == x[4]));
assert property(@(posedge MTxClk)  (Random[4] == x[4]) |-> (x[9:0] == {x[8:0], Feedback}));
assert property(@(posedge MTxClk)  (Random[9] == x[9]) |-> (x[9:0] == {x[8:0], Feedback}));
assert property(@(posedge MTxClk)  (x[4] == 0) |-> (Random[4]));
assert property(@(posedge MTxClk)  (Random[3] == x[3]) |-> (x[9:0] == {x[8:0], Feedback}));
assert property(@(posedge MTxClk)  (Random[2] == 1) |-> (x[2]));
assert property(@(posedge MTxClk)  (Random[2] == x[2]) |-> (x[9:0] == {x[8:0], Feedback}));
assert property(@(posedge MTxClk)  (RandomEqByteCnt) |-> (&NibCnt[6:0]));
assert property(@(posedge MTxClk)  (RetryCnt > 2) |-> (Random[2] == x[2]));
assert property(@(posedge MTxClk)  (Random[5] == x[5]) |-> (x[9:0] == {x[8:0], Feedback}));
assert property(@(posedge MTxClk)  (x[0] == 0) |-> (Random[0]));
assert property(@(posedge MTxClk)  (RandomEqByteCnt) |-> (ByteCnt[9:0] == RandomLatched));
assert property(@(posedge MTxClk)  (x[1] == 0) |-> (Random[1]));
assert property(@(posedge MTxClk)  (x[6] == 0) |-> (Random[6]));
assert property(@(posedge MTxClk)  (Random[1] == 1) |-> (x[1]));
assert property(@(posedge MTxClk)  (Random[0] == 1) |-> (x[0]));
assert property(@(posedge MTxClk)  (Random[9] == 1) |-> (x[9]));
assert property(@(posedge MTxClk)  (RetryCnt > 3) |-> (Random[3] == x[3]));
assert property(@(posedge MTxClk)  (x[2] == 1) |-> (Feedback));
assert property(@(posedge MTxClk)  (x[9] == 0) |-> (Feedback));
assert property(@(posedge MTxClk)  (RetryCnt > 5) |-> (Random[5] == x[5]));

endmodule