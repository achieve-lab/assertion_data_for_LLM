module i_rxNumCounter(
    input reset, //globe reset
    input receiving, //start to count	data field
    input rxclk,            //receive clk	
    input en,
    input value,
    input load, 
    input[`COUNTER_WIDTH-1:0] frame_cnt
);

assert property(@(posedge rxclk) (rxclk == 0 & reset == 0) |-> (frame_cnt == frame_cnt));
assert property(@(posedge rxclk) (rxclk == 0 & reset == 1 & receiving == 1) |-> (frame_cnt == 0));
assert property(@(posedge rxclk) (rxclk == 0 & reset == 1 & receiving == 0 & frame_cnt == 0) |-> (frame_cnt == 0));
assert property(@(posedge rxclk) (rxclk == 0 & reset == 0 & receiving == 1 & frame_cnt == 0) |-> (frame_cnt == 0));
assert property(@(posedge rxclk) (rxclk == 0 & reset == 1 & receiving == 1 & frame_cnt == 0) |-> (frame_cnt == 0));
assert property(@(posedge rxclk) (reset == 1) |-> (frame_cnt == 0));
assert property(@(posedge rxclk) (receiving == 0) |-> (frame_cnt == frame_cnt));
assert property(@(posedge rxclk) (rxclk == 0 & reset == 1) |-> (frame_cnt == 0));
assert property(@(posedge rxclk) (rxclk == 1 & reset == 1 & receiving == 0) |-> (frame_cnt == 0));
assert property(@(posedge rxclk) (rxclk == 0) |-> (frame_cnt == frame_cnt));
assert property(@(posedge rxclk) (rxclk == 1 & reset == 0 & receiving == 1) |-> (frame_cnt == frame_cnt + 1));
assert property(@(posedge rxclk) (rxclk == 1 & reset == 1) |-> (frame_cnt == 0));
assert property(@(posedge rxclk) (rxclk == 1 & reset == 1 & receiving == 0 & frame_cnt == 0) |-> (frame_cnt == 0));
assert property(@(posedge rxclk) (rxclk == 1) |-> (frame_cnt == frame_cnt));
assert property(@(posedge rxclk) (rxclk == 1 & reset == 1 & receiving == 1 & frame_cnt == 0) |-> (frame_cnt == 0));
assert property(@(posedge rxclk) (rxclk == 0 & reset == 1 & receiving == 0 & frame_cnt!= 0) |-> (frame_cnt == 0));
assert property(@(posedge rxclk) (rxclk == 0 & reset == 1 & receiving == 0) |-> (frame_cnt == 0));
assert property(@(posedge rxclk) (rxclk == 1 & reset == 0 & receiving == 0 & frame_cnt!= 0) |-> (frame_cnt == frame_cnt));
assert property(@(posedge rxclk) (rxclk == 0 & reset == 0 & receiving == 0) |-> (frame_cnt == frame_cnt));
assert property(@(posedge rxclk) (rxclk == 0 & reset == 0 & receiving == 1) |-> (frame_cnt == frame_cnt));
assert property(@(posedge rxclk) (receiving == 1) |-> (frame_cnt == frame_cnt + 1)
            Test Program:`include "timescale.v");
assert property(@(posedge rxclk) (reset == 0) |-> (frame_cnt == frame_cnt));
assert property(@(posedge rxclk) (rxclk == 1 & reset == 1 & receiving == 0 & frame_cnt!= 0) |-> (frame_cnt == 0));
assert property(@(posedge rxclk) (rxclk == 1 & reset == 0 & receiving == 1 & frame_cnt == 0) |-> (frame_cnt == 1));
assert property(@(posedge rxclk) (rxclk == 0 & reset == 1 & receiving == 1 & frame_cnt!= 0) |-> (frame_cnt == 0));
assert property(@(posedge rxclk) (rxclk == 1 & reset == 0 & receiving == 0) |-> (frame_cnt == frame_cnt));
assert property(@(posedge rxclk) (rxclk == 0 & reset == 0 & receiving == 1 & frame_cnt!= 0) |-> (frame_cnt == frame_cnt));
assert property(@(posedge rxclk) (rxclk == 1 & reset == 1 & receiving == 1 & frame_cnt!= 0) |-> (frame_cnt == 0));
assert property(@(posedge rxclk) (rxclk == 0 & reset == 0 & receiving == 0 & frame_cnt == 0) |-> (frame_cnt == 0));
assert property(@(posedge rxclk) (rxclk == 1 & reset == 0 & receiving == 1 & frame_cnt!= 0) |-> (frame_cnt == frame_cnt + 1));
assert property(@(posedge rxclk) (rxclk == 1 & reset == 0 & receiving == 0 & frame_cnt == 0) |-> (frame_cnt == 0));
assert property(@(posedge rxclk) (rxclk == 1 & reset == 1 & receiving == 1) |-> (frame_cnt == 0));
assert property(@(posedge rxclk)  (rxclk == 1 & reset == 1) |-> (frame_cnt == 0));
assert property(@(posedge rxclk) (rxclk == 0 & reset == 0 & receiving == 0 & frame_cnt!= 0) |-> (frame_cnt == frame_cnt));

endmodule