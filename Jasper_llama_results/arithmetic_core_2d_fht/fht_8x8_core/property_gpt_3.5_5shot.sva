parameter N = 8;

module i_fht_8x8_core(
input			x_valid,
	// input data
input			fht_2d_valid,
input	[N+2:0]	fht_1d_data,
input			fht_1d_valid,
input	[N+2:0]	mem_data,
input	[N+5:0]	fht_2d_data,
input [N:0] stg1_sum2,
input [N+1:0] stg2_sum1,
input                   rstn,
input [N+1:0] stg2_sub1,
// Data input [N-1:0] ,
input [N+2:0] stg3_sum1,
        // input data - x0,x1,x2,x3,x4,x5,x6,x7,x0,x1...
input [N+2:0] stg3_sub3,
input h6_valid,
input   fht_valid_or,
input h4_valid,
input [N+1:0] stg2_sub3,
input [N:0] mult_dat_1,
input [N+2:0] stg3_sub1,
input [13:0] xi_ready_d,
        // 1D FHT input data - h0,h1,h2,h3,h4,h5,h6,h7,h0,h1...
input [2:0] cnt,
input [N+1:0] stg2_sum3,
input h7_valid,
input h0_valid,
input [N+1:0] mult_res1,
input [N:0] stg1_sum4,
input x_valid_1d,
input [N-1:0] x0,x1,x2,x3,x4,x5,x6,x7,
input [N+2:0] stg3_sub2,
input h2_valid,
input h5_valid,
input [N+2:0] h0_FF,h1_FF,h2_FF,h3_FF,h4_FF,h5_FF,h6_FF,h7_FF,
input [N+1:0] mult_res2,
input h3_valid,
input [N:0] stg1_sub1,
input [N:0] stg1_sub2,
input [N+2:0] stg3_sum3,
input   [N+2:0] fht_data,
input h1_valid,
input [N+2:0] stg3_sum2,
input xi_ready,
input [N+2:0] stg3_sum4,
input [N+2:0] stg3_sub4,
input   [N-1:0] x_data,
input [N-1:0] x0_FF,x1_FF,x2_FF,x3_FF,x4_FF,x5_FF,x6_FF,x7_FF,
input                   sclk,
input [N:0] stg1_sum3,
input [N+1:0] stg2_sub2,
input [N:0] stg1_sub3,
input [N:0] stg1_sub4,
input [N+1:0] stg2_sum2,
input                   fht_valid,
input [N:0] mult_dat_2,
input [N+2:0] h_or_data,
input [N:0] stg1_sum1,

input [15:0] rd_DATA,
input           indicator,                              // 64 words written - Indication(pos. or neg. edge)
input                   mem_valid,
input           cnt128d_rd_valid_start, // Counter start increment
input [6:0]     cnt128d_wr,                             // Write Mode Counter
input   [N-1:0] inp_data,
input           wr_WEN,
input                   indicator_1d,                   // Indication 1 clock delay
input           rd_CSN,
input           indicator_pos_edge,             // positive edge
input [ 6:0] wr_ADDR,
input [15:0] wr_DATA,
input           cnt128d_rd_valid_stop,  // Counter stop increment
input           wr_CSN,
input           indicator_neg_edge,             // negative edge
input                   inp_valid,
input   [6:0]   cnt128d_rd,                             // Read Counter
input [ 6:0] rd_ADDR,
input                   cnt128d_rd_valid,               // valid time for cnt128d_rd counter
input [N-1:0] b_FF,
input   [N  :0] c, // additive input
input [N-1:0] a_FF,
input                   clk,
        input [N-1:0] ainv,
input   [N-1:0] b, // input
input                   valid,
        input [N:0] plus1,
input   [N  :0] d, // subtractive input
        input  ci,
input   [N-1:0] a, // input
        input [N-1:0] co,
        input [N-1:0] sum,
input DEFAULT_CLOCK,
input DEFAULT_RESET

);

assert property(@(posedge sclk) (fht_1d_valid && fht_2d_valid) |-> (fht_1d_data == fht_2d_data));assert property(@(posedge sclk)  (fht_1d_valid && fht_2d_valid) |-> (fht_1d_data != 0));assert property(@(posedge sclk)  (fht_1d_valid && fht_2d_valid) |-> (fht_2d_data != 0));assert property(@(posedge sclk)  (fht_1d_valid && fht_2d_valid) |-> (fht_2d_data == fht_1d_data));
endmodule