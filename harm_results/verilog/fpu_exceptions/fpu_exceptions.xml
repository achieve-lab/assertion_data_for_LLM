<harm>
	<context name="default">

		<prop exp="fpu_exceptions_::underflow" loc="c,dt"/>
		<prop exp="fpu_exceptions_::subtract" loc="c,dt"/>
		<prop exp="fpu_exceptions_::round_to_pos_inf" loc="c,dt"/>
		<prop exp="fpu_exceptions_::round_to_neg_inf" loc="c,dt"/>
		<prop exp="fpu_exceptions_::overflow_trigger" loc="c,dt"/>
		<prop exp="fpu_exceptions_::overflow" loc="c,dt"/>
		<prop exp="fpu_exceptions_::out_inf_trigger" loc="c,dt"/>
		<numeric clsEffort="0.1" exp="fpu_exceptions_::out" loc="c,dt"/>
		<prop exp="fpu_exceptions_::out_neg_inf" loc="c,dt"/>
		<prop exp="fpu_exceptions_::opb_pos_inf" loc="c,dt"/>
		<prop exp="fpu_exceptions_::opb_neg_inf" loc="c,dt"/>
		<prop exp="fpu_exceptions_::opb_inf" loc="c,dt"/>
		<prop exp="fpu_exceptions_::opb_SNaN" loc="c,dt"/>
		<prop exp="fpu_exceptions_::opb_QNaN" loc="c,dt"/>
		<numeric clsEffort="0.1" exp="fpu_exceptions_::out_inf" loc="c,dt"/>
		<prop exp="fpu_exceptions_::opa_inf" loc="c,dt"/>
		<prop exp="fpu_exceptions_::opa_et_zero" loc="c,dt"/>
		<prop exp="fpu_exceptions_::opa_SNaN" loc="c,dt"/>
		<prop exp="fpu_exceptions_::opa_QNaN" loc="c,dt"/>
		<prop exp="fpu_exceptions_::multiply" loc="c,dt"/>
		<numeric clsEffort="0.1" exp="fpu_exceptions_::out_0" loc="c,dt"/>
		<prop exp="fpu_exceptions_::mul_uf" loc="c,dt"/>
		<prop exp="fpu_exceptions_::invalid_trigger" loc="c,dt"/>
		<prop exp="fpu_exceptions_::input_et_zero" loc="c,dt"/>
		<prop exp="fpu_exceptions_::opb_et_zero" loc="c,dt"/>
		<prop exp="fpu_exceptions_::mul_0_by_inf" loc="c,dt"/>
		<prop exp="fpu_exceptions_::inf_round_down_trigger" loc="c,dt"/>
		<numeric clsEffort="0.1" exp="fpu_exceptions_::out_2" loc="c,dt"/>
		<numeric clsEffort="0.1" exp="fpu_exceptions_::inf_round_down" loc="c,dt"/>
		<prop exp="fpu_exceptions_::inexact" loc="c,dt"/>
		<prop exp="fpu_exceptions_::mul_inf" loc="c,dt"/>
		<numeric clsEffort="0.1" exp="fpu_exceptions_::NaN_output" loc="c,dt"/>
		<prop exp="fpu_exceptions_::round_to_zero" loc="c,dt"/>
		<prop exp="fpu_exceptions_::NaN_input" loc="c,dt"/>
		<prop exp="fpu_exceptions_::div_by_inf" loc="c,dt"/>
		<prop exp="fpu_exceptions_::clk" loc="c,dt"/>
		<numeric clsEffort="0.1" exp="fpu_exceptions_::opb" loc="c,dt"/>
		<numeric clsEffort="0.1" exp="fpu_exceptions_::mantissa_in" loc="c,dt"/>
		<prop exp="fpu_exceptions_::except_trigger" loc="c,dt"/>
		<numeric clsEffort="0.1" exp="fpu_exceptions_::opa" loc="c,dt"/>
		<numeric clsEffort="0.1" exp="fpu_exceptions_::rmode" loc="c,dt"/>
		<prop exp="fpu_exceptions_::exception" loc="c,dt"/>
		<prop exp="fpu_exceptions_::addsub_inf_invalid" loc="c,dt"/>
		<numeric clsEffort="0.1" exp="fpu_exceptions_::exp_2047" loc="c,dt"/>
		<numeric clsEffort="0.1" exp="fpu_exceptions_::in_except" loc="c,dt"/>
		<numeric clsEffort="0.1" exp="fpu_exceptions_::exp_2046" loc="c,dt"/>
		<prop exp="fpu_exceptions_::add" loc="c,dt"/>
		<numeric clsEffort="0.1" exp="fpu_exceptions_::out_1" loc="c,dt"/>
		<prop exp="fpu_exceptions_::inexact_trigger" loc="c,dt"/>
		<numeric clsEffort="0.1" exp="fpu_exceptions_::exponent_in" loc="c,dt"/>
		<prop exp="fpu_exceptions_::out_pos_inf" loc="c,dt"/>
		<prop exp="fpu_exceptions_::opa_neg_inf" loc="c,dt"/>
		<numeric clsEffort="0.1" exp="fpu_exceptions_::fpu_op" loc="c,dt"/>
		<prop exp="fpu_exceptions_::rst" loc="c,dt"/>
		<prop exp="fpu_exceptions_::addsub_inf" loc="c,dt"/>
		<prop exp="fpu_exceptions_::underflow_trigger" loc="c,dt"/>
		<numeric clsEffort="0.1" exp="fpu_exceptions_::NaN_output_0" loc="c,dt"/>
		<prop exp="fpu_exceptions_::SNaN_input" loc="c,dt"/>
		<prop exp="fpu_exceptions_::opa_pos_inf" loc="c,dt"/>
		<prop exp="fpu_exceptions_::SNaN_trigger" loc="c,dt"/>
		<prop exp="fpu_exceptions_::NaN_out_trigger" loc="c,dt"/>
		<prop exp="fpu_exceptions_::enable" loc="c,dt"/>
		<prop exp="fpu_exceptions_::a_NaN" loc="c,dt"/>
		<prop exp="fpu_exceptions_::invalid" loc="c,dt"/>
		<prop exp="fpu_exceptions_::add_inf" loc="c,dt"/>
		<prop exp="fpu_exceptions_::round_nearest" loc="c,dt"/>
		<prop exp="fpu_exceptions_::div_0_by_0" loc="c,dt"/>
		<prop exp="fpu_exceptions_::div_inf" loc="c,dt"/>
		<prop exp="fpu_exceptions_::divide" loc="c,dt"/>
		<prop exp="fpu_exceptions_::sub_inf" loc="c,dt"/>
		<numeric clsEffort="0.1" exp="fpu_exceptions_::mantissa_max" loc="c,dt"/>
		<prop exp="fpu_exceptions_::div_by_0" loc="c,dt"/>
		<prop exp="fpu_exceptions_::ex_enable" loc="c,dt"/>
		<prop exp="fpu_exceptions_::div_inf_by_inf" loc="c,dt"/>
		<prop exp="fpu_exceptions_::div_uf" loc="c,dt"/>
		<prop exp="fpu_exceptions_::enable_trigger" loc="c,dt"/>
		<prop exp="fpu_exceptions_::in_et_zero" loc="c,dt"/>



		<template dtLimits="5D,3W,15A,-0.1E,R" exp="G({..#1&..}|-> P0)" /> 



		<sort name="causality" exp="1-afct/traceLength"/>
		<sort name="frequency" exp="atct/traceLength"/>
	</context>
</harm>



